{
  "comments": [
    {
      "key": {
        "uuid": "9b95c5f4_9deea433",
        "filename": "tests/unit/test_zk.py",
        "patchSetId": 16
      },
      "lineNbr": 1333,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-09-13T20:08:34Z",
      "side": 1,
      "message": "As described in the other file, I think this test should actually be as follows:\n\n    def test_cache_sync(self):\n        other_cache \u003d DummyChangeCache(self.zk_client, DummyConnection())\n\n        key \u003d \u0027foo foo\u0027\n        change \u003d DummyChange(\"project\", {key: \"bar\"})\n        self.cache.set(key, change)\n        self.assertIsNotNone(other_cache.get(key))\n\n        change_other \u003d other_cache.get(key)\n        change_other.number \u003d 123\n        other_cache.set(key, change_other)\n\n        import time; time.sleep(0.5)\n        self.assertEqual(change.number, 123)\n\n        other_cache.delete(key)\n        self.assertIsNone(self.cache.get(key))\n\nThe time.sleep is a placeholder; it should probably actually be an iterate_timeout that waits for change.number \u003d\u003d 123.\n\nThis does 2 things (both of which fail in the current code).\n\n1) We use a key which requires quoting.\n2) We test that a other_cache.set() updates our local self.cache object (ie, we set a data watch on the initial self.cache.set()).",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf524f59_4384f2c4",
        "filename": "tests/unit/test_zk.py",
        "patchSetId": 16
      },
      "lineNbr": 1333,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T22:11:40Z",
      "side": 1,
      "message": "This is the form of key that the gerrit driver uses:\n\n  key \u003d str((event.change_number, event.patch_number))\n\nMaybe even consider using that type of key here as that has a number of things that need quoting.",
      "parentUuid": "9b95c5f4_9deea433",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba7bad4c_d4bed06a",
        "filename": "zuul/model.py",
        "patchSetId": 16
      },
      "lineNbr": 3579,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T18:46:54Z",
      "side": 1,
      "message": "Why is project missing from here when we have it in the serialize method?",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de07e1c3_ce678a8c",
        "filename": "zuul/model.py",
        "patchSetId": 16
      },
      "lineNbr": 3579,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-09-14T11:54:29Z",
      "side": 1,
      "message": "The project of a change is supplied via the init and is immutable. However, if we create a new change object from serialized data we need the project name in order to create it with the correct project instance.\n\nA better name for the serialize/deserialize methods would be toDict/updateFromDict, but that is already used for the executor specific serialization.",
      "parentUuid": "ba7bad4c_d4bed06a",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23486db8_237a27b7",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 34,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T18:46:54Z",
      "side": 1,
      "message": "Might be a bit more clear to use https://docs.python.org/3/library/os.path.html#os.path.basename ?",
      "range": {
        "startLine": 34,
        "startChar": 24,
        "endLine": 34,
        "endChar": 48
      },
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a3f8e1c_98c829fc",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 34,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-09-14T11:54:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23486db8_237a27b7",
      "range": {
        "startLine": 34,
        "startChar": 24,
        "endLine": 34,
        "endChar": 48
      },
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6632ec_488d1a05",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T18:46:54Z",
      "side": 1,
      "message": "Thinking out loud here:\n\nWe sometimes have caches in memory of the zuul processes and we sometimes cache data in zookeeper. Might be a good idea to try and come up with some sort of convention for identifying which cache we are talking about when naming them?",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41e91d32_3cf52579",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 41,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-09-15T09:00:16Z",
      "side": 1,
      "message": "You mean something like ZookeeperAbstractChangeCache and GerritZookeeperChangeCache?",
      "parentUuid": "1a6632ec_488d1a05",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0875a8ca_1a1b8408",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 91,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T18:46:54Z",
      "side": 1,
      "message": "I didn\u0027t realize you can do function calls in f strings. Neat.",
      "range": {
        "startLine": 91,
        "startChar": 36,
        "endLine": 91,
        "endChar": 51
      },
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c7b393_b5fbbf82",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-09-13T18:46:54Z",
      "side": 1,
      "message": "cache_keys is a set of unquoted keys due to line 94. I think that we put unquoted keys in self._change_cache because _cacheItemWatcher gets the key from _keyFromPath which calls unquote.\n\nHowever here we call the keys we iterate over quoted_key. Is this actually a quoted key? If so I think we have a data type mismatch somewhere? Though I\u0027m having a hard time finding exactly where and maybe this var should just be called key or unquoted_key to reduce confusion.",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75d45114_7f376e8d",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-09-13T20:08:34Z",
      "side": 1,
      "message": "I\u0027ve verified this is a bug.  I modified test_cache_sync so that the key has a space (\"foo foo\" instead of \"foo\"), and I can see that we\u0027re setting a data watch on a node that will never exist.  Clark is right, these are unquoted keys.\n\nNow, having done that, the test still doesn\u0027t fail, and I think that\u0027s because it\u0027s flawed.  I\u0027m going write more about that as a comment on the test itself.",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f10403e_a34dde7f",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 101,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-09-14T11:54:29Z",
      "side": 1,
      "message": "Thanks for catching that! In the process of fixing that I found other places that had race conditions so I think this needs a little more work.",
      "parentUuid": "75d45114_7f376e8d",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a888b3f_88b3e979",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 105,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-09-13T20:08:34Z",
      "side": 1,
      "message": "Note there\u0027s a further race with .set() and creating data watches.  More on .set() below.",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1848e3d5_564984ea",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 196,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-09-13T20:08:34Z",
      "side": 1,
      "message": "We insert the change into the cache here, but we do so without creating a data watch.  That means that if the children watch fires after this point (that\u0027s likely; it\u0027s what happens in the tests), it will see that we already have a cache entry and will not set a data watch.  So we either need to set a data watch here, or update the children watch to use a different method of deciding when to add data watches.",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d08fc1b_022a5681",
        "filename": "zuul/zk/change_cache.py",
        "patchSetId": 16
      },
      "lineNbr": 196,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-09-14T11:54:29Z",
      "side": 1,
      "message": "Ack, the same is true for get() when the event for a new entry is not yet processed.",
      "parentUuid": "1848e3d5_564984ea",
      "revId": "5fd76bc6f521dcf1162621fdfb6467d9a5cd6848",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}