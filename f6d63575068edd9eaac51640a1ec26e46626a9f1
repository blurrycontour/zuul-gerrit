{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97037f89_e47bd73e",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-13T21:31:42Z",
      "side": 1,
      "message": "The current page honors the pipeline definition order so that an operator can define the pipelines in whatever order they prefer.  For example, opendev uses something akin to patch lifecycle, so check comes first, then gate, then post-merge.  Here you note that the pipelines should be sorted according to what is most important.  I think it\u0027s an open question whether the most important is the one with the most items in it, or if importance is dependent on workflow (for example, in opendev, the periodic pipeline routinely has the most items in it, but is the least important, so it is manually listed last).\n\nI also wonder if the order of the pipelines changing would be difficult to deal with (especially if check and gate both have between 9 and 10 items and switch back and forth).\n\nI\u0027m not sure how to resolve this, as both use cases seem sensible (1: focus on importance related to lifecycle; 2: focus on importance related te resource usage; a third option might be importance related to overall failure rate!)\n\nMaybe we need selectable sort options?",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dbeedad_529990ec",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:48:56Z",
      "side": 1,
      "message": "It\u0027s a good point that the \"importance\" might vary from deployment to deployment. For most tenants in our deployment, gate is the most important pipeline, whereby periodic pipelines could be sorted last. So my current idea would be something like: Order by pipeline type (dependent -\u003e independent -\u003e \u003cothers\u003e -\u003e periodic) and for each pipeline type order by number of items. At least for our deployment this would be a good improvement. (I think I could have been clearer on this point in the spec).\n\nI was also thinking about a selectable sort option, but this might need some more work/exploration to do it right. Do you think we could agree on a sorting option to start with and implement that later on? Otherwise, we could keep the sort order for now (as defined in the zuul config) and do that later on.\n\nRegarding the changing in order during reload: That\u0027s also something we have to deal with, but I assume the impact wouldn\u0027t be too big if we include the order by pipeline type. In the current version of the status page, the auto-reload also often shifts the pipelines back and forth on the screen although the ordering itself doesn\u0027t change. But this is mainly because it shows also all items and jobs which makes each pipeline take a lot more space.",
      "parentUuid": "97037f89_e47bd73e",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14d75579_372dd551",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-21T18:01:53Z",
      "side": 1,
      "message": "Yeah, perhaps the easiest way forward would be to stick with the current manual sort for now, and then after the end of the refactoring series, put a standalone change to sort by type,length that we can evaluate separately.  I do agree that doing that will make things a bit more stable, but I also worry that with many different independent pipelines of varying importance that may still end up being unintuitive for folks.  The more pipelines people have, the more likely they are to be annoyed that they have to actually read all of their names to find the one that they want rather than using spatial memory.\n\n(And yes, I agree that the current shifting based on layout constraints is also not ideal for the same reason and I look forward to the improvement there.  :)",
      "parentUuid": "1dbeedad_529990ec",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ebece1c_f0bd19f0",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 9311
      },
      "writtenOn": "2024-05-22T12:32:07Z",
      "side": 1,
      "message": "For another data-point, in rdoproject, the promotion pipelines which happen periodically are the most important for release engineers. Moreover, the manual sort is not very intuitive as the filename order takes precedence. Here is the status page:\n\n  https://review.rdoproject.org/zuul/status\n  \nâ€¦ which is defined in this zuul.d:\n\n  https://review.rdoproject.org/r/plugins/gitiles/config/+/refs/heads/master/zuul.d",
      "parentUuid": "14d75579_372dd551",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa11befe_1650c120",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-06-04T23:39:14Z",
      "side": 1,
      "message": "You could still gain control by sorting the files by prefixing numbers (but of course you\u0027d need to split/organize the objects into files to accommodate that).\n\nNot saying it\u0027s great, but it\u0027s an option.",
      "parentUuid": "1ebece1c_f0bd19f0",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b5741e9_1c9b3f3a",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-13T21:31:42Z",
      "side": 1,
      "message": "I would add \"see the entire list of configured pipelines\" as a use case.  That would suggest this should be an option.  This may have been implicit, but it\u0027s probably good to explicitly list it.",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5c16086_0cb6cd55",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:48:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4b5741e9_1c9b3f3a",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e52c8813_99b8e98e",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-13T21:31:42Z",
      "side": 1,
      "message": "Clarification: filter by change or project exists, but queue does not.",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd5c6e00_101b4d30",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:48:56Z",
      "side": 1,
      "message": "Ack, although the current implementation is more like a wildcard filter for the content on this page. It also works for pipeline names, but only if they match the search string exactly. I was more thinking about an \"advanced\" filtering like we have on the builds and buildsets page. Maybe I rephrase this to \"Improve the current filtering\".",
      "parentUuid": "e52c8813_99b8e98e",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cecd01d5_18943568",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-13T21:31:42Z",
      "side": 1,
      "message": "Clarification: bookmark by change or project exists (eg https://zuul.opendev.org/t/openstack/status#neutron ) but maybe you were thinking of the queue.",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a99aaaa_9e477352",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:48:56Z",
      "side": 1,
      "message": "To be honest, I wasn\u0027t aware that the current filter on the status page is populated to the URL, so I will rephrase this use case as well.\n\nSimilar to my comment above, I was thinking about bookmark a status page for a specific project, change, ... (like for the builds and buildsets pages). I will rephrase this use case to be more specific on this.",
      "parentUuid": "cecd01d5_18943568",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2b30d1c_17d93b59",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-21T18:01:53Z",
      "side": 1,
      "message": "One more I just thought of:\n\nFollow a change through multiple pipelines including pre- and post-merge.\n\nThis one is tricky.  Imagine that you\u0027re an opendev admin, and you propose a change to a service configuration; it goes through check and is approved, it goes through gate and is merged, one of the change-based post-merge pipelines runs some jobs; one of the ref-based post-merge pipelines runs some jobs, then perhaps a timer-based pipeline runs some jobs.  We often watch that progression in real-time, so we know when production changes are actually deployed, so being able to see what\u0027s going on even as a change mutates form from a gerrit change to a ref-update is helpful.\n\n[I\u0027m not saying we need to support exactly the same workflow here, but we should have an answer for how that will change.]",
      "range": {
        "startLine": 68,
        "startChar": 35,
        "endLine": 68,
        "endChar": 42
      },
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6726a1f_69cd4255",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-22T07:38:21Z",
      "side": 1,
      "message": "I imagine it would be great to have something like this, but that might indeed be tricky and not possible without any API changes that allow us to identify the change (or the item(s) related to the change) in different pipelines - especially the timer/ref-based ones.\n\nThis might also be more of a \"single change panel\" use case, but I will add it to the list. I think this might work well with what I have in mind for the single change panel after the status view is done - not saying it would be easy to implement.\n\nI\u0027m a little confused by your last sentence:\n\u003e I\u0027m not saying we need to support exactly the same workflow here, but we should have an answer for how that will change.\n\nDo you see this as \"fulfilled\" by the current implementation of the status page? In my opinion this would be a new use case. I mean: On the current status page this works if you know what to look for (the change) and where (in which pipelines). But this only works if the amount of items on the status page is manageable and not too crowded.",
      "parentUuid": "e2b30d1c_17d93b59",
      "range": {
        "startLine": 68,
        "startChar": 35,
        "endLine": 68,
        "endChar": 42
      },
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "125359fd_cb29d0b0",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-06-04T23:39:14Z",
      "side": 1,
      "message": "I don\u0027t know the answer to your first question yet, since I haven\u0027t looked at the new page with this in mind.\n\nI do agree that for this to work, you do need to know where to look for the change (but opendev admins know this -- they are explicitly monitoring a change to the system, so they know to expect a specific change and look for it).  The requirement that it not be too crowded, however, is not necessarily the case.  Due to an accident of history, the opendev continuous deployment jobs are actually in the openstack tenant, which is opendev\u0027s most populous tenant (and it frequently has large check and gate pipelines).  It\u0027s easy to search/filter check and gate for the change, and the deployment pipelines are always lightly populated (there is a natural limit to the number of simultaneous things that can be deployed -- often it\u0027s 1), so it\u0027s easy to watch those.\n\nNow that I think about this a bit more, I realize that I often filter the status page by project in this case.  So if you want to imagine this workflow, that\u0027s probably the easiest thing: filter for \"opendev/system-config\" on the openstack status page, and watch an item move from check, then gate then to a deploy pipeline.  Another wrinkle: some deployments happen in a periodic pipeline, so we\u0027re watching to see whether one of those started before or after a change merged.\n\nA single change panel would be great for this, and it would work for change-merged triggered pipelines, but not ref-updated ones (or periodic).",
      "parentUuid": "c6726a1f_69cd4255",
      "range": {
        "startLine": 68,
        "startChar": 35,
        "endLine": 68,
        "endChar": 42
      },
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "629434e6_39d76c61",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-13T21:31:42Z",
      "side": 1,
      "message": "I would add: see all of the pipelines my change is currently included in.  (to deal with the semi-common case of, say, multiple check pipelines, or even seeing that a change is simultaneously in check and gate)",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b8f302c_57e88c19",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:48:56Z",
      "side": 1,
      "message": "I see this more as a use case for the single change panel (where it\u0027s also currently visible).\n\nAs for the status page I\u0027m not sure if this is a \"feature\" in the current implementation. Sure, the same change will be shown in each pipeline it is enqueued, but most of the time you won\u0027t be able to spot this as there are so many changes shown - except you filter for this specific change.\n\nIn the new status page it would be similar. The change will be shown in each pipeline it is enqueued, but as it\u0027s only a box/square you won\u0027t notice that unless you filter only for this change.\n\nWhen viewing a change in the single change panel on the other hand it\u0027s very clear to see if the change is enqueued in multiple pipelines.",
      "parentUuid": "629434e6_39d76c61",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b72e0aaa_e4459103",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-05-16T09:50:27Z",
      "side": 1,
      "message": "This comment wasn\u0027t meant to be \"resolved\", not sure why gerrit did that.",
      "parentUuid": "6b8f302c_57e88c19",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2b861d_176cf21a",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-05-21T18:01:53Z",
      "side": 1,
      "message": "[I\u0027m always accidentally resolving things too.  I wish we could toggle it without leaving another comment.]\n\nI agree that a single change panel with multiple pipelines is likely to satisfy this use case.  Just want to make sure we note it; the existing text only has a singular \"pipeline\".",
      "parentUuid": "b72e0aaa_e4459103",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62cddd7f_a2b26cc4",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-06-12T20:19:54Z",
      "side": 1,
      "message": "Unrelated to the above discussion I think for both developers and operators it is important to be able to find build results from the status page/panels and trace them to build logs to diagnose issues quickly. The entry on line 72 implies this will still be the case but I think this is improtant to call out as I regularly do this as both a zuul operator (determine if system is currently in a sad state) and as a developer (determine problems more quickly and respin if appropriate).",
      "parentUuid": "ba2b861d_176cf21a",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b85976e_426e21c9",
        "filename": "doc/source/developer/specs/status-page-2.0.rst",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 27952
      },
      "writtenOn": "2024-06-14T05:41:57Z",
      "side": 1,
      "message": "I didn\u0027t see this necessarily as a use case for the status UI itself, as it\u0027s just a link to another page (live log/build result page), which is still available. But reading your comment now, it makes sense to add it to the spec. I will add it to the \"developer\" section. I don\u0027t see those roles as mutually exclusive (so both roles could have the same use cases - as the same person could have both roles).",
      "parentUuid": "62cddd7f_a2b26cc4",
      "revId": "f6d63575068edd9eaac51640a1ec26e46626a9f1",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}