{
  "comments": [
    {
      "key": {
        "uuid": "AAAAW3//myo\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 6808
      },
      "writtenOn": "2014-04-11T19:43:32Z",
      "side": 1,
      "message": "The way I ended up using it is \"#change-{change.number},{change.patchset}\" (corresponding to the \u0027\u003cdiv id\u003d\"change-\u0027 + change.id + \u0027\"\u003e\u0027 build by zuul/statisjs).\n\nThe number,patchset format isn\u0027t actually concatenated by our script though, that is done by Zuul as part of JSON status API, it gives change objects inside the pipeline list as { id: \u002712345,2\u0027 }.\n\nIdeally we\u0027d have a placeholder here like {change.id} that does this so that we don\u0027t have to hardcode the fact that it uses \"number,patchset\" as id.\n\nDoes {change.id} exist?",
      "revId": "a2e26d7c1bada4149a88e4ccc9ac799c646ffa50",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAW3//hEs\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-04-14T02:25:18Z",
      "side": 1,
      "message": "This isn\u0027t hardcoded though, it\u0027s an example configuration. The idea is to be able to substitute any change or pipeline object parameters.\n\n{change.id} does not exist.",
      "parentUuid": "AAAAW3//myo\u003d",
      "revId": "a2e26d7c1bada4149a88e4ccc9ac799c646ffa50",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXH//8k8\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-04-16T10:29:01Z",
      "side": 1,
      "message": "The Change object has a _id() method which returns the change#, patchset# though.  I dont think it is too much of a trouble to fill them explicitly with {change.number},{change.patchset}",
      "parentUuid": "AAAAW3//hEs\u003d",
      "revId": "a2e26d7c1bada4149a88e4ccc9ac799c646ffa50",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAW3//hEg\u003d",
        "filename": "zuul/scheduler.py",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-04-14T02:25:18Z",
      "side": 1,
      "message": "You\u0027re adding the message before the line break here where as it used to be after the line break",
      "revId": "a2e26d7c1bada4149a88e4ccc9ac799c646ffa50",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAXH//8ks\u003d",
        "filename": "zuul/scheduler.py",
        "patchSetId": 1
      },
      "lineNbr": 988,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-04-16T10:29:01Z",
      "side": 1,
      "message": "Good catch. Done!",
      "parentUuid": "AAAAW3//hEg\u003d",
      "revId": "a2e26d7c1bada4149a88e4ccc9ac799c646ffa50",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}