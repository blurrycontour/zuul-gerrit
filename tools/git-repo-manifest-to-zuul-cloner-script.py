#!/usr/bin/env python3
# Copyright 2016 BMW Car IT GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# This script can be used for cloning git-repo managed projects using zuul-cloner.
#
# It takes a fully assembled manifest file generated by 'repo manifest' and
# generates the appropriate clonemap and a script which calls the zuul-cloner
# once for every remote with the according projects.
#
# The generated clone-script.sh can be parametrized using the following
# environment variables:
# ZUUL_CLONER: path to the zuul-cloner script, defaults to zuul-cloner
# ZUUL_CLONER_ARGS: additional arguments to pass to the zuul-cloner

import os
import stat
import sys
import xmltodict
import yaml

if len(sys.argv) != 2:
    print('Usage: %s <MANIFEST>' % sys.argv[0])

CLONE_SCRIPT = 'clone-script.sh'
SCRIPT_PREFIX = '''#!/bin/bash

set -eu -o pipefail

ZUUL_CLONER=${ZUUL_CLONER:-zuul-cloner}
ZUUL_CLONER_ARGS=${ZUUL_CLONER_ARGS:-}

run_cloner() {
    echo "Running zuul-cloner -m clonemap ${*}"
    # FIXME: use repo caching
    $ZUUL_CLONER $ZUUL_CLONER_ARGS -m clonemap "${@}" | sed 's/^/    /g'
}

'''

remotes = {}
projects_by_remote = {}
destinations_by_project = {}

with open(sys.argv[1]) as f:
    xml = f.read()

    manifest = xmltodict.parse(xml)
    root = manifest['manifest']

    # if only one project is defined the xml element is no list
    manifest_projects = []
    if isinstance(root['project'], list):
        manifest_projects = root['project']
    else:
        manifest_projects.append(root['project'])

    # if only one remote is defined the xml element is no list
    manifest_remotes = []
    if isinstance(root['remote'], list):
        manifest_remotes = root['remote']
    else:
        manifest_remotes.append(root['remote'])

    # gather remotes
    for remote in manifest_remotes:
        remotes[remote['@name']] = remote['@fetch'].rstrip('/')

    # gather default remote
    default_remote_name = root['default']['@remote']

    # gather project info
    for project in manifest_projects:
        project_name = project['@name']
        project_path = project['@path']
        project_remote = project.get('@remote', default_remote_name)

        # project by remote
        project_list = projects_by_remote.get(project_remote, [])
        project_list.append(project_name)
        projects_by_remote[project_remote] = project_list

        # project by path
        destinations_by_project[project_name] = project_path

    # generate script
    cloner_calls = []
    for remote in projects_by_remote.keys():
        cloner_calls.append("run_cloner %s %s\n" %
            (remotes[remote], u' '.join(projects_by_remote[remote])))

    script = '%s\n\n%s' % (SCRIPT_PREFIX, '\n'.join(cloner_calls))

    with open(CLONE_SCRIPT, 'w') as clone_script:
        clone_script.write(script)

    clone_script_stat = os.stat(CLONE_SCRIPT)
    os.chmod(CLONE_SCRIPT, clone_script_stat.st_mode | stat.S_IEXEC)

    # generate clone map
    clonemap = dict()
    clonemap_projects = []
    for project in destinations_by_project.keys():
        clonemap_projects.append({
            'name': project,
            'dest': destinations_by_project[project]
            })
    clonemap['clonemap'] = clonemap_projects

    with open('clonemap', 'w') as clonemap_file:
        yaml.dump(clonemap, clonemap_file, default_flow_style=False)
