{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5a534149_f8b4a922",
        "filename": "zuul/executor/server.py",
        "patchSetId": 2
      },
      "lineNbr": 1136,
      "author": {
        "id": 27582
      },
      "writtenOn": "2023-11-13T07:50:26Z",
      "side": 1,
      "message": "Isn\u0027t `trace.startSpanInContext()` already using the span?",
      "revId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eefe1246_6adb3e27",
        "filename": "zuul/executor/server.py",
        "patchSetId": 2
      },
      "lineNbr": 1136,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-13T14:51:11Z",
      "side": 1,
      "message": "Unpacking everything, we need to:\n1. restore the span context of the build request\n2. create a dummy non-recording span to use an the build request span\n  (because there is already a real build request span created earlier; we don\u0027t need to do anything to it, we just need it to be a parent; we don\u0027t want this code to actually emit the start and end events for the parent span, thus the fake).\n3. \"use\" the non-recording parent span (make it current)\n4. create a new JobExecution child span under the parent\n5. \"use\" the JobExecution span (make it current)\n\nstartSpanInContext performs steps 1-4.  In particular, the \"use\" call inside of startSpanInContext is the one from step 3, not step 5.\n\nI\u0027m not 100% sure why we decided not to put #5 inside that method; it does seem like that would be a useful method.  Maybe we should analyze our usage and see if we always end up with this pattern and refactor.",
      "parentUuid": "5a534149_f8b4a922",
      "revId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd3b9d88_38b75644",
        "filename": "zuul/executor/server.py",
        "patchSetId": 2
      },
      "lineNbr": 1136,
      "author": {
        "id": 27582
      },
      "writtenOn": "2023-11-13T14:59:40Z",
      "side": 1,
      "message": "Ah right, `tracer.start_span()` is not using the span. That was `tracer.start_as_current_span()`. Thanks!",
      "parentUuid": "eefe1246_6adb3e27",
      "revId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "583c8111_7ac3ad41",
        "filename": "zuul/executor/server.py",
        "patchSetId": 2
      },
      "lineNbr": 3739,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-14T18:50:18Z",
      "side": 1,
      "message": "Similar to the discussion with Simon above: Do we need to use_span() on lock_span and update_span here since startSpanInContext() starts them but doesn\u0027t use them?",
      "revId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4dcb565_e0b322e7",
        "filename": "zuul/executor/server.py",
        "patchSetId": 2
      },
      "lineNbr": 3739,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-14T19:01:46Z",
      "side": 1,
      "message": "Not necessarily -- only if we were planning on starting more child spans inside these.",
      "parentUuid": "583c8111_7ac3ad41",
      "revId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Code reviewed by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Verified in gate by CI"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Workflow",
        "description": {
          "value": "Approved for gate by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Workflow\u003dMAX AND -label:Workflow\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Workflow=MAX AND -label:Workflow=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Workflow=MAX"],"failingAtoms":["label:Workflow=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "07e28cca57bfe33b433ece81ce92cb365952f655",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}