{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "263944b0_033d27b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "This is a partial review. I\u0027ve reviewed everything but the tests and the alembic migration. I want to post this now before I\u0027ve reviewed the rest of it because its a big change and I need to pop out for a bit.\n\nOne other observation I\u0027ve made is that we seem to be mixing together some logically distinct updates to the database. There is the addition of the refs table and the refs association table and all of the FKs for that. Then separately we seem to be updating the sizes of some existing columns and renaming indexes/foreign keys/etc.\n\nI suspect we may do the width change here because it is more efficient to do that since we are copying the data anyway? But maybe the renames of existing indexes and foreign keys should be a distinct migration?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1320929_d0108028",
        "filename": "tests/unit/test_connection.py",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Nit the old test is organized this way too but why not check all of buildsets[0] attriutes then do buildsets[1] after? Instead they are smushed together and it reads a bit weird.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80ad3e0a_36e8b4ef",
        "filename": "tests/unit/test_connection.py",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "No good reason I can think of.",
      "parentUuid": "b1320929_d0108028",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b87c5eea_cd8554c5",
        "filename": "tests/unit/test_connection.py",
        "patchSetId": 6
      },
      "lineNbr": 351,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "I don\u0027t recall cascading deletes anywhere (but maybe that is implicit?). Does this mean the zuul_ref table will grow indefinitely?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea80c853_409977af",
        "filename": "tests/unit/test_connection.py",
        "patchSetId": 6
      },
      "lineNbr": 351,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "We don\u0027t have cascading deletes on the zuul_ref table because of the many-to-many relationship there.  It will grow without bounds for now; at some point we should add some kind of garbage collection for it to the db prune commands.  It\u0027ll need to be GC-style since we can only remove a ref after the last build or buildset referencing it is deleted.  I don\u0027t think that\u0027s urgent.",
      "parentUuid": "b87c5eea_cd8554c5",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db5f3755_43c5df0f",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Do we add all of these project column inserts as a sanity check that the old versions of the db are being used? We no longer keep that info in zuul_buildset (it goes in the refs table) and if we error then we know we are at the wrong db version?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5854b5ad_39870148",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "That too but mostly this is some minimal data in the old format to make sure that after the migration we still have buildsets.\n\nThis test only really needs to change because we now require a bit more data in order to make the query below.  Nothing really changes here other than just fleshing out the test data more.",
      "parentUuid": "db5f3755_43c5df0f",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b9a83a4_ba13922b",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 313,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Nit maybe read back the invalid data and ensure it is present to ensure the table contents themselves haven\u0027t been modified.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da4901a3_3df71342",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 313,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Not a bad idea, but I think as long as we don\u0027t change the migration structure in this change we probably don\u0027t need to do that, since the rollback strategy is just to drop tables.",
      "parentUuid": "5b9a83a4_ba13922b",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6b15f1_b679f4f9",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 315,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Should this test exist in the postgresql test class below as well?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95fb5363_d15419b3",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 315,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Wouldn\u0027t hurt but I don\u0027t think we need it for this change -- there should be plenty of coverage of this functionality.  This is mostly a smoketest.",
      "parentUuid": "ef6b15f1_b679f4f9",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c879994d_29de382f",
        "filename": "tests/unit/test_database.py",
        "patchSetId": 6
      },
      "lineNbr": 548,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "See above about checking the data that would be invalid if migrations succeeded.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c12a2b4_30343a7a",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 115,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Nit this is repetition in the comment (possibly copy paste error?).",
      "range": {
        "startLine": 115,
        "startChar": 8,
        "endLine": 115,
        "endChar": 20
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1da7950a_8b3f6afc",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 162,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Do we not need an AS statement? For example:\n\n```\nfrom {prefixed_buildset} as bs\n```",
      "range": {
        "startLine": 162,
        "startChar": 12,
        "endLine": 162,
        "endChar": 39
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e7c5640_7f2c8f83",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 162,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "This works with both dbmss.",
      "parentUuid": "1da7950a_8b3f6afc",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fe85faa_c0c1669f",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 191,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "We quote change here because it is a sql keyword?",
      "range": {
        "startLine": 191,
        "startChar": 22,
        "endLine": 191,
        "endChar": 39
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07a3dd30_db395644",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 191,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "mysql specifically yes",
      "parentUuid": "2fe85faa_c0c1669f",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d83c8ed_35052bfb",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 251,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "I think we have the default value of 1 here because MAX(id) may be null if there are no rows at all. In that case is MAX(id)+1 a valid statement? Or will we end up erroring anyway? I worry that the default fallback here won\u0027t actually help us. Instead we might need something like:\n\n```\nselect setval(\n     \u0027{prefixed_buildset_new}_id_seq\u0027,\n     COALESCE(SELECT MAX(id) FROM {prefixed_buildset_new}, 0)+1, false)\n```",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f0866ca5_bfb258ce",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 251,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "This is fine, and is one of the accepted cantrips for this:\n\nopenstack_citest\u003d# create table foo(id serial);\nCREATE TABLE\nopenstack_citest\u003d# select COALESCE((SELECT MAX(id)+1 FROM foo), 1);\n coalesce \n----------\n        1",
      "parentUuid": "3d83c8ed_35052bfb",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bec191b1_9e59be12",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 251,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T16:37:08Z",
      "side": 1,
      "message": "This must be one of those SQL things that just works because it makes our lives easier even if NULL+1 makes no sense.",
      "parentUuid": "f0866ca5_bfb258ce",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e46b1a_5bc85309",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 333,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "See above.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e4860a8_93a1dcd8",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 333,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "It\u0027s fine.",
      "parentUuid": "d6e46b1a_5bc85309",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2977f95_72182a7e",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 388,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "The set foreign_key_checks\u003d0 we did previously should only be for the current session right? And if we are in a rollback we are on our way out of the session. Is this rollback of the foreign_key_checks\u003d0 necessary?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "372b29a5_c7bf191d",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 388,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Yes and it\u0027s not necessary but I like it anyway because in case we change something about this it\u0027s more future proof and doesn\u0027t leave a land-mine.",
      "parentUuid": "c2977f95_72182a7e",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6bb32153_e759d9e7",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 426,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Seems like we might be able to rename the old table to a new name that doesn\u0027t collide with the name we\u0027ll rename the new table to and then drop tables at the very end to avoid data loss with mysql?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d8fa1a4_02b50478",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 426,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "What we\u0027re doing here is as close as we can get to that, because renaming the indexes, etc, isn\u0027t automatic or atomic.",
      "parentUuid": "6bb32153_e759d9e7",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ce74ad0_8c340a24",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 452,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "These are new indexes instead of renames because we didn\u0027t create the index at all on prefix_build_new earlier?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "005e716d_58f43868",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 452,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Yes, which avoided extra renames.",
      "parentUuid": "4ce74ad0_8c340a24",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9baa8fd6_bd3dc8b2",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 542,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "Similar question to my previous one. We recreate rather than rename the index beacuse we didn\u0027t end up creating it on the new table earlier?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b313210_3699136b",
        "filename": "zuul/driver/sql/alembic/versions/f7843ddf1552_bundle_refactor.py",
        "patchSetId": 6
      },
      "lineNbr": 542,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Yep, this is more efficient.",
      "parentUuid": "9baa8fd6_bd3dc8b2",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb2d66f6_47258451",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Thinking out loud here I suppose it is possible for some code review system to 0 index their changes. It might be slightly safer to use -1 instead? That said I don\u0027t know of any that zero index today so that is probably not worth worrying about. And worst case for that system you just make a dummy 0 change and have zuul start processing at 1.",
      "range": {
        "startLine": 72,
        "startChar": 19,
        "endLine": 72,
        "endChar": 20
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb37b670_de5c724f",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "Certainly none that zuul currently supports do, so I think this is safe and makes sense.",
      "parentUuid": "eb2d66f6_47258451",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ed3a3d_e4897c4e",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 154,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Nit this comment is now a bit incomplete as we\u0027re doing the eager loading for buildset and ref.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09b8e885_fe152b00",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 286,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Note sqla indicates flush should only move data from python to the db\u0027s transaction buffer. It won\u0027t actually commit things. We rely on on our sessionc context managers exit path to commit things for us.",
      "range": {
        "startLine": 286,
        "startChar": 23,
        "endLine": 286,
        "endChar": 28
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9abdd9df_0cfa9a8d",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 299,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Nit not sure if you want to add a comment here about the contains_eager call and move the hint comment below to where we use with_hint?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "061b8323_0958b4a4",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 299,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "We could; if you\u0027re curious why I didn\u0027t in the first place, it\u0027s because in my mind the hint is part of the joins, so this is all one stanza.",
      "parentUuid": "9abdd9df_0cfa9a8d",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df8e94cf_acb4baff",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 424,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Is the move of _setup_models() important? Its a bit mysterious as to why this is happening.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ea3251c_ec45e020",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 424,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "I believe it is not strictly required.  What it does is facilitate some changes to the engine call that make for easier debugging and generation of test scripts, so I\u0027d like to leave it for easier maintenance on this and future changes.  Maybe in the future we can add some debug flags, but I promise I am trying to keep this change minimal.  :)",
      "parentUuid": "df8e94cf_acb4baff",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24e4e589_134b742b",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 500,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "With the Github driver patchset is the commit sha rather than an incremented counter right? Just thinking it would be nice if we could get away with a simple integer but I don\u0027t think we can.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66d09d2b_388a7892",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 500,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "Yes.  :(",
      "parentUuid": "24e4e589_134b742b",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa51aa8_271c9006",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 508,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Does a unique constraint impose the rules of index widths in mysql? Otherwise it doesn\u0027t look like we\u0027re using patchset, oldrev, and newrev in an index.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a7e0df0_06acb249",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 508,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "Unique constaints have an implicit index and it is length limited.  This one just fits with mb4 encoding.  The columns in an index can be used in the order of the index (So this is an effective index for \"project\" and \u0027project, ref\" and \"project, ref, change\", etc, but not \"project, newrev\").",
      "parentUuid": "6aa51aa8_271c9006",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b07c4ebd_3a7c394f",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 508,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T16:37:08Z",
      "side": 1,
      "message": "Looks like MySQL + InnoDB actually has variable limits for indexes depending on other factors like table row format and page size [0]. The range is 767 - 3072. We dont\u0027 really have control of that so probably want to fit under 767? I think just having project or ref in the index is enough to bump over that limit because 255 * 4bytes for utf8 \u003d 1020?\n\nThat said we may have preexisting indexes that are wider than 767 elsewhere that would mean our real limit for Zuul is already higher? Mostly I\u0027m worried about OpenDev\u0027s DB since it is older and may haev lower limits, but in theory I think other users may have small limits?\n\n[0] https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html",
      "parentUuid": "0a7e0df0_06acb249",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "392a2f0f_3deb7b5e",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 508,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T17:00:24Z",
      "side": 1,
      "message": "We should consider 3072 the effective max.  The smaller limits apply to non-default row formats (zuul never specified a format, so we would expect the default).  And the dynamic format (which allows for 3072) has been the default for longer than Zuul has existed (2005).  Opendev\u0027s database uses the dynamic format.\n\nOpendev is actually in a better place than most in terms of headroom.  It uses mb3 encoding since it predates mb4 being the default, meaning that it can fit more characters into the 3072 bytes available.  This change, however, is designed for mb4, the current default, and what Opendev should migrate to at some point in the future.  Fewer characters can fit in the bytes available.  But the indexes we specify here do fit using mb4, and that is what the current unit testing uses too, so we won\u0027t accidentally break that upgrade path.\n\nI have personally tested migrating Opendev\u0027s data set locally on mb3 tables to confirm that it will work in production, and have also tested a migration of Opendev starting with an mb4 encoding as well, in order to use it as a proxy for other similar systems.",
      "parentUuid": "b07c4ebd_3a7c394f",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d5d0bdd_b15128c4",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 586,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "I guess as long as you have a single foreign key to the RefModel table (ref_id) above sqlalchemy knows to use that mapping automatically. At least that seems implied by https://docs.sqlalchemy.org/en/20/orm/join_conditions.html#handling-multiple-join-paths which requires extra setup when there are ambiguous foreign keys.",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f275aa1_27ca723a",
        "filename": "zuul/driver/sql/sqlconnection.py",
        "patchSetId": 6
      },
      "lineNbr": 586,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "Yes, the foreign key definition makes that automatic.",
      "parentUuid": "4d5d0bdd_b15128c4",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4576b5e7_7963d7ba",
        "filename": "zuul/driver/sql/sqlreporter.py",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "db is a sqla session created by reportBuildsetStart() and used as a context manager. I believe that means the now multiple operations within this method are occuring within a single db transaction so we don\u0027t need to worry about that within this function. The data should be consistent despite multiple writes (either due to a single commit or a rollback).",
      "range": {
        "startLine": 48,
        "startChar": 30,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "345cc743_fddc2c68",
        "filename": "zuul/driver/sql/sqlreporter.py",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-16T00:28:15Z",
      "side": 1,
      "message": "We run getOrCreateRef above to get access to ref. Is it possible that we will append duplicate refs to the buildset here as a result? I believe the unique constraints in the db will cause this to error if so?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bbe0c97_6a9fc1ab",
        "filename": "zuul/driver/sql/sqlreporter.py",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-16T01:01:24Z",
      "side": 1,
      "message": "Yes; this might need to be tweaked once we support more than one.",
      "parentUuid": "345cc743_fddc2c68",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf9581d_aaff1be4",
        "filename": "zuul/driver/sql/sqlreporter.py",
        "patchSetId": 6
      },
      "lineNbr": 188,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "Similar story with db here as above in _createBuildset().",
      "range": {
        "startLine": 188,
        "startChar": 27,
        "endLine": 188,
        "endChar": 29
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4948cd60_816979b8",
        "filename": "zuul/web/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 1402,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "I\u0027m not sure I understand this TODO (or the condition for that matter). We\u0027re creating a dict that represents a build and a build will always have a buildset right? Additionally a build should always have a ref (even when it is run for a periodic timer). That should mean build buildset.event_id, buildset.uuid, and all of build.ref.* are valid here so we dno\u0027t need to guard against buildset being null?\n\nGiven the code was written this way do we also need to check that build.ref is not null if we are checking things?",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "069e74d5_f2cb3c33",
        "filename": "zuul/web/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 1402,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "This method is called a couple different ways.  If it\u0027s being called from the /buildset api endpoint, then buildset will be None (I know that sounds weird) because the calling context is creating a return dict representing the buildset and this method is being used only to supply the builds that hang off of that buildset.  In this case we don\u0027t supply duplicate information since the project/branch/etc are the same for every build.\n\nIn the future, at the completion of the bundle refactoring, those things will not be the same for every build, and to implement the corrective action for that, we should simply remove this condition and always return this data for every build, even the ones that hang off of a buildset dictionary.\n\nWe don\u0027t need to check for null here, if that kind of error exists the db shouldn\u0027t return any data.",
      "parentUuid": "4948cd60_816979b8",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9e2443d_c0d121d6",
        "filename": "zuul/web/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 1503,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-15T22:08:19Z",
      "side": 1,
      "message": "This will change when we start supporting multiple refs per buildset right?",
      "range": {
        "startLine": 1503,
        "startChar": 36,
        "endLine": 1503,
        "endChar": 39
      },
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "446ab25e_075b293e",
        "filename": "zuul/web/__init__.py",
        "patchSetId": 6
      },
      "lineNbr": 1503,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-15T23:52:38Z",
      "side": 1,
      "message": "Yep.  What to do here is less clear.  We might chose to drop these attributes in favor of relying on the ones for the builds.  Or maybe we make a list of refs that are involved in this buildset.",
      "parentUuid": "a9e2443d_c0d121d6",
      "revId": "0a08299b5fdbf89eddd17877ddf214f61c4e4d0f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}