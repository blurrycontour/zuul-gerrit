{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf0ea88_f883b8e3",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2275,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-30T19:42:40Z",
      "side": 1,
      "message": "Why are we providing bearer tokens for these requests now? as far as I can tell the config for these tests didn\u0027t change in a way that would require the token.",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb03d9ed_6e4e8e83",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2275,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-30T20:10:59Z",
      "side": 1,
      "message": "The new subclass adds access rules (ie, \"read only authz required\"), so we need to send the token even when reading in that case.  Since this class is meant to test access with an admin token anyway, it seemed appropriate to have the test use the token for the read check as well (it\u0027s not really the point of the test, and if it were, we\u0027re testing a scenario where the token will always be sent anyway, so it\u0027s more realistic).",
      "parentUuid": "ddf0ea88_f883b8e3",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29e0eb58_3e8da075",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2275,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-12-01T16:24:00Z",
      "side": 1,
      "message": "Aha I missed these tests were also running as part of the new class.",
      "parentUuid": "eb03d9ed_6e4e8e83",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd870cb7_2cfcd347",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2941,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-11-30T19:42:40Z",
      "side": 1,
      "message": "In this case tenant-whatever doesn\u0027t actually exist so there is no auth config for that tenant. I think the correct thing to do in that situation is to return an authorization error instead of say a 404 to avoid disclosing too much info. However, should we have a test to ensure we get authorization failures back when the tenant does exist but with an auth config that doesn\u0027t give the testuser access?",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0941a144_5343855d",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2941,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-11-30T20:10:59Z",
      "side": 1,
      "message": "Because of the way the tenant override is implemented: \n\nhttps://opendev.org/zuul/zuul/src/branch/master/zuul/web/__init__.py#L973-L975\n\nwhere it just checks whether \u0027tenant-whatever\u0027 matches the tenant in the url below (\u0027tenant-one\u0027), and doesn\u0027t do anything like look up the config of tenant-whatever, I don\u0027t think that test is necessary (or rather, that it is effectively the same as this test).  The other tests of that functionality in this file are written the same way too.\n\nIf you think it\u0027s risky not to have it, we can add it, but it\u0027s not trivial to write (it needs to be run in a multi-tenant config and these are all single-tenant so far).  It\u0027s not hard, but it\u0027s not like just 3 more lines to test that case.  If you do want to add it, we should do it in another change.",
      "parentUuid": "fd870cb7_2cfcd347",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a8997cf_95187f05",
        "filename": "tests/unit/test_web.py",
        "patchSetId": 2
      },
      "lineNbr": 2941,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-12-01T16:24:00Z",
      "side": 1,
      "message": "Considering code coverage doesn\u0027t change I don\u0027t think we need to add the extra test. I was mostly concerned the case hadn\u0027t been considered. Sounds like it had been and is covered so we should be good.",
      "parentUuid": "0941a144_5343855d",
      "revId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Code reviewed by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Verified in gate by CI"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Workflow",
        "description": {
          "value": "Approved for gate by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Workflow\u003dMAX AND -label:Workflow\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Workflow=MAX AND -label:Workflow=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Workflow=MAX"],"failingAtoms":["label:Workflow=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8a2458aac61801fbff3207a14a46586ad30f8923",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}