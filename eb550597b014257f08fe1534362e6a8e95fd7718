{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b1115c0_cc46b958",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-06-05T17:37:03Z",
      "side": 1,
      "message": "+2 despite my comment since the old code wasn\u0027t especially graceful either. A followup to do stronger error checking here may be a good idea though.",
      "revId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c04623d8_0a7573ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-06-05T17:40:12Z",
      "side": 1,
      "message": "I don\u0027t think we should add any more error handling.  The current code will exit with an appropriate error in the case of a problem.  We don\u0027t want to mask that error with a try/except handler.  And we do not want the program to continue.",
      "parentUuid": "1b1115c0_cc46b958",
      "revId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "868a1449_2924da08",
        "filename": "zuul/driver/bubblewrap/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-06-05T17:35:22Z",
      "side": 1,
      "message": "I think we need to do some error checking here. Something like:\n\n```\nf \u003d os.open()\nif f !\u003d -1:\n    try:\n        fcntl.ioctl()\n    finally:\n        os.close(f)\nelse:\n    raise SomeException()\n```",
      "revId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b1c85ab_4365a4d9",
        "filename": "zuul/driver/bubblewrap/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-06-05T17:37:40Z",
      "side": 1,
      "message": "I think this is already is exactly what we want: it either all works, or python will throw some exception.  We don\u0027t need to mask the exception which is what the proposed code will do.",
      "revId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "853dcf11_201304ef",
        "filename": "zuul/driver/bubblewrap/__init__.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-06-05T17:39:22Z",
      "side": 1,
      "message": "Nevermind trying to operate on fd -1 raises `OSError: [Errno 9] Bad file descriptor` which will cause this to crash and do sufficient error handling.",
      "parentUuid": "868a1449_2924da08",
      "revId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Code reviewed by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Verified in gate by CI"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Workflow",
        "description": {
          "value": "Approved for gate by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Workflow\u003dMAX AND -label:Workflow\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Workflow=MAX AND -label:Workflow=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Workflow=MAX"],"failingAtoms":["label:Workflow=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "eb550597b014257f08fe1534362e6a8e95fd7718",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}