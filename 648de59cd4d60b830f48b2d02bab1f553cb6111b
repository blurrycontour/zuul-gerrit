{
  "comments": [
    {
      "key": {
        "uuid": "dfdbfdef_99a90a7b",
        "filename": "tests/base.py",
        "patchSetId": 13
      },
      "lineNbr": 5130,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Since the keys of the history dict are job types I think the last sched\u0027s history will win and overwrite the others. I suspect we want to do some sort of appending of all the type history lists instead.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08e3655a_845cba78",
        "filename": "tests/base.py",
        "patchSetId": 13
      },
      "lineNbr": 5130,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T22:26:08Z",
      "side": 1,
      "message": "I think the keys of the history are job uuids.  Since this is a merger_api history, see HoldableMergerApi.submit for where it\u0027s appended.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82f3a661_cce03ec6",
        "filename": "tests/unit/test_merger_repo.py",
        "patchSetId": 13
      },
      "lineNbr": 1023,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Do we use a distinct zk_client object here? Wonder why it wasn\u0027t stopped above.\n\nAbove in the diff we stop the executor servers merger via a more merger specific method without touching the zk_client. Would that be a better approach?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f91c9d33_51d1e295",
        "filename": "tests/unit/test_merger_repo.py",
        "patchSetId": 13
      },
      "lineNbr": 1023,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "Yes, the executor server creates its own zk client connection.  We could probably shut down the whole executor for this test.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b65291_d8b3ffd2",
        "filename": "tests/unit/test_merger_repo.py",
        "patchSetId": 13
      },
      "lineNbr": 1023,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T22:26:08Z",
      "side": 1,
      "message": "Okay, it\u0027s harder to fully stop and start the executor than it is to do this.  I\u0027d like to just leave it as is since it works.\n\n(Detail: you can\u0027t start the executor after stopping it, and the test shutdown stops it automatically.  So we\u0027d need a different base class to handle this.)",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac6938eb_106dffd4",
        "filename": "zuul/driver/git/gitconnection.py",
        "patchSetId": 13
      },
      "lineNbr": 116,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "This is where we call getChangeFilesUpdated and we don\u0027t pass in needs_results. We also don\u0027t use needs_results above. Was the change above initially necessary and now no longer used?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d5984c_581a3491",
        "filename": "zuul/driver/git/gitconnection.py",
        "patchSetId": 13
      },
      "lineNbr": 116,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T22:26:08Z",
      "side": 1,
      "message": "This calls the method on line 67 of this file.  We do use needs_results above.  Basically, a merge request has 2 modes of operation:\n\n* needs_results\u003dFalse: the typical asynchronous request to merge a change in a pipeline and produce the results so zuul can proceed with a build.  The result of the merge will be placed in the pipeline results queue.\n* needs_results\u003dTrue: either the git driver or the configloader performing a synchronous merge request to find out something about a repo immediately.  In that case, there is no pipeline results queue for the request; instead the result will be placed in ZK and the merger api will return a future object which will contain the result after wait() completes.\n\nHaving said all that, we could probably infer needs_results from whether a buildset was provided with the requests, but this seems good for now.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9644384f_484d4eda",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "This might be a good place to be clear when we pass an event or when we pass an event_id. The old code seemed to get an event here which it then passed the event_id of to submitJob(). But now we seem to pass the event the whole way through?\n\nIs that ok for the annotated logger? will it handle both types?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88318168_64cd778b",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "We\u0027re not changing what\u0027s passed to submitJob; instead we\u0027re removing zuul_event_id from the payload for the job.\n\nI think what Felix is doing here is streamlining the code by putting the event id outside of the job parameters (but still it will be included in the request data).  Then if you check the merger server update in this change, it pulls the event id from the merge request instead of the payload.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7c3c900_e21c50e3",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Ah got it, I see now that the event.zuul_event_id was passed via data and then event was also passed. I agree this is better.",
      "parentUuid": "88318168_64cd778b",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c912abc_9fd865ee",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "I\u0027m having a hard time understanding this comment. Above it is stated that this request is by definition unlocked. I don\u0027t understand where there would be an is_locked() check that can fail if it wasn\u0027t already unlocked?\n\nSeparately we seem to acquire a scheduler cleanup lock before calling this method which should mean no other cleanups are running at the same time. This means we can only race the mergers?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e2e366a_16e18917",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "We only call this function if the merge request is unlocked.\n\nBut a lost merge request is defined as \"a merge request in running state that is unlocked\".\n\nWe check the state first, then we check the lock.  The following sequence can produce the error (prefixed by thread id for clarity):\n\n* [1] merge job is locked and in running state\n* [2] findLostMergeRequests lists all the merge jobs\n* [2] it performs a get on our merge job [note 1]\n* [2] it observes the state is \"running\"\n* [1] the merger finishes and updates the merge job state \"completed\"\n* [1] the merger unlocks the merge job\n* [2] findLostMergeRequests checks the lock on our merge job and sees it unlocked\n* [2] findLostMergeRequests declares the job lost\n* [2] this method updates the merge job to set it to \"completed\", using the zstat from the previous get (note 1 above)\n* [2] the update produces a BadVersionError because the zstat doesn\u0027t contain the latest node version\n\nTherefore we know we should ignore this job.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "155b9e8e_8381214a",
        "filename": "zuul/merger/client.py",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Got it this helps a bunch thanks.",
      "parentUuid": "8e2e366a_16e18917",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f569be54_67f3501a",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 150,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Might consider setting this flag immediately before starting the thread below. This way there is less time where the thread is not running but the flag is set?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28603fac_0e0ecff5",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 175,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Why not replace this with self.join() or remove the join def below?",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 175,
        "endChar": 33
      },
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b50bcce0_cc025b10",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 175,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "Or remove this join in favor of the one below?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a4306f5_3cff5ecf",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 175,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Yup basically we should call self.join() here I think.",
      "parentUuid": "b50bcce0_cc025b10",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28beeafb_e3a1f6db",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 175,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T22:26:08Z",
      "side": 1,
      "message": "Well, the reason we have stop and join separate is so that when we shut down, we can stop() everything and the join() everything; that way shutdown is parallel, not serial.  That\u0027s why I think we should drop this join and keep the one below.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83f32098_08bd1def",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 209,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Is this worthy of logging? We will skip the merge request on the assumption something else has the lock and is handling it. Might be painful to debug lost merges if we don\u0027t record this?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7d6ba9d_197b9932",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 209,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "We probably could; it would be a little verbose.  But this is the same behavior in the executor and we haven\u0027t needed it there yet.  I think I\u0027d prefer to wait and see if we need to add it.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "099735d1_9449b5d5",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 209,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "c7d6ba9d_197b9932",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1957d18f_74a3dea3",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 216,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "I think these calls can raise as they interact with zookeeper. If they raise we will not unlock the lock we grabbed above.\n\nPerhaps we should run everything after the lock acquisition in the try block?",
      "range": {
        "startLine": 212,
        "startChar": 8,
        "endLine": 216,
        "endChar": 45
      },
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e49ebcc_764b8292",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 216,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "I agree.  It is worth noting that if the ZK connection disappears, so will our lock, so we don\u0027t need to worry about that.  But if there\u0027s some sort of error that we accidentally don\u0027t handle lower in the call stack then we could leak the lock.  So better safe than sorry.\n\nThe executor actually handles this by adding the unlock in the equivalent of the runMerger method.  We should do that here.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "998403ec_6e12a421",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 225,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "I have a slight preference for maintaining symmetry with the lock and unlock calls if we can. I know completeMergeJob does the unlock but moving that here would make it clearer to see we are unlocking.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "825ec72a_172d4530",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 225,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "I think if we structure this like we do the executor, it will be robust and easy to follow.  It won\u0027t be exactly symmetrical here, but I think we can handle it.\n\nI\u0027d at least like this change to be structured like the executor, and then if we don\u0027t like that, maybe we can change both simultaneously in a followup?",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5a87458_8de4e5cc",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 225,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Keeping the two in sync makes sense to me. We can update in followups if we have a preference change.",
      "parentUuid": "825ec72a_172d4530",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34ecf23e_02e87e0c",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 325,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Does the length of the serialized json object tell us something that None or not None wouldn\u0027t?",
      "range": {
        "startLine": 325,
        "startChar": 49,
        "endLine": 325,
        "endChar": 66
      },
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "532327e2_0b846b39",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 325,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "Yes, the objective of this log line was to track down the problem caused by writing packets that were too large to ZK.  (The issue we just fixed with the sharding changes.)\n\nMaybe we don\u0027t need it now, but this change isn\u0027t changing that, it\u0027s just retaining the existing logging.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9136c6bb_200b3ac2",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 325,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T21:36:25Z",
      "side": 1,
      "message": "Got it. And I agree this isn\u0027t changing the old log behavior but now we check against None above. I thought maybe we were looking for 0 vs not 0 length but we are looking for small vs large instead.",
      "parentUuid": "532327e2_0b846b39",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f176ece_dfbfc194",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 325,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T22:26:08Z",
      "side": 1,
      "message": "Yep.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f4ed5c5_8146c0ae",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 335,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "Seems like this log message provides far more info than the one above.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "203f7d21_2a905ffa",
        "filename": "zuul/merger/server.py",
        "patchSetId": 13
      },
      "lineNbr": 335,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "Different data; different level.  I\u0027m happy to revisit these, but this log message is also just retained in this change, this isn\u0027t a change.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1196f876_701d1ae8",
        "filename": "zuul/zk/merger.py",
        "patchSetId": 13
      },
      "lineNbr": 496,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-08-05T18:54:35Z",
      "side": 1,
      "message": "This method appears to be unused.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca58980_232d7621",
        "filename": "zuul/zk/merger.py",
        "patchSetId": 13
      },
      "lineNbr": 496,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-05T20:42:11Z",
      "side": 1,
      "message": "Agreed.",
      "revId": "648de59cd4d60b830f48b2d02bab1f553cb6111b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}