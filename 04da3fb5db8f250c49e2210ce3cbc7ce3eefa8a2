{
  "comments": [
    {
      "key": {
        "uuid": "d0e24767_2707c5ae",
        "filename": "tests/base.py",
        "patchSetId": 7
      },
      "lineNbr": 2023,
      "author": {
        "id": 24162
      },
      "writtenOn": "2020-12-16T09:35:29Z",
      "side": 1,
      "message": "My impression is that while this may fix problem on one system it may break on another one.\n\nDo you have any references regarding the expected format used by created_at and updated_at?\n\nIf their format is not hardcoded to use specific format we should test with two variations in order to assure it works file.\n\nIf the original format was broken, it would worth including a commend with a link to the spec which documents accepted formats.",
      "range": {
        "startLine": 2023,
        "startChar": 8,
        "endLine": 2023,
        "endChar": 28
      },
      "revId": "04da3fb5db8f250c49e2210ce3cbc7ce3eefa8a2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17cb4059_cd9bdfcc",
        "filename": "tests/base.py",
        "patchSetId": 7
      },
      "lineNbr": 2023,
      "author": {
        "id": 29671
      },
      "writtenOn": "2020-12-16T09:59:22Z",
      "side": 1,
      "message": "Yep I believe Lida tested with the formats given locally, but adding them to CI would be a good idea as well.",
      "parentUuid": "d0e24767_2707c5ae",
      "range": {
        "startLine": 2023,
        "startChar": 8,
        "endLine": 2023,
        "endChar": 28
      },
      "revId": "04da3fb5db8f250c49e2210ce3cbc7ce3eefa8a2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f5fcda2_28ed227f",
        "filename": "tests/base.py",
        "patchSetId": 7
      },
      "lineNbr": 2023,
      "author": {
        "id": 31995
      },
      "writtenOn": "2020-12-16T15:40:08Z",
      "side": 1,
      "message": "They use different formats in different messages. There can be formats listed in patchset1. dateutl.praser.prase can deal with them all. Here is the possible timestamp format in gitlab message: https://docs.gitlab.com/ee/user/project/integrations/webhooks.html#webhooks",
      "parentUuid": "17cb4059_cd9bdfcc",
      "range": {
        "startLine": 2023,
        "startChar": 8,
        "endLine": 2023,
        "endChar": 28
      },
      "revId": "04da3fb5db8f250c49e2210ce3cbc7ce3eefa8a2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b276e294_a5aa9e5b",
        "filename": "tests/base.py",
        "patchSetId": 7
      },
      "lineNbr": 2023,
      "author": {
        "id": 31995
      },
      "writtenOn": "2021-01-14T13:59:16Z",
      "side": 1,
      "message": "We have tested based on images loading this change. It works properly with gitlab webhook timstamp. Zuul scheduler can create event and find jobs for gitlab repo. Recheck comments on the gitlab repo can trigger the scheduler properly.",
      "parentUuid": "1f5fcda2_28ed227f",
      "range": {
        "startLine": 2023,
        "startChar": 8,
        "endLine": 2023,
        "endChar": 28
      },
      "revId": "04da3fb5db8f250c49e2210ce3cbc7ce3eefa8a2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    }
  ]
}