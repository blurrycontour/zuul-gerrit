{
  "comments": [
    {
      "key": {
        "uuid": "3f79a3b5_0ac8444c",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1
      },
      "writtenOn": "2018-11-13T15:23:56Z",
      "side": 1,
      "message": "One of the advantages of JWT is that other systems exist which can generate them.  For example, dex could be used to generate JWT based on oauth/openid connect logins: https://github.com/dexidp/dex\n\nWe should mention that here (and in the docs) so it\u0027s clear that even though Zuul has a utility to generate JWT, that isn\u0027t the only way -- that having another authentication mechanism generate JWT is probably the preferred way.",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_00bd8303",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:24:05Z",
      "side": 1,
      "message": "I want to concur. Zuul should not (ideally) implement it\u0027s own Identity Provider. Zuul should be a service provider that consumes JWT from an IDP.\n\nThe base installation may include a JWT provider internally to zuul, but it should be made as generic as possible to make it possible to consume (easily) JWT from a separate provider.\n\nIt is useful for at least testing/example purposes to have something internal. I also do want to warn/raise a concern that implementation of something internal often is not used solely for example and tends (especially) if it is the default need to grow to support many production cases.\n\nI hope the documentation will encourage/direct to use an external IDP generate JWT as the best production-scale mechanism.",
      "parentUuid": "3f79a3b5_0ac8444c",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_9f02d40c",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 7186
      },
      "writtenOn": "2018-12-18T22:20:56Z",
      "side": 1,
      "message": "I\u0027d like Zuul to maintain control over the claims in the JWT. This is desirable as it allows the format described below with authorized actions, which could be used by a web client and spare multiple calls to an authorization endpoint.\n\nDo services such as dex allow for overriding their JWTs with custom claims? I\u0027ve looked at the doc but didn\u0027t find any similar use cases.",
      "parentUuid": "3f79a3b5_00bd8303",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_9ccd8db8",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T07:31:03Z",
      "side": 1,
      "message": "As far as I know, claims cannot be overridden, it would break the signature.\n\nGenerally your Auth source provides attributes or roles within the claims that can be consumed. In most cases these are very straight forward and the service would need to translate that (barring building your own auth services as well).",
      "parentUuid": "3f79a3b5_9f02d40c",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_e7ee8620",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 7186
      },
      "writtenOn": "2019-02-01T09:38:09Z",
      "side": 1,
      "message": "I\u0027ve added basic access rules management in Zuul\u0027s tenant and project configs in the next revision of the spec, to address the mapping of claims to these rules. Clients can get authorized actions through a web API call.",
      "parentUuid": "9fdfeff1_9ccd8db8",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_d0ee9120",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T17:32:13Z",
      "side": 1,
      "message": "++",
      "parentUuid": "9fdfeff1_e7ee8620",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_805753cd",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:36:46Z",
      "side": 1,
      "message": "Is there an expected \u0027aud\u0027 that will indicate it is for Zuul?\n\nI worry this JWT content might be a bit minimal.",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_3a294e83",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 7186
      },
      "writtenOn": "2018-12-18T22:20:56Z",
      "side": 1,
      "message": "it is implicit from the \"zuul.actions\" claim but \"aud\" can be added. I didn\u0027t want to tie it to a URI for a specific instance, reasoning that Zuul might get a distributed architecture; you\u0027d then want the JWT to be consumable by every node of the distributed architecture.",
      "parentUuid": "3f79a3b5_805753cd",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_9c426d0e",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T07:31:03Z",
      "side": 1,
      "message": "I\u0027d argue the opposite is true. the JWT should not be usable everywhere. Authorization should be as narrow as possible by default. \n\nThis is just my opinion though. I am definitely erring to the side of extra caution. I wouldn\u0027t hold up the spec arguing over this point though.",
      "parentUuid": "3f79a3b5_3a294e83",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_0762aad8",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 7186
      },
      "writtenOn": "2019-02-01T09:38:09Z",
      "side": 1,
      "message": "I\u0027ve added the \"aud\" claim in the next revision of the spec, it makes more sense to use it.",
      "parentUuid": "9fdfeff1_9c426d0e",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_90f489f2",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T17:32:13Z",
      "side": 1,
      "message": "++",
      "parentUuid": "9fdfeff1_0762aad8",
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_7c58e9f8",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T07:31:03Z",
      "side": 1,
      "message": "as a point, this is not really scalable, thus my recommendation to consume external JWT in the grand scheme of things. I know this adds a lot more to the depth of the spec, but if an operator needs to generate a JWT that is either extremely long lived (requires revocation/potentially is at risk for landing in thr wrong hands and giving a lot of power to those wrong hands) or it is almost easier for the operator to just do the task instead of handing over a JWT.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 103,
        "endChar": 52
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_474192a8",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 7186
      },
      "writtenOn": "2019-02-01T09:38:09Z",
      "side": 1,
      "message": "I\u0027d like to keep this as the de facto JWT provider for standalone, test deployments of Zuul. This gives a basic way to play with the admin API without having to worry about user management and authentication in Zuul itself when deployed standalone. It is not as seamless as using an external JWT provider, making it more obvious that it is not advised to use this in production. WDYT?",
      "parentUuid": "9fdfeff1_7c58e9f8",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 103,
        "endChar": 52
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_5095c185",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 2903
      },
      "writtenOn": "2019-02-01T17:32:13Z",
      "side": 1,
      "message": "I am generally inclined to state that a \"Standalone\" zuul should still rely on an external form of auth, even if it is a simplistic built-in JWT generator, but the workflow hopefully would be the same as an external provider. The CLI tool could be an additional hook into the \"built-in\" external provider.\n\nWith all that said, this CLI is a much simpler/straightforward approach (less code) than a full external provider would be.\n\nMaybe the best middleground is the CLI to generate the JWT but it generates a JWT with claims that could in theory come from the generalized external providers and Zuul leans on a simple (default) role mapping that can be overridden (override capability might be future patch) for more in-depth auth needs (and the general role mapping could be similar to your initial claim setup).\n\nFor the record, I am very excited for zuul to have JWT support for an admin api.",
      "parentUuid": "9fdfeff1_474192a8",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 103,
        "endChar": 52
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_c0e78b10",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 135,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:36:46Z",
      "side": 1,
      "message": "As someone who has spent a serious amount of time dealing with using decorators for \"validation\" and/or \"authentication\", I highly recommend that this be avoided. Decorators are great in principal, but there ends up to be many cases where you need to handle ENFORCE outside of \"before\" or \"after\" the method/function. \n\nSuggest implementing a call that can be made directly in the function/method to avoid the long term pattern where callbacks or other complex methods are needed to ensure enforcement is flexible enough based upon the data in the JWT.\n\nDecorators in this case tend to be too simplistic in nature.",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 29
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_5a268ab5",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 135,
      "author": {
        "id": 7186
      },
      "writtenOn": "2018-12-18T22:20:56Z",
      "side": 1,
      "message": "Fair enough, I\u0027ll remove that in the next patch",
      "parentUuid": "3f79a3b5_c0e78b10",
      "range": {
        "startLine": 133,
        "startChar": 0,
        "endLine": 135,
        "endChar": 29
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_60b23708",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 225,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:36:46Z",
      "side": 1,
      "message": "What is the case where the JWT is valid but the user doesn\u0027t have authorization?\n\nKeep in mind HTTP 401 (Unauthorized) is an indicator that the user is unauthenticated. If the user is forbidden a 403 might be more correct.\n\nPlease ensure a WWW-Authenticate (with appropriate data) header is emitted with a 401.",
      "range": {
        "startLine": 225,
        "startChar": 58,
        "endLine": 225,
        "endChar": 61
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_a785de08",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 225,
      "author": {
        "id": 7186
      },
      "writtenOn": "2019-02-01T09:38:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f79a3b5_60b23708",
      "range": {
        "startLine": 225,
        "startChar": 58,
        "endLine": 225,
        "endChar": 61
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_c0954b40",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 291,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:36:46Z",
      "side": 1,
      "message": "Are you planning on limiting the TTL for the JWT by default?\n\nI would go as far and indicate that the default mode should be as narrow as possible, and extended time/scope should be extra (clearly indicated in the tool[s])",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 291,
        "endChar": 61
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_7a3826cb",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 291,
      "author": {
        "id": 7186
      },
      "writtenOn": "2018-12-18T22:20:56Z",
      "side": 1,
      "message": "If the JWT is generated somewhere else, do we have control on this?",
      "parentUuid": "3f79a3b5_c0954b40",
      "range": {
        "startLine": 288,
        "startChar": 0,
        "endLine": 291,
        "endChar": 61
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f79a3b5_2072ff4c",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 295,
      "author": {
        "id": 2903
      },
      "writtenOn": "2018-11-13T16:36:46Z",
      "side": 1,
      "message": "I would expand on the concerns with nodepool and autohold interactions (at least in documentation) as it stands it would be hard for an operator to identify the concerns.",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 295,
        "endChar": 57
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fdfeff1_27e00e26",
        "filename": "doc/source/developer/specs/tenant-scoped-admin-web-API.rst",
        "patchSetId": 4
      },
      "lineNbr": 295,
      "author": {
        "id": 7186
      },
      "writtenOn": "2019-02-01T09:38:09Z",
      "side": 1,
      "message": "Adding an item to the documentation check list",
      "parentUuid": "3f79a3b5_2072ff4c",
      "range": {
        "startLine": 293,
        "startChar": 0,
        "endLine": 295,
        "endChar": 57
      },
      "revId": "bb7b9a28ac02fa779c52517803d71ab30e8da343",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}