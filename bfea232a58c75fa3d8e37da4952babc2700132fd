{
  "comments": [
    {
      "key": {
        "uuid": "4fd6a76d_bc6859f3",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-02T19:11:05Z",
      "side": 1,
      "message": "This block is not necessary if the user supplied callback returned False for some reason: https://github.com/python-zk/kazoo/blob/master/kazoo/recipe/watchers.py#L165-L168\n\nThis would also remove a watcher that was created on a non existing path. If you want the callback to be able to decide if it should return False and stop watching then you should defer this to the callback.\n\nHowever, if we want to ensure no watching happens on non existing nodes (seems like a reasonable thing specifically for zuul in this case) then we should probably guard against this more robustly:\n\n  if stat is None and not self._stopped:\n      #cleanup",
      "revId": "bfea232a58c75fa3d8e37da4952babc2700132fd",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79a26240_85d0dff9",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-02T20:47:38Z",
      "side": 1,
      "message": "I don\u0027t think we need to guard against that?  It\u0027s just a couple of duplicate lines (it\u0027s okay to remove the listener twice; it\u0027s just a set discard).\n\nTo be clear, the ZooKeeper watch is removed regardless of what we do here because we haven\u0027t called a method to add it (removing the \u0027retry\u0027 is what does this).  The remove_listener call just stops the watcher from being re-added after a disconnect.\n\nThis class never creates a watcher on a non-existent path, because the get call doesn\u0027t succeed so the watcher isn\u0027t set.  However, we are registered as a client-side connection listener, so on a disconnect, we\u0027ll be called and will attempt again.\n\nI think the current code is correct because in all cases it leaves us without a watch and without a connection listener.",
      "revId": "bfea232a58c75fa3d8e37da4952babc2700132fd",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7970205_70ded46e",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-02T21:01:26Z",
      "side": 1,
      "message": "I had missed that the exists call was necessary to set a watch on a non existent path. Though now I remember you saying that this behavior is why you think they had the code there in the first place.\n\nGiven that I think this code is correct as long as we don\u0027t want to defer to DELETE event callbacks to decide if the path should continue to be watched. Asserting this is a watcher for a path that exists until the path does not exist seems like a fine tool since that is what zuul needs.\n\nLast thought is we might want to vendor the entire parent class in this definition to avoid issues with private methods changing. Otherwise I think this is good.",
      "parentUuid": "79a26240_85d0dff9",
      "revId": "bfea232a58c75fa3d8e37da4952babc2700132fd",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}