---
- name: Store dummy Pypi test Info
  set_fact:
    dummy_pypi_username: adummyaccount
    dummy_pypi_password: adummypassword
    dummy_pypi_projectname: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"

- name: Check if zuul-config exists
  stat:
    path: "{{ workspace }}/zuul-config"
  register: zuul_config_dir

- name: Clone zuul-config
  git:
    repo: http://localhost:8080/zuul-config
    dest: "{{ workspace }}/zuul-config"
  when: not zuul_config_dir.stat.exists

- name: Reinit zuul-config
  when: zuul_config_dir.stat.exists
  shell:
    chdir: "{{ workspace }}/zuul-config/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git reset --hard $(git log --pretty=oneline | grep "Update Zuul base job" | awk {'print $1'} | head -1)
      git remote add gerritadmin http://admin:secret@localhost:8080/a/zuul-config
      git push -f gerritadmin

- name: Copy config-project in zuul-config
  copy:
    src: ../../doc/source/examples/test1-job-secrets/config-project/
    dest: "{{ workspace }}/zuul-config/"

- name: Copy tools encrypt_secret.py in workspace
  copy:
    src: ../../tools/encrypt_secret.py
    dest: "{{ workspace }}/"
    mode: '0755'

- name: Generate secret
  shell:
    chdir: "{{ workspace }}/zuul-config/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      echo "config-secret" > ../config-project-password.txt
      ../encrypt_secret.py --tenant example-tenant --infile ../config-project-password.txt --outfile zuul.d/my-secret.yaml http://localhost:9000/ zuul-config
      sed -i -e "s/<name>/my-publication-secret/; s/<fieldname>/password/; s/^\( *\)password:/\1hostname: publication-host.example.com\n\1password:/" zuul.d/my-secret.yaml

- name: Commit and upload zuul-config
  shell:
    chdir: "{{ workspace }}/zuul-config/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git config user.email 'user@example.com'
      git config user.name 'Example User'
      git config gitreview.username 'user'
      git add -A .
      git commit -m "Provide my publication job"
      git review

- name: Check Zuul check status zuul-config is merged
  include_role:
    name: change-merged
  vars:
    title: "Publication job zuul-config"
    projectname: zuul-config

- name: Init Test1
  include_role:
    name: init-repository
  vars:
    projectname: test1

- name: Copy zuul.yaml in test1
  copy:
    src: ../../doc/source/examples/test1-job-secrets/config-project-test1/zuul.yaml
    dest: "{{ workspace }}/test1/.zuul.yaml"

- name: Commit and upload hello.py in test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git add .zuul.yaml
      git commit -m "Configure project pipelines"
      git review

- name: Check Zuul check status test1 is ok
  include_role:
    name: check-pipeline
  vars:
    title: "Configure pipelines test1"
    projectname: test1
    check_timeout: 90

- name: reinit test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git reset --hard $(git log --pretty=oneline | grep "Initial commit" | awk {'print $1'} | head -1)
      git remote add gerritadmin http://admin:secret@localhost:8080/a/test1
      git push -f gerritadmin

- name: Copy tox.ini in test1
  copy:
    src: ../../doc/source/examples/test1-gate-pipeline/tox.ini
    dest: "{{ workspace }}/test1/tox.ini"
- name: Copy setup.py in test1
  copy:
    src: ../../doc/source/examples/test1-job-secrets/untrusted-project/setup.py
    dest: "{{ workspace }}/test1/"
- name: Copy playbooks in test1
  copy:
    src: ../../doc/source/examples/test1-job-secrets/untrusted-project/playbooks/
    dest: "{{ workspace }}/test1/playbooks/"
- name: Copy append_zuul.txt in workspace
  copy:
    src: ../../doc/source/examples/test1-job-secrets/untrusted-project/append_zuul.txt
    dest: "{{ workspace }}/"

- name: Generate secret
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      echo "{{ dummy_pypi_password }}" > ../test1-project-password.txt
      ../encrypt_secret.py --tenant example-tenant --infile ../test1-project-password.txt --outfile .zuul.yaml http://localhost:9000/ test1
      sed -i -e "s/<name>/my-pypi-secret/; s/<fieldname>/password/; s/^\( *\)password:/\1username: {{ dummy_pypi_username }}\n\1password:/" .zuul.yaml
      cat ../append_zuul.txt >> .zuul.yaml
      sed -i -e "s/name='[^']*'/name='{{ dummy_pypi_projectname }}'/" setup.py

- name: Commit and upload in test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git add -A
      git commit -m "Provide my upload-pypi job"
      git review

- name: Check Zuul check status test1 is ok
  include_role:
    name: change-merged
  vars:
    title: "Add upload job test1"
    projectname: test1
    check_timeout: 180
    gate_timeout: 180

- name: Copy append_config_pipeline.txt in workspace
  copy:
    src: ../../doc/source/examples/test1-job-secrets/untrusted-project/append_config_pipeline.txt
    dest: "{{ workspace }}/"

- name: Add release pipeline to zuul-config pipelines
  shell:
    chdir: "{{ workspace }}/zuul-config/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      cat ../append_config_pipeline.txt >> zuul.d/pipelines.yaml

- name: Commit and upload zuul-config
  shell:
    chdir: "{{ workspace }}/zuul-config/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git add -A .
      git commit -m "Add release pipeline"
      git review

- name: Check Zuul check status zuul-config is ok
  include_role:
    name: change-merged
  vars:
    title: "Release pipeline zuul-config"
    projectname: zuul-config
    check_timeout: 180
    gate_timeout: 180

- name: "Wait for release pipeline to come up"
  uri:
    url: "http://localhost:9000/api/tenant/example-tenant/status"
    method: GET
    return_content: true
  register: result
  until: result.status == 200 and (result.content|from_json).pipelines|length >= 3
  delay: 1
  retries: 30

- name: Push tag test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git tag -f -a -m 0.0.1 0.0.1
      git push -f gerritadmin :refs/tags/0.0.1
      git push gerritadmin 0.0.1

- name: Wait 60 seconds before polling test.pypi.org
  pause:
    seconds: 60

- name: "Get project Info on test.pypi.org"
  uri:
    url: "https://test.pypi.org/pypi/{{ dummy_pypi_projectname }}/json"
    method: GET
    status_code: 200
    return_content: true
  register: result
  until: result.status == 200
  delay: 15
  retries: 4
  ignore_errors: true

- debug:
    msg: "print project name from pypi: {{ (result.content|from_json).info.name }}"
  when: result.status == 200
