- name: Clone test1
  git:
    repo: http://localhost:8080/test1
    dest: "{{ workspace }}/test1"
- name: Setup repository test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git config user.email 'user@example.com'
      git config user.name 'Example User'
      git config gitreview.username 'user'
      git remote add gerrit http://admin:secret@localhost:8080/test1
      git review -s
- name: Copy hoz-4-demo-repo.tgz in test1
  copy:
    src: ../../doc/source/examples/test1-gate-pipeline/hoz-4-demo-repo.tgz
    dest: "{{ workspace }}/test1/"
- name: Copy tox.ini_ in test1
  copy:
    src: ../../doc/source/examples/test1-gate-pipeline/tox.ini_
    dest: "{{ workspace }}/test1/"
- name: Copy trigger.sh in test1
  copy:
    src: ../../doc/source/examples/test1-gate-pipeline/trigger.sh
    dest: "{{ workspace }}/test1/"
- name: Copy .zuul.yaml in test1
  copy:
    src: ../../doc/source/examples/test1-gate-pipeline/zuul.yaml
    dest: "{{ workspace }}/test1/.zuul.yaml"
- name: Commit and upload resources in test1
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      tar xzf hoz-4-demo-repo.tgz -C .
      rm -f hoz-4-demo-repo.tgz
      mv -f tox.ini_ tox.ini
      chmod +x trigger.sh
      git add -A .
      git commit -m"Init demo-repo pipelines"
      git review

- name: Query open changes
  uri:
    url: http://localhost:8080/a/changes/?q=status:open+project:test1&o=CURRENT_REVISION
    method: GET
    user: admin
    password: secret
    return_content: true
  register: changes
- set_fact:
    changeinfo: "{{ {'id': (changes.content[5:]|from_json)[0].id, 'current_revision': (changes.content[5:]|from_json)[0].current_revision} }}"
- name: Wait for Zuul to report check status
  uri:
    url: "http://localhost:8080/a/changes/{{ changeinfo.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 2
  delay: 10
  retries: 180
- debug:
    msg: "number of retries: {{ result.attempts }}"
- name: "Check Zuul check status"
  assert:
    that:
      - (result.content[5:]|from_json).messages[1].message is search("Patch Set 1{{':'}} Verified\+1")
- name: Approve changes
  uri:
    url: "http://localhost:8080/a/changes/{{ changeinfo.id }}/revisions/{{ changeinfo.current_revision }}/review"
    method: POST
    user: admin
    password: secret
    status_code: 200
    body_format: json
    body:
      labels:
        Code-Review: "+2"
        Workflow: "+1"
- name: Wait for Zuul to report gate job has started
  uri:
    url: "http://localhost:8080/a/changes/{{ changeinfo.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 4
  delay: 1
  retries: 60
- name: "Check Zuul has started gate job"
  assert:
    that:
      - (result.content[5:]|from_json).messages[3].message is search("Starting gate jobs")
- name: Wait for Zuul to report gate job has finished
  uri:
    url: "http://localhost:8080/a/changes/{{ changeinfo.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 5
  delay: 10
  retries: 180
- debug:
    msg: "number of retries: {{ result.attempts }}"
- name: "Check Zuul has finished gate job"
  assert:
    that:
      - (result.content[5:]|from_json).messages[4].message is search("Patch Set 1{{':'}} Verified\+2")
- name: Wait for Zuul to report change merged
  uri:
    url: "http://localhost:8080/a/changes/{{ changeinfo.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 6
  delay: 10
  retries: 180
- debug:
    msg: "number of retries: {{ result.attempts }}"
- name: "Check Zuul has merged the change"
  assert:
    that:
      - (result.content[5:]|from_json).messages[5].message is search("Change has been successfully merged by Zuul")

- name: Extract hoz-5-patches.tgz into test1
  unarchive:
    src: ../../doc/source/examples/test1-gate-pipeline/hoz-5-patches.tgz
    dest: "{{ workspace }}/"
- name: Reset local copy to the base commit
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git reset --hard $(git log --pretty=oneline | grep "Init test1 pipelines" | awk {'print $1'} | head -1)
      git am ../A.patch && git review -i
- name: Query changeA
  uri:
    url: http://localhost:8080/a/changes/?q=status:open+project:test1&o=CURRENT_REVISION&n=1
    method: GET
    user: admin
    password: secret
    return_content: true
  register: changea
- set_fact:
    changea: "{{ {'id': (changea.content[5:]|from_json)[0].id, 'current_revision': (changea.content[5:]|from_json)[0].current_revision} }}"
- name: Reset local copy to the base commit
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git reset --hard HEAD^1
      git am ../B.patch && git review -i
- name: Query changeB
  uri:
    url: http://localhost:8080/a/changes/?q=status:open+project:test1&o=CURRENT_REVISION&n=1
    method: GET
    user: admin
    password: secret
    return_content: true
  register: changeb
- set_fact:
    changeb: "{{ {'id': (changeb.content[5:]|from_json)[0].id, 'current_revision': (changeb.content[5:]|from_json)[0].current_revision} }}"
- name: Reset local copy to the base commit
  shell:
    chdir: "{{ workspace }}/test1/"
    executable: /bin/bash
    cmd: |
      {{ ssh_agent.stdout }}
      git reset --hard HEAD^1
      git am ../C.patch && git review -i
- name: Query changeC
  uri:
    url: http://localhost:8080/a/changes/?q=status:open+project:test1&o=CURRENT_REVISION&n=1
    method: GET
    user: admin
    password: secret
    return_content: true
  register: changec
- set_fact:
    changec: "{{ {'id': (changec.content[5:]|from_json)[0].id, 'current_revision': (changec.content[5:]|from_json)[0].current_revision} }}"
- name: Approve changes
  uri:
    url: "http://localhost:8080/a/changes/{{ item.id }}/revisions/{{ item.current_revision }}/review"
    method: POST
    user: admin
    password: secret
    status_code: 200
    body_format: json
    body:
      labels:
        Code-Review: "+2"
        Workflow: "+1"
  loop:
    - "{{ changea }}"
    - "{{ changeb }}"
    - "{{ changec }}"
- name: Wait for Zuul to report changeA merged
  uri:
    url: "http://localhost:8080/a/changes/{{ changea.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 6
  delay: 10
  retries: 180
- debug:
    msg: "number of retries: {{ result.attempts }}"
- name: "Check Zuul has merged the changeA"
  assert:
    that:
      - (result.content[5:]|from_json).messages[5].message is search("Change has been successfully merged by Zuul")

- name: Wait for Zuul to report changeC merged
  uri:
    url: "http://localhost:8080/a/changes/{{ changec.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 6
  delay: 10
  retries: 180
- debug:
    msg: "number of retries: {{ result.attempts }}"
- name: "Check Zuul has merged the changeC"
  assert:
    that:
      - (result.content[5:]|from_json).messages[5].message is search("Change has been successfully merged by Zuul")

- name: Wait for Zuul to report changeB is not merged
  uri:
    url: "http://localhost:8080/a/changes/{{ changeb.id }}//detail"
    method: GET
    user: admin
    password: secret
    return_content: true
  register: result
  until: (result.content[5:]|from_json).messages|length >= 5
  delay: 1
  retries: 10
- name: "Check Zuul has merged the change"
  assert:
    that:
      - (result.content[5:]|from_json).messages[4].message is search("Patch Set 1{{':'}} Verified-2")
