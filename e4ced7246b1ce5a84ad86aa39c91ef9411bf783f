{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "175913da_223e93dd",
        "filename": "zuul/executor/server.py",
        "patchSetId": 4
      },
      "lineNbr": 2580,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-03-20T19:29:15Z",
      "side": 1,
      "message": "This is where I think we might get the info without refs (see comment below).",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39b369d9_c42ccf4a",
        "filename": "zuul/executor/server.py",
        "patchSetId": 4
      },
      "lineNbr": 2580,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-20T20:32:56Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "175913da_223e93dd",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de974a33_3d7373ac",
        "filename": "zuul/executor/server.py",
        "patchSetId": 4
      },
      "lineNbr": 2626,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-03-20T19:29:15Z",
      "side": 1,
      "message": "If we are running a mixed version zuul system it is possible for refs to not be in zuul_vars? In that case we either need a model api bump or we can simply ignore setting the attribute as unsafe here?",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c1573e1_1211e919",
        "filename": "zuul/executor/server.py",
        "patchSetId": 4
      },
      "lineNbr": 2626,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-20T20:32:56Z",
      "side": 1,
      "message": "Yeah, let\u0027s be defensive here.",
      "parentUuid": "de974a33_3d7373ac",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7cbef1b_e995ed0c",
        "filename": "zuul/executor/server.py",
        "patchSetId": 4
      },
      "lineNbr": 2626,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-03-20T21:18:19Z",
      "side": 1,
      "message": "I think `get()` may return None here which is not iterable. And if it was iterable we would still fail on the `in ref` check below. Do we need to instead get then check if refs is valid then iterate over them?",
      "parentUuid": "2c1573e1_1211e919",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a089aa34_62314f6b",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 6186,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-03-20T19:29:15Z",
      "side": 1,
      "message": "I think newrev can be all zeros when you delete a branch or tag. That information is probably relevant to those events and we should set newrev to all the zeros in that case? I\u0027m not sure if it is relevant for oldrev though.\n\nThis does seem to match the old behavior in common.py though so feel free to ignore.",
      "range": {
        "startLine": 6186,
        "startChar": 27,
        "endLine": 6186,
        "endChar": 50
      },
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2e68e81_09ff9f60",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 6186,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-20T20:32:56Z",
      "side": 1,
      "message": "I think we should keep this behavior; as you say it is the current behavior, and it is documented as such.  The fact that we get 40 zeroes from gerrit is one way to represent a tag deletion, but it\u0027s not the only way -- omitting a field is another.  Zuul does that, so someone wanting to test for tag creation or deletion can test for undefined for the old and new revs.",
      "parentUuid": "a089aa34_62314f6b",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5af24dd1_09c0e8b9",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 6404,
      "author": {
        "id": 27582
      },
      "writtenOn": "2024-03-15T10:00:10Z",
      "side": 1,
      "message": "Are those changes in the `toDict()` methods interfering in any way with the other use-case in `_toChangeDict()` which is used for constructing `Buildset.dependent_changes`?",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b7e9c24_c1b8bf9d",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 6404,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-15T13:10:58Z",
      "side": 1,
      "message": "The only use I have found of dependent_changes is to pass to the executor client where it\u0027s used to construct the zuul.items list (which is what these changes are for) and also zuul.projects (but the values are not used directly for that).",
      "parentUuid": "5af24dd1_09c0e8b9",
      "revId": "e4ced7246b1ce5a84ad86aa39c91ef9411bf783f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}