{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "04c2f6db_09ff88c7",
        "filename": "web/src/App.jsx",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 27952
      },
      "writtenOn": "2022-10-21T07:51:34Z",
      "side": 1,
      "message": "I think that this part is the \"main\" part of this change, right? Where we actually change the workflow.\n\nWhen I saw this the first time, I was wondering why we didn\u0027t handle this case via a route. Then I saw that you removed the route in https://review.opendev.org/c/zuul/zuul/+/859466/7/web/src/routes.js.\n\nNow I\u0027m a little confused: Couldn\u0027t we just do the \"lingering\" within the AuthCallbackPage itself? This part here feels a little hacky.",
      "revId": "d7c16e78ee4e8f577dce1d7e613696c5e09d9258",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f666d332_ce32c063",
        "filename": "web/src/App.jsx",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 27952
      },
      "writtenOn": "2022-10-21T08:05:57Z",
      "side": 1,
      "message": "Having a second look I think I understand a little more :D\nThere is a second part, where we store the redirect property in redux, which allows us to wait for it within the AuthCallbackPage.\n\nBut then I\u0027m confused why we even need this part here.",
      "parentUuid": "04c2f6db_09ff88c7",
      "revId": "d7c16e78ee4e8f577dce1d7e613696c5e09d9258",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e194d22_7e89eb44",
        "filename": "web/src/App.jsx",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-10-21T13:45:57Z",
      "side": 1,
      "message": "It\u0027s mostly about the issue in the first paragraph of the commit message.  If we try to handle this with the router, there\u0027s too much other stuff going on that\u0027s trying to update our data.  We need to leave the window.location alone until we\u0027ve finished the login process, but trying to prevent the rest of the application from doing that is too complicated (perhaps impossible).\n\nPlus, I think this actually matches the way the auth system works better.",
      "parentUuid": "04c2f6db_09ff88c7",
      "revId": "d7c16e78ee4e8f577dce1d7e613696c5e09d9258",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bedeba21_d4e4d9b9",
        "filename": "web/src/App.jsx",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-10-22T16:50:46Z",
      "side": 1,
      "message": "This change is also anticipating the upcoming change to possibly require authn for read-only access.  In that change, the flow becomes:\n\n* If the URL is auth_callback, just show that page and stop\n* If we require read-only access, redirect to idp\n* Otherwise, use the router to show normal content\n\nBeing able to put the redirect before normal content handling means we can ensure that we avoid rendering anything if auth is required, which I think is a straightforward and safe way of handling it.  And we must not allow control to reach the idp redirect if we\u0027re at auth_callback (otherwise we get an infinite redirect loop).\n\nSo while I can\u0027t say at this point exactly what timing issue led me to decide that this change was the one where we should move the auth_callback handling outside of the router, I think we should now consider it in the context of the upcoming change where there is a much better reason for doing so.",
      "parentUuid": "04c2f6db_09ff88c7",
      "revId": "d7c16e78ee4e8f577dce1d7e613696c5e09d9258",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}