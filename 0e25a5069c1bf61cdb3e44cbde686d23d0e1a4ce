{
  "comments": [
    {
      "key": {
        "uuid": "63f9ab38_6eab0ac5",
        "filename": "doc/source/discussion/components.rst",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "This is likely to be accessed by the executor too.  People may be splitting the config file by service, so this could be misleading.  We could document that it\u0027s required for executor, or perhaps we should add a new section [keystore] ?",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c27e7270_1f35b5d5",
        "filename": "doc/source/discussion/components.rst",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-04-13T05:39:08Z",
      "side": 1,
      "message": "Yes, if you think the executor might also need access it makes sense to move this to a [keystore] section.",
      "parentUuid": "63f9ab38_6eab0ac5",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "766bc024_aa0174a7",
        "filename": "releasenotes/notes/zookeeper-key-storage-a1ad32aa8d63b05f.yaml",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "It seems like we shouldn\u0027t need to do that in the long run and this can be temporary.  If we provide a tool to extract keys from zk, that will give people control of backups (so they can decide to only do so in a more secure environment).",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a52c832d_4ad58b0c",
        "filename": "releasenotes/notes/zookeeper-key-storage-a1ad32aa8d63b05f.yaml",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-04-13T05:39:08Z",
      "side": 1,
      "message": "Ack. I added this to the Zuul v5 punch list https://etherpad.opendev.org/p/zuulv5",
      "parentUuid": "766bc024_aa0174a7",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d252b01_761c2af6",
        "filename": "tests/unit/test_keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-13T17:30:45Z",
      "side": 1,
      "message": "Let\u0027s add an upgrade test to address the concern about accidentally involving passwords with the backup store.\n\n1) Create key in backup store.\n2) Load it via primary store.  (should cause it to be written to primary store and backup)\n3) Load it via backup store.  (this should work, but if we accidentally encrypted it, it would break)\n4) Load it via primary store.  (should not touch backup store; just to exercise the code path where it already exists)",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85e4969e_299a5499",
        "filename": "tests/unit/test_keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 121,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-04-14T06:22:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d252b01_761c2af6",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "190622b0_2396b671",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 282,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "This should probably be info level.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60562779_5d5edf0e",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 282,
      "author": {
        "id": 16068
      },
      "writtenOn": "2021-04-21T10:52:38Z",
      "side": 1,
      "message": "For reference, this is done in the followup.",
      "parentUuid": "190622b0_2396b671",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e9784ba_6eb499a6",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-13T17:30:45Z",
      "side": 1,
      "message": "Are we certain that the upgrade path from no password protection to using a password works?\n\n1) Current state: non-password-protected key\n2) Load that key from the backup file storage (should work) via paramiko.RSAKey.from_private_key_file\n3) Then here we try to load a key from that using a password:\n   Does that work -- does it say \"this is already a valid key, I don\u0027t need to use this password\"\n4) Then we store the key in ZK with the password, that\u0027s fine.\n5) Then we store the key in the file keystore without the password.\n\nAfter walking through that, it looks like we don\u0027t have a path to write a key to the backup keystore with a password, which I think means we don\u0027t need lines 285 and 286, and can just do \"key, _ \u003d self.backup.getProjectSSH...\".\n\nIt looks like the secret keys behave that way already.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7c92e2e_f8488d55",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-04-14T06:22:53Z",
      "side": 1,
      "message": "paramiko.RSAKey.from_private_key() will ignore the password in case the given key is not encrypted, but I will remove it since it shouldn\u0027t be necessary.\n\nHowever, I still need to create the RSAKey object in order to encrypt it. self.backup.getProjectSSHKeys() will only return the PEM/base64 encoded string representation.",
      "parentUuid": "3e9784ba_6eb499a6",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4fa9b46_2d23b1a0",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-14T13:34:21Z",
      "side": 1,
      "message": "Makes sense.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e23e81a_3d5e929c",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 289,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "Same.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16114cea_c368eafb",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 289,
      "author": {
        "id": 16068
      },
      "writtenOn": "2021-04-21T10:52:38Z",
      "side": 1,
      "message": "Done in followup",
      "parentUuid": "8e23e81a_3d5e929c",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55897580_eac3c802",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "Info.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "194fb554_762b5760",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 335,
      "author": {
        "id": 16068
      },
      "writtenOn": "2021-04-21T10:52:38Z",
      "side": 1,
      "message": "Done in followup",
      "parentUuid": "55897580_eac3c802",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8631bb99_cc644341",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 340,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T20:46:47Z",
      "side": 1,
      "message": "Info.",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d648cfc3_dcccf901",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 9
      },
      "lineNbr": 340,
      "author": {
        "id": 16068
      },
      "writtenOn": "2021-04-21T10:52:38Z",
      "side": 1,
      "message": "Done in followup",
      "parentUuid": "8631bb99_cc644341",
      "revId": "0e25a5069c1bf61cdb3e44cbde686d23d0e1a4ce",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}