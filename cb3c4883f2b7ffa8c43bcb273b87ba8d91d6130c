{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3cc7ec2b_b63a8342",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 2393,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-01-10T23:33:20Z",
      "side": 1,
      "message": "Doesn\u0027t a job always have a name?",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "964b6273_1b69df04",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 2393,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-01-10T23:52:00Z",
      "side": 1,
      "message": "Not during very early deserialization/construction.  When this gets used in error logs in those cases, it blows up.",
      "parentUuid": "3cc7ec2b_b63a8342",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40bc3199_b1ed5fa9",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 3675,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-01-10T23:33:20Z",
      "side": 1,
      "message": "Can we simplify this by setting the model_version to COMPOINENT_REGISTRY.model_api? Then we can do checks of \u003c 22 and \u003e\u003d 22?\n\nIt isn\u0027t clear to me why we need to set initial_model_api at all as it appears unused except for here.\n\nIt looks like we\u0027ll (de)serialize objects created by this code before the model api update to have values of 0. But when we interact with old data we\u0027ll set a default of the current model api. For consistency I think we can just use the model api version everywhere?",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "692e6b9a_d1d9e156",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 3675,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-01-10T23:52:00Z",
      "side": 1,
      "message": "I agree that the initial model api line is unused.  I can clean that up.  It should read:\n\nif COMPONENT_REGISTRY.model_api \u003e\u003d 22:\n    self.model_version \u003d 22\n\nI wasn\u0027t necessarily thinking that the model version of objects would always be tied to the model api version.  And we would only bump this when we actually changed something, which is why I hardcoded the value.  I agree that setting it to the model_api would also be fine.  I don\u0027t think it makes a significant difference, and I plan on deleting all of this in a few commits anyway.  We only need this temporarily.",
      "parentUuid": "40bc3199_b1ed5fa9",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5309e49f_627564ec",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 3675,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-01-11T00:04:54Z",
      "side": 1,
      "message": "Ok that makes sense to me. I guess the only thing to cleanup here is the initial_model_api variable. That is probably fine in a followup if you like.",
      "parentUuid": "692e6b9a_d1d9e156",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07105c63_50b56baf",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 3751,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-01-10T23:33:20Z",
      "side": 1,
      "message": "For this function and the one above it I guess the assumption is that we\u0027ll only ever operate on \"converted\" values? Should we instead try to get the index() of job_id in the appropriate list and if not present then return job_id as is instead? This way you can provide either type and it should work?\n\nI\u0027m mostly thinking that it is hard to reason about whether we\u0027ll always provide the correct value type in generic terms since these functions could be called from values that don\u0027t originate in the jobgraph?",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ff253f7_1b4b8f35",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 3751,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-01-10T23:52:00Z",
      "side": 1,
      "message": "These relate to the \"getJobIds\" method above, which is the only way to get a \"job id\" from the graph now, so it\u0027s a closed system (we know all values originate in the job graph).",
      "parentUuid": "07105c63_50b56baf",
      "revId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Code reviewed by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Verified in gate by CI"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Workflow",
        "description": {
          "value": "Approved for gate by core reviewer"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Workflow\u003dMAX AND -label:Workflow\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Workflow=MAX AND -label:Workflow=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Workflow=MAX"],"failingAtoms":["label:Workflow=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cb3c4883f2b7ffa8c43bcb273b87ba8d91d6130c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}