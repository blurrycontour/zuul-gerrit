{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6f5a91de_84be711d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "I wasn\u0027t aware of the original change but this new format seems like it would be less resilient and harder to debug because you would always need all chunks to properly decompress the data rather than being able to decompress partial amounts of data (which may be all that is available).",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6656cc5_53f961fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:54:15Z",
      "side": 1,
      "message": "You said \"less resilient\" and \"harder to debug\".  Let\u0027s take each one:\n\nLess resilient: in both the old and new system, if we are unable to decompress the entire object, we give up.  There is no partial recovery based on partial data.\n\nHarder to debug: I don\u0027t think we\u0027ve ever tried to debug by examining a single shard.  If we ever found ourselves in the position of doing that, we could likely still do so; the zlib structure is sufficiently flexible for that.  But it seems extremely unlikely that we ever will.\n\nMeanwhile, the new format uses fewer znodes, so comes with a significant performance gain.",
      "parentUuid": "6f5a91de_84be711d",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab670588_236de3b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "The reduced znode count is due to not needing to pad for the header content and also the reduction in total amount of header data required?",
      "parentUuid": "a6656cc5_53f961fc",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384e98e9_7d3925f7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T19:20:58Z",
      "side": 1,
      "message": "It\u0027s mostly because we would chunk to 1mb of uncompressed data, then compress it, leaving potentially a lot of unused space available in the znode.",
      "parentUuid": "a6656cc5_53f961fc",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24538be7_3ae40278",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:48:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "384e98e9_7d3925f7",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e790381b_87aeb77d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:01:46Z",
      "side": 1,
      "message": "Here are my notes on why I believe checking for 0x789c as the header is correct:\n\nhttps://datatracker.ietf.org/doc/html/rfc1950#page-4\n\nCMF\u003d78\nCM\u003d8 (only choice)\nCINFO\u003d7 (default compression level)\nCMF will always be 78\n\nFLG\u003d9c 0b10011100\nFCHECK\u003d1c 0b11100\nFDICT\u003d0 0b0  this should never be 1 (we never have a dict)\nFLEVEL\u003d0b10  default algo, should always be 2\nFLG will always be 9c\n\nThe only possible variable in there is FDICT, and it is never set in the zlib.compress method and zlib.decompress returns an error if it finds that it needs a dict, which is further indication that it\u0027s never set.",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d93907e_431df566",
        "filename": "tests/unit/test_zk.py",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "Isn\u0027t compressing the entire string upfront and writing that the new format not the old format which we are testing here? I would\u0027ve expected this setup phase of the test to look more like _test_write_old_read_new.",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0874753c_93fd0efd",
        "filename": "tests/unit/test_zk.py",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:54:15Z",
      "side": 1,
      "message": "This tests writing the old format using our actual writer class, not a test fake.  The model_version below triggers the old format code.\n\nSince we manually read it using the old method, that verifies that we did, indeed, write old-format data.",
      "parentUuid": "6d93907e_431df566",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "541d3b20_28eeed3c",
        "filename": "tests/unit/test_zk.py",
        "patchSetId": 1
      },
      "lineNbr": 294,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "Oh I see this is due to the writer class taking compressed data and potentially uncompressing it then recompressing it into the old format. Then we read the data back to confirm that is what actually happened.",
      "parentUuid": "0874753c_93fd0efd",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37de3d4b_e0c93692",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "Since this is a new iteration over self.shards won\u0027t this iterate back over shards[0] and shards[1] which we\u0027ve already written to the buffer above? I don\u0027t see where we are consuming those from the iterable unless enumerate is side effecting the shards list content?",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebfe4615_58284db4",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:54:15Z",
      "side": 1,
      "message": "The next line skips the first two.",
      "parentUuid": "37de3d4b_e0c93692",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3d954dc_e200867c",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "Aha for some reason in my head that was there to avoid iterating when there was only one shard. Clearly the check is \u003c 2 though not \u003c 1.",
      "parentUuid": "ebfe4615_58284db4",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce76e085_51390b65",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "We are relying on BufferedShardWriter to decompress things if necessary before recompressing below. I think that means this method is no longer a truly RawShardIO write since we could compress data that we didn\u0027t intend to be compressed (if using the old model api version and trying to write uncompressed raw data).\n\nMaybe the concern for this is minimal since the amount of time an installation straddles the two model api versions in play should be short. But I wanted to call out the mismatch in behaviors.",
      "range": {
        "startLine": 141,
        "startChar": 20,
        "endLine": 141,
        "endChar": 24
      },
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bcaba42_89db5c4b",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:54:15Z",
      "side": 1,
      "message": "The old system *always* compressed sharded data, so if we\u0027re on an old model api version, we know we should always compress.\n\nThe only thing that could write uncompressed sharded data is in the zuul-launcher, and that\u0027s not in production use yet, se we can disregard it here.",
      "parentUuid": "ce76e085_51390b65",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3742d996_10f97e78",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "2bcaba42_89db5c4b",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28b2e7e2_cadee16c",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "We are writing not reading. Should this var be called write_len?",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc3f59a4_1fdd2ec3",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T18:54:15Z",
      "side": 1,
      "message": "We\u0027re in the middle of a stream, we read from one side and write to the other.  This is the number of bytes we have read from our input, which may be different than the number of bytes written to our output.",
      "parentUuid": "28b2e7e2_cadee16c",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22abe52b_5f119302",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "I guess it is confusing to me that a write() method would return the number of bytes provided to it rather than returning the number of bytes written. But this is to keep the calling code from needing to understand details around compression under the hood? I guess that is reasonable for simplifying the abstraction here.",
      "parentUuid": "cc3f59a4_1fdd2ec3",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2545e581_85209f69",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-31T19:20:58Z",
      "side": 1,
      "message": "Yeah, that\u0027s the buffered writer api.  You tell it what to write; the underlying io handler tells you how much it actually wrote; the higher level keeps writing until it\u0027s all written.\n\nLike a tcp send.",
      "parentUuid": "cc3f59a4_1fdd2ec3",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fd62aa2_02642b86",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:48:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2545e581_85209f69",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a124a1_81361293",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 27582
      },
      "writtenOn": "2024-08-01T07:00:04Z",
      "side": 1,
      "message": "I don\u0027t think this is necessary as we already reserve 47KiB for the key (see comment on the `NODE_BYTE_SIZE_LIMIT` above). With large data the compression will also make up for the zlib header/trailer extra bytes.",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "058f90aa_c45e94ad",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 27582
      },
      "writtenOn": "2024-08-01T07:04:10Z",
      "side": 1,
      "message": "I think this is mainly an issue with the tests as we patch the limit to be smaller, which makes the small overhead of the zlib framing count.",
      "parentUuid": "b5a124a1_81361293",
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "891801ad_055615cd",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T18:24:20Z",
      "side": 1,
      "message": "See above.",
      "range": {
        "startLine": 156,
        "startChar": 23,
        "endLine": 156,
        "endChar": 38
      },
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "800b54dc_2c6aa94a",
        "filename": "zuul/zk/sharding.py",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-07-31T19:15:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "891801ad_055615cd",
      "range": {
        "startLine": 156,
        "startChar": 23,
        "endLine": 156,
        "endChar": 38
      },
      "revId": "ffb548f3674923d541056ceb93f044a619fa1827",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}