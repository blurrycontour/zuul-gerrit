{
  "comments": [
    {
      "key": {
        "uuid": "76ea216c_49624929",
        "filename": "tests/base.py",
        "patchSetId": 3
      },
      "lineNbr": 4881,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T21:39:32Z",
      "side": 1,
      "message": "Nit: we could write this as \"Build is not finalized\" since the uuid is already in the message.",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7b4a9cd_46fa6e3e",
        "filename": "tests/base.py",
        "patchSetId": 3
      },
      "lineNbr": 4881,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-04-15T14:24:08Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "76ea216c_49624929",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c65b1323_4b928405",
        "filename": "zuul/executor/client.py",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T21:39:32Z",
      "side": 1,
      "message": "Review note: the lifecycle of the items in self.builds is changed a bit here.  Noop jobs now get an entry in self.builds, but for all jobs (noop and otherwise) the entry should be removed in the scheduler now, either upon normal completion, or in the new cleanup methods.",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc2aeab8_0f179f70",
        "filename": "zuul/executor/client.py",
        "patchSetId": 3
      },
      "lineNbr": 192,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-04-15T14:24:08Z",
      "side": 1,
      "message": "That\u0027s right. I will add a section about this to the commit message. AFAIK you don\u0027t like to put comments about such \"changed behaviour\" in the code as this might confuse people which aren\u0027t aware of the old behaviour ðŸ˜Š",
      "parentUuid": "c65b1323_4b928405",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cf9c641_2d36f8c4",
        "filename": "zuul/executor/server.py",
        "patchSetId": 3
      },
      "lineNbr": 1172,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T21:39:32Z",
      "side": 1,
      "message": "I don\u0027t believe it\u0027s currently used.  It could be used to indicate the progress, but we do that in the scheduler with the time database instead.",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b947856_87b2d3af",
        "filename": "zuul/executor/server.py",
        "patchSetId": 3
      },
      "lineNbr": 1172,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-04-15T14:24:08Z",
      "side": 1,
      "message": "Ok, then I will simply remove it",
      "parentUuid": "6cf9c641_2d36f8c4",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6367a12d_7f699b5d",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 931,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-12T21:39:32Z",
      "side": 1,
      "message": "Just a note: We should still make sure the build is canceled in the future, even if the mechanism is different.  However it happens, we don\u0027t want it running after this point since it\u0027s effectively orphaned.\n\nAn actual concern: I think semaphores may not be handled in the case a pipeline or tenant is removed.  This method shares some code with scheduler.cancelJob, and that does return semaphores.  Perhaps we could use that instead of this?  Or otherwise somehow merge this code path?",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aef8585_757dee85",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 931,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-04-15T14:24:08Z",
      "side": 1,
      "message": "I tried that out, but it looks like cancelJob() is only returning the nodeset in case the build wasn\u0027t running. I think in case the build was running the \"normal\" mechanism is used when the build result event is processed. However, with the result events in ZK, the scheduler won\u0027t process any results for deleted pipelines/tenants anymore. That might also be the reason why I didn\u0027t use cancelJob() here in the first place and only called the relevant parts (deleting the entry in self.executor.builds and returnung the nodeset) directly. So maybe we should simply call the tenant.semaphore_handler.release(item, job) in here to also handle semaphores.\n\nRegarding the \"orphaned builds\": In the builds API change I simply delete the build in ZooKeeper directly (rather than invoking a cancel on the build) because the cancel event can\u0027t be processed anymore (see the comments in this method). The executor server listens for deleted build nodes and aborts the build in that case. The result would be the same as the executor server will then put a cancel event in the queue which isn\u0027t processed anymore, but IMHO it\u0027s a little more specific to simply delete the build (and return the nodeset) in here as this is all we need.",
      "parentUuid": "6367a12d_7f699b5d",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d22ef751_d20499d2",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 931,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-04-22T00:35:35Z",
      "side": 1,
      "message": "Okay, deleting the build from zk directly sounds like a potentially good solution.\n\nWe still have some issues we need to address:\n\n1) The comment above is a little misleading -- it\u0027s not really to fix the tests, it fixes a real problem that the tests are showing us.\n\n2) We still need to deal with semaphores.\n\n3) This shares a lot in common with https://review.opendev.org/785536 which effectively changes reconfigurations so that the only things they can mutate are deleting pipelines or tenants.  I think we should rebase on top of that change (actually https://review.opendev.org/786744 which is the end of that stack) and work from there.\n\nOnce we rebase, we\u0027ll still have to address the conflict you point out: that sometimes we call cancelJob when a tenant+pipeline still exists, and sometimes we call it when we\u0027re deleting it.\n\nIf it\u0027s complicated to resolve that issue, and in the very next change we\u0027re going to move the build requests into ZK as well which makes the issue moot, then we may want to review those changes together (we don\u0027t need to squash them, we can leave them as two changes) and just make sure we merge them together.\n\nIf we can resolve it with a temporary method like this one, that\u0027s fine too.\n\nTo summarise:\n\n* Rebase on 786744\n* Analyze the pipeline/tenant cleanup situation in that case\n  * If it\u0027s not too difficult to resolve, keep this as a standalone change (we need to handle semaphores too).\n  * Otherwise, do something hacky to make the tests pass but review it with the next change and merge them together.",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0abeaf00_0e1bfb17",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 931,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-04-22T07:17:47Z",
      "side": 1,
      "message": "1) I can adapt the comment. I just wanted to write down what I saw so that at least somebody understands what this is all about in the first place.\n\n2) I can re-use the line that returns the semaphores in the cancelJob() method. I\u0027m just not sure if that is enough or if there is something else to address since I\u0027m not familiar with semaphores at all.\n\n3) Regarding your concern here\n\u003e Once we rebase, we\u0027ll still have to address the conflict you point out: that sometimes we call cancelJob when a tenant+pipeline still exists, and sometimes we call it when we\u0027re deleting it.\n\nI think we need to implement some periodic cleanup for most of the ZooKeeper stuff. This could then also deal with that use case. Apart from this I think it\u0027s quite difficult to solve this issue as there could always be a race between the reconfiguration and a running job (unless we ensure that all jobs are finished before the reconfig starts, but I think this is rather difficult and not what we want). We might also be able to process the result events from all tenants/pipelines (not just the active ones), but that doesn\u0027t sound right. IMHO it wouldn\u0027t make much sense to process those results since nobody would be able to use them.",
      "parentUuid": "d22ef751_d20499d2",
      "revId": "0a026afe3cca21dc7f5a7500d3110d90f4990b23",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    }
  ]
}