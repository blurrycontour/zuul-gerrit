{
  "comments": [
    {
      "key": {
        "uuid": "1abeadc6_131e560c",
        "filename": "doc/source/cloner.rst",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 4146
      },
      "writtenOn": "2014-08-28T21:44:17Z",
      "side": 1,
      "message": "I don\u0027t know if we should expect the implied \"let git clone create hardlinks if the cached repo and destination repo are on the same filesystem\" to be clear to everyone. Do you think we should be explicit about that behavior here?",
      "revId": "a04a8e73ca11710072e27fe056cdd413ea83d727",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1abeadc6_ce4c0245",
        "filename": "doc/source/cloner.rst",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-08-29T19:54:48Z",
      "side": 1,
      "message": "Zuul cloner should probably use git clone with the provided dir (i.e. do not silently prefix  \u0027file://\u0027 by default) and prevent hard linking via an option.\n\nThe thing that confuses me when reading the git-clone man page is that there are two options that apparently achieve the same (prevent hardlinks):\n\n --no-local\n --no-hardlinks\n\nMaybe we can have a --cache-no-hardlinks option that would be passed to git clone to prevent hard linking.  Could be added to James patch (parent of this one).",
      "parentUuid": "1abeadc6_131e560c",
      "revId": "a04a8e73ca11710072e27fe056cdd413ea83d727",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa98f980_4fa462b9",
        "filename": "doc/source/cloner.rst",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1
      },
      "writtenOn": "2014-09-16T15:21:52Z",
      "side": 1,
      "message": "I like the idea that we should just do what git does.  What if we accepted either a path or file URL, just like git, and parsed the URL to determine its filesystem location (which we need to do in order to test whether the dir exists)?",
      "revId": "a04a8e73ca11710072e27fe056cdd413ea83d727",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}