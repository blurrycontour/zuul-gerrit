{
  "comments": [
    {
      "key": {
        "uuid": "953eb4ac_0de972eb",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 109,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T18:33:14Z",
      "side": 1,
      "message": "Below I\u0027m suggesting we use real management events because they are simple and low-cost, but here I think it makes sense to test with a dummy driver so we can avoid the overhead and distraction of actual driver behavior (that will be tested later anyway).",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "460f6207_c721750d",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 109,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "953eb4ac_0de972eb",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffda610b_3ae95d1e",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 129,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T18:33:14Z",
      "side": 1,
      "message": "We should have a comment about what the test is trying to ascertain.  I will try to add those; you can tell me if I\u0027m wrong.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd27e2fd_b47245ee",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 129,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "ok, thanks.",
      "parentUuid": "ffda610b_3ae95d1e",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc7a05f3_1f975b97",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 190,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T18:33:14Z",
      "side": 1,
      "message": "We can use real management events, which not only makes this simpler but gives more confidence in the actual code.  The use of a non-serializable \u0027config\u0027 value as discussed in a previous change would be a problem here, except that we can set that to None which is json serializable.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f1ced9a_66fa27e2",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 190,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "dc7a05f3_1f975b97",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2378e63a_12c4f27c",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 277,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T18:33:14Z",
      "side": 1,
      "message": "IIUC, the global event has technically been \"acked\", since the event record has been deleted, but it\u0027s been replaced by an un-acked pipeline event, and the result hasn\u0027t been created; I think this comment is a little misleading.  But it sort of depends on when you consider a management event to be \"acked\".  I got pretty hung up on this; would you consider this accurate?\n\n  Event was just forwarded and since we expect a result, the future should not be completed yet.\n\nI put that in my revision.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e79f050_4e9ede6f",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 277,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "Yes, my comment is very misleading. This is about the result not the ack.",
      "parentUuid": "2378e63a_12c4f27c",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a05c9980_29940ff2",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 296,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T18:33:14Z",
      "side": 1,
      "message": "I\u0027d like to use real result events if we can, but right now we don\u0027t inherit from the new event interface, so we would be getting ahead of ourselves.  I\u0027m adding a TODO for us to look at that later.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07932676_631a3b4b",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 296,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "a05c9980_29940ff2",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be2855dd_96d29c11",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 300,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T21:18:52Z",
      "side": 1,
      "message": "I was able to remove this patch and the test still passed because it was treated as an invalid event, so I\u0027m going to add some more assertions to the test to make sure that we actually process the events we think we should.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f178f3d_a6d4f37b",
        "filename": "tests/unit/test_event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 300,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "ok, thanks",
      "parentUuid": "be2855dd_96d29c11",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d76ef88_77330343",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 106,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-15T14:50:27Z",
      "side": 1,
      "message": "I\u0027m honestly confused when to use camelCase vs snake_case in Zuul. I was under the impression that it\u0027s mostly camelCase, but snake_case for private methods. I tried to follow that style, (I might have used snake_case out of habit sometimes). From your update it now seems it should be camelCase for everything (except properties?!).",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a24d10a1_0a7ab657",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 106,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T17:13:58Z",
      "side": 1,
      "message": "Yeah, it\u0027s not perfectly consistent, sorry.  :(  It\u0027s supposed to be camelCase for everything.  Sometimes things slip through and it\u0027s admittedly less important for internal methods that are only used in the same file.  I think it was the public \"create_registry\" method that made me think the rework was worth doing.\n\nAnd, yes, this essentially follows the old Java convention: CapitalClasses.camelCaseMethods() and .snake_case_attributes.  That was fairly common in python 1.5.2 days and not unheard of in the early 2.x versions.  People don\u0027t acknowledge that now though.  Anyway, if we started from scratch or decided to do a major reformatting, I\u0027d go with the current style.  But in the mean time, consistency, or at least as close as we can get, is worth it.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "765b69cd_58f79f72",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 106,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "Ok, thanks for clarifying.",
      "parentUuid": "a24d10a1_0a7ab657",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f250dbe5_e39aa8c5",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 225,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T21:18:52Z",
      "side": 1,
      "message": "This deletes the original event before reporting the result, so if the scheduler crashes between these two lines, the caller will wait forever.  I think it may be safer to reverse the order.  I\u0027m going to go ahead and do that in my revision, but this is pretty delicate, so I want to make sure you agree.  I\u0027ll leave a note about the importance of it.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8546e5c8_b5b2985e",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 225,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "Yes, good catch. I think it\u0027s better for the result to be set twice in the case the event processing is interrupted than to let the caller run into a timeout (or worse hang forever).",
      "parentUuid": "f250dbe5_e39aa8c5",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79321640_c14983e0",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 242,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T21:18:52Z",
      "side": 1,
      "message": "Why is the result created as an ephemeral node?  If the scheduler crashes between reporting the result and the client reading it, then the client won\u0027t see the result.\n\nIdeally we want the client to delete the event after deleting it in order to avoid having these stick around for the lifetime of the scheduler anyway.  But we can\u0027t rely on the client doing that, because someone may have hit CTRL-C.  So I think we should do the following:\n\n1) Don\u0027t create the nodes as ephemeral.\n2) Have the client delete the node (this is already the case).\n3) Periodically look for leaked result nodes and delete them.\n\nHere\u0027s an alternative (but I don\u0027t think we should do this):\n\nCurrently the client ignores the data in the result callback in favor of simply performing a ZK get on the znode.  If we used the data from the callback instead of re-reading it, we would not be subject to the race with the server crashing before the client reads the data.  That might be worth doing just to save a ZK read call, however, it still doesn\u0027t solve the issue of clients not cleaning up results and them sticking around until the server exits.  For that reason alone, I think we should drop the ephemeral flag and add a cleanup process.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05796cbc_06d580f2",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 242,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "Should this cleanup procedure be something specific to the event queues or would some kind of scheduler global cleanup hook be better? Something like:\n\n    scheduler.register_cleanup_hook(mgmt_queue.cleanup)",
      "parentUuid": "79321640_c14983e0",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "483e3b6d_d5029e5c",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 242,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-17T00:06:53Z",
      "side": 1,
      "message": "I like that suggestion; we may have other things that need garbage collecting.  I don\u0027t think we would need to run this very often (maybe every hour?) and it could delete things that are, say, \u003e24 old.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "660d54b8_47002594",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 256,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-15T21:18:52Z",
      "side": 1,
      "message": "Based on your response to the earlier patchset and the code in the tests, I think I understand what this is now.  But if I\u0027m following it correctly, couldn\u0027t we use a dictionary keyed by tuple instead?",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a5f2803_b683482c",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 256,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-03-16T06:25:13Z",
      "side": 1,
      "message": "Yes, we could. The API would look something like this:\n\n    event_queue[tenant.name, pipeline.name]\n\nPersonally I like the nested dict syntax better (tuples as keys looks a little unfamiliar to me), but it\u0027s an easy change in case you\u0027d prefer that.",
      "parentUuid": "660d54b8_47002594",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d08091f8_719ce05d",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 31
      },
      "lineNbr": 256,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-03-17T00:06:53Z",
      "side": 1,
      "message": "This is fine.  We need the defaultkeydict in order to pass in the reference to the client, so we may as well stick with this.  If we didn\u0027t need that, I would be in favor of simplifying it with a plain dict indexed by tuple.",
      "revId": "bd7ffc3671bec51ee1172a4d2817487db806c293",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}