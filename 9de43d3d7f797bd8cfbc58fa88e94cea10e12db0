{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "574b6236_3bf79e99",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-06T01:45:15Z",
      "side": 1,
      "message": "This is a great sentence in a commit message.",
      "range": {
        "startLine": 24,
        "startChar": 60,
        "endLine": 27,
        "endChar": 1
      },
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eebd6cfc_727ff98b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 27,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-07T00:48:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "574b6236_3bf79e99",
      "range": {
        "startLine": 24,
        "startChar": 60,
        "endLine": 27,
        "endChar": 1
      },
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6686f28a_b3514bb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-06T01:19:18Z",
      "side": 1,
      "message": "recheck",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa5ab3dc_e6402854",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-06T01:45:15Z",
      "side": 1,
      "message": "One note about why I think CI is failing. Another about a potentially confusing scenario if looking at the change data directly that may warrant additional commenting. I think the change overall is sound though.",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44f2a8a6_828a8e16",
        "filename": "tests/fakegerrit.py",
        "patchSetId": 5
      },
      "lineNbr": 599,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-06T01:45:15Z",
      "side": 1,
      "message": "The upgrade test job is failing on `AttributeError: \u0027FakeGerritChange\u0027 object has no attribute \u0027cherry_pick\u0027` I think the use of self.cherry_pick here and below may need to check `if hasattr(self, \u0027cherry_pick\u0027) and self.cherry_pick:` or similar to make that happy.",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e68264_d1a602e5",
        "filename": "tests/fakegerrit.py",
        "patchSetId": 5
      },
      "lineNbr": 599,
      "author": {
        "id": 1
      },
      "writtenOn": "2025-03-07T00:24:55Z",
      "side": 1,
      "message": "Okay I think I fixed this during the unpickle; let\u0027s see if the upgrade job likes it.",
      "parentUuid": "44f2a8a6_828a8e16",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6beabce9_b92c7b84",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 5
      },
      "lineNbr": 1061,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-06T01:45:15Z",
      "side": 1,
      "message": "The call to update_change() here would end up updating the current patchet value in the http case to match the new merged state, but wouldn\u0027t do so in the ssh case? I don\u0027t know that that is worth an edit to the comment above. But it might be confusing from a data perspective if inspecting the data directly because the patchset value in the key wouldn\u0027t match the patchset value within the change value itself?",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87e7caa8_226cccaf",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 5
      },
      "lineNbr": 1061,
      "author": {
        "id": 1
      },
      "writtenOn": "2025-03-06T23:44:59Z",
      "side": 1,
      "message": "I don\u0027t think I understand the question.  It might help if you could be more explicit about which attribute you mean by \"the current patchset value\"?\n\nI don\u0027t believe we will ever update GerritChange.patchset to point to a different value than the key (if they key has a patchset).  The only time we set that value is if it is unset, so we will not update the change for a key where patchset\u003d1 to say it\u0027s patchset 2.  The only things we will change are which patchsets dependencies point to (the main part of this change) and whether the patchset is current with GerritChange.is_current_patchset.  That last one might be wrong in the ssh case but is not important in the cases that it is.",
      "parentUuid": "6beabce9_b92c7b84",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76366daa_dcecee1e",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 5
      },
      "lineNbr": 1061,
      "author": {
        "id": 4146
      },
      "writtenOn": "2025-03-07T00:48:46Z",
      "side": 1,
      "message": "On line 1045 we query the change by number only so should get back up to date info from Gerrit rather than the cache (I think). This means the data in there would be up to date including new patchset values. But then on line 1054 we construct a ChangeKey using the preexisting change object which has not been updated yet so the ChangeKey (key) passed into updateChangeWithRetry() wouldn\u0027t match the data that we update into change via _update_change? Basically we\u0027d have a change key with old patchset info and change data with new patchset info in it matched up to each other?\n\nIts possible I\u0027m misreading that code and the new comment block just above.",
      "parentUuid": "87e7caa8_226cccaf",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d45011a_96e241b4",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 5
      },
      "lineNbr": 1061,
      "author": {
        "id": 1
      },
      "writtenOn": "2025-03-07T18:54:36Z",
      "side": 1,
      "message": "Got it.  A thing to keep in mind is that both query methods (http and ssh) get information about all patchsets.  Since the existing GerritChange object passed into this method has, let\u0027s say, GerritChange.patchset\u003d3, then the GerritChange.update() method will know not to overwrite information such as the commit sha with a different revision.  They will, however, flip the is_current_patchset bit if they see that there is a patchset 4.\n\nIn other words, I think we can say that we don\u0027t have the data corruption problem you are concerned about.\n\nWhat I\u0027m trying to say in the comment is basically \"we\u0027re going to lie and say that patchset 3 is merged even if we know there is a patchset 4 and that was the actual one that was merged; and the reason it\u0027s okay to lie about that is because the only time that would matter is in the case where we\u0027re using ssh queries and the cherry-pick mode, because queries for *other* changes (not this one) can\u0027t tell that there was a cherry-picked patchset 4 of their dependency (this change), so we need to lie and say that patchset 3 was merged (because otherwise we would do a gate reset).\"\n\nTo put all that another way: the update method will not update this change with wrong data no matter how the query happened (with the exception of the small lie about whether this patchset was merged).  And the only time the difference between ssh and http queries matters is when other changes are pointing at this one with a git dependency (see line 290).",
      "parentUuid": "76366daa_dcecee1e",
      "revId": "9de43d3d7f797bd8cfbc58fa88e94cea10e12db0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}