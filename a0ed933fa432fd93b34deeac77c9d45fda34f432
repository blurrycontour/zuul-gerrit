{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1f86a748_9f65e7c5",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4396,
      "author": {
        "id": 27582
      },
      "writtenOn": "2023-01-17T13:01:11Z",
      "side": 1,
      "message": "What\u0027s the reason we are copying the versions dict here? Shouldn\u0027t it be fine to update the build version directly and pass it to `updateAttributes()`?",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "679f17d9_508f5921",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4396,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-01-17T14:27:22Z",
      "side": 1,
      "message": "This was so that if there is an exception, we won\u0027t have updated our internal object, so it will behave more like when we call updateAttributes with a scalar.  I don\u0027t know if it\u0027s necessary, but it seemed safer and more predictable.",
      "parentUuid": "1f86a748_9f65e7c5",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ed2a390_1da861a8",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4396,
      "author": {
        "id": 27582
      },
      "writtenOn": "2023-01-17T14:35:04Z",
      "side": 1,
      "message": "I think this (update before save to ZK) is already the case when using the `activeContext()` ctx manager.\n\nHaving the copy adds a little more object churn, but I guess this is more of a nit.",
      "parentUuid": "679f17d9_508f5921",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71e528f5_ec6d4b6d",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4396,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-01-17T14:41:37Z",
      "side": 1,
      "message": "True, we really have two different behaviors.  I don\u0027t feel strongly about keeping it this way.",
      "parentUuid": "679f17d9_508f5921",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8faefea_036ff8d0",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4396,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-01-17T14:46:25Z",
      "side": 1,
      "message": "Changed in a followup so we can treat this question independently.",
      "parentUuid": "679f17d9_508f5921",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d77abfb_6b78773c",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4406,
      "author": {
        "id": 27582
      },
      "writtenOn": "2023-01-17T13:01:11Z",
      "side": 1,
      "message": "same question as above",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b75ba48a_6dddd9f7",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4419,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-01-26T23:01:14Z",
      "side": 1,
      "message": "If we did a !\u003d comparison would that give us the flexibility to write buildsets, jobs, and builds in any order? I\u0027ve tried to trace through some of the state transitions here and I think this is correct, but it seems to rely on very careful order of operations and resource access. For example you must always read the buildset first before accessing builds or jobs otherwise another executor may have updated the builds/jobs but youwould think you are up to date.\n\nSemi related, we default to expected \u003d 0 and current \u003d -1 if we haven\u0027t done the initial write to Zookeeper yet? This seems too be necessary to carefully ensure the behavior we need. Is that worth at least a comment that the two default values need to keep this ordered relationship? Or maybe drop the default 0 value and always refresh if expected is None?",
      "range": {
        "startLine": 4419,
        "startChar": 24,
        "endLine": 4419,
        "endChar": 25
      },
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2cd00197_3f13a7f5",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4419,
      "author": {
        "id": 1
      },
      "writtenOn": "2023-01-26T23:24:11Z",
      "side": 1,
      "message": "We do read in exactly the right order since this is in the (de)serialize methods, which are called on the top-most ZK object and work their way down (or up) in the order you specified.  So I don\u0027t think it\u0027s fragile, and reading in any other order is very much invalid (we might consider panicking if expected \u003c current).\n\nBut in general, an ordered comparison on a \"version\" number seems natural to me.",
      "parentUuid": "b75ba48a_6dddd9f7",
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40c6f560_ff3a9681",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 4428,
      "author": {
        "id": 4146
      },
      "writtenOn": "2023-01-26T23:01:14Z",
      "side": 1,
      "message": "See above.",
      "range": {
        "startLine": 4428,
        "startChar": 24,
        "endLine": 4428,
        "endChar": 25
      },
      "revId": "a0ed933fa432fd93b34deeac77c9d45fda34f432",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}