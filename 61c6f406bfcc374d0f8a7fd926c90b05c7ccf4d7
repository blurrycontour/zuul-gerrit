{
  "comments": [
    {
      "key": {
        "uuid": "bfb3d3c7_aa76aba3",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 6488
      },
      "writtenOn": "2019-05-21T17:14:23Z",
      "side": 1,
      "message": "s/operator/operate/",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfbec78f_7224a05e",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-16T00:27:01Z",
      "side": 1,
      "message": "CRD spec are provided as extra-var and they will override any group_vars/roles-default, thus we only need to reference dependencies apiVersion/kind as vars to enable override.\n\nHowever, supporting multiple dependency implementations may be too much work since the different operators may behave differently (e.g. the postgresql operator on operatorhub requires a \"primarysecretname\" object to create the zuul user while another one may need something else).\n\nThus I think we should pick one for RDMS and one for Zookeeper and stick with it. I had good success with: https://operatorhub.io/operator/alpha/postgres-operator.v3.5.0 and https://github.com/pravega/zookeeper-operator#install-the-operator )",
      "range": {
        "startLine": 75,
        "startChar": 28,
        "endLine": 75,
        "endChar": 52
      },
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_ca799f93",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 6488
      },
      "writtenOn": "2019-05-21T17:14:23Z",
      "side": 1,
      "message": "Hard no on Postgres as \"the one\", and mostly no on MySQL being \"the one\". Given that every Zuul I\u0027ve set up is/was MySQL based, and OpenDev is as well. I don\u0027t think it would serve our community to tell other people to run what we don\u0027t, even if Postgres is a fine choice).\n\nThat said, I agree that they probably won\u0027t be entirely compatible, but I\u0027d hope they can have flags, and the database can simply be an optional plug-in and not a hard-dependency, so users can simply choose between 1 of 4 options: CRD\u0027d (mysql|postgres), or manually configured (mysql|postgres).\n\nSince we should not dither over this, what if we just start with \"plug in your database details here\" and just make clear that we don\u0027t help you set up the database?",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_b031350e",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-21T22:44:44Z",
      "side": 1,
      "message": "Looking at the operatorhub catalogue, FWIW there are only percona and vitess operators to setup mysql. Shouldn\u0027t we consider the rdms an implementation detail that the user doesn\u0027t need to know about?\n\nOtherwise I\u0027m fine with enabling the user to provide it\u0027s own dburi.",
      "parentUuid": "bfb3d3c7_ca799f93",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_f2579c01",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 16068
      },
      "writtenOn": "2019-05-22T20:40:02Z",
      "side": 1,
      "message": "FWIW, we\u0027re running our zuul with postgres. But we use an externally managed db.\n\nSo I\u0027d be fine with three options: CRD (mysql|postgres) and DBURI\n\nHowever if it\u0027s too much effort (I don\u0027t know how much it would be) I think we should standardize the CRD to one.",
      "parentUuid": "bfb3d3c7_b031350e",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_2074fe98",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-22T22:48:50Z",
      "side": 1,
      "message": "Supporting both mysql|postgres may complicate OLM dependencies declaration, not sure we can declare optional dependencies based on a CRD spec option...",
      "parentUuid": "bfb3d3c7_f2579c01",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_0a967094",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 2
      },
      "writtenOn": "2019-05-28T12:47:41Z",
      "side": 1,
      "message": "I think we should support only DBURI and one and only one CRD that the zuul operator manages.\n\nDBURI handles all versions of the world where the user has an alternate opinion about what should happen with databases.\n\nOnly-one-CRD allows \"kubectl get-me-a-zuul\" to be about as straightforward as docker-compose.\n\nThe reason I think we should also support the db is that by and large the db for zuul is not interesting or hard to deal with and is an implementation detail for the simple case.",
      "parentUuid": "bfb3d3c7_2074fe98",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_6a70b3a6",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 6488
      },
      "writtenOn": "2019-05-21T17:14:23Z",
      "side": 1,
      "message": "See above. I disagree with this point, but if we had to pick one, we\u0027d have to pick the one that most current users are on, which I believe is MySQL. Also, a nit, it\u0027s either Postgres, or PostgreSQL.",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_2ac9f4aa",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 2
      },
      "writtenOn": "2019-05-28T12:47:41Z",
      "side": 1,
      "message": "Assuming we decide to support one, I agree that we should pick MySQL.",
      "parentUuid": "bfb3d3c7_6a70b3a6",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfbec78f_d2deac3c",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-16T00:27:01Z",
      "side": 1,
      "message": "If the user can provides part of the zuul.conf, shouldn\u0027t we be able to discover if we need to setup a Zookeeper or a RDMS?\n\nOn the other hand, extra files may be needed by zuul.conf entries (such as ssh key for gerrit connection or github app certificats). Thus it may be worthy to consider providing a:\n\n  apiVersion: zuul-ci.org/v1alpha1\n  kind: Source\n  spec:\n    zuul_conf_entry_configmapname: \"\"\n    secretname: \"\"\n\nAnd iterate over those when creating the final zuul.conf and mount all the secrets in /var/lib/zuul",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_8a73a7b1",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 6488
      },
      "writtenOn": "2019-05-21T17:14:23Z",
      "side": 1,
      "message": "It would be nice if zuul did .d configuration, so we can just generate some in the Operator, and bind mount in others from secrets objects. I also submitted a patch a bazillion years ago (4 months?) that would allow environment variable interpolation in zuul.conf.. that would also help here.",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_102a818f",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-21T22:44:44Z",
      "side": 1,
      "message": "To keep things simple, we would also need to enable settings secrets content (e.g. ssh key) inline in the zuul conf (.d) so that the user can provide a single blob to describe a connection.\n\nBut since the operator is going to compose the configuration (at least to setup the zookeeper info), then it\u0027s not too much work to also append user provided sections.",
      "parentUuid": "bfb3d3c7_8a73a7b1",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_f25a3cf1",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 16068
      },
      "writtenOn": "2019-05-22T20:40:02Z",
      "side": 1,
      "message": "++ for .d configuration\n\nFTR, the environment interpolation change is here: https://review.opendev.org/612824",
      "parentUuid": "bfb3d3c7_102a818f",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fb8cfa7_266c7307",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 4162
      },
      "writtenOn": "2019-06-01T15:52:01Z",
      "side": 1,
      "message": "+1 for zuul.d zuul.conf, I personally don\u0027t want to get into templating zuul.conf, I much rather patch static files when possible.",
      "parentUuid": "bfb3d3c7_f25a3cf1",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfbec78f_d2b78cf4",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-16T00:27:01Z",
      "side": 1,
      "message": "Deployment may not be able to detect config map change, thus we may need some extra CRD to manage the service lifecycle. For example, kind such as \"ZuulReload\" and \"ZuulBackup\" (to archive all the scheduler secrets, to be used by a companion \"ZuulRestore\")",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_2a6abbb2",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 6488
      },
      "writtenOn": "2019-05-21T17:14:23Z",
      "side": 1,
      "message": "Yes please. To me the ability to programattically encode operations in to the deployment is the main reason to do this as an operator and not just ansible/helm/etc.",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_d2e29801",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 16068
      },
      "writtenOn": "2019-05-22T20:40:02Z",
      "side": 1,
      "message": "Do we also want to specify some lifecycles (like upgrades) already or will this just be an implementation detail?",
      "parentUuid": "bfb3d3c7_2a6abbb2",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_e0aa66d0",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-22T22:48:50Z",
      "side": 1,
      "message": "IIUC, upgrades are managed by the OLM itself (through the release of subsequent operator version). Otherwise, we could have a version field in the Zuul or Nodepool CRD to force using a specific image, but that shouldn\u0027t require an Upgrade CRD per se.",
      "parentUuid": "bfb3d3c7_d2e29801",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_218720da",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 16068
      },
      "writtenOn": "2019-05-23T04:34:52Z",
      "side": 1,
      "message": "I mean the process of updating zuul itself. Like pausing executors before updating them or take a queue dump and re-enqueue on scheduler upgrade. These are the things that make an operator superior to helm/templates/..",
      "parentUuid": "bfb3d3c7_e0aa66d0",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_738deb79",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 9311
      },
      "writtenOn": "2019-05-23T05:22:49Z",
      "side": 1,
      "message": "That process should be part of the regular deployment role, and we need to do that in many situations, e.g. if a connection is added or if the scheduler deployment changed. Here is how i prototyped this in: https://github.com/TristanCacqueray/zuul-operator/blob/master/ansible/roles/deploy/tasks/main.yaml#L8\n\nFor executor/merger, it would be nice to have a gracefull stop signal we could use as a preStop container hook (e.g. finish the current jobs and kill yourself when you are done).",
      "parentUuid": "bfb3d3c7_218720da",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fb8cfa7_3bf9d87f",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1
      },
      "writtenOn": "2019-06-03T16:59:48Z",
      "side": 1,
      "message": "Re graceful, yes, we should have that.  We did have it in v2.5, it just didn\u0027t make the initial v3 implementation: https://opendev.org/zuul/zuul/src/branch/master/zuul/executor/server.py#L2479",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfb3d3c7_62a2054e",
        "filename": "doc/source/developer/specs/kubernetes-operator.rst",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1
      },
      "writtenOn": "2019-05-22T15:31:15Z",
      "side": 1,
      "message": "We\u0027re working on approaching a point where the default logging for Zuul is what we would expect people to use, so perhaps here we should support three things: 1) by default, perform no logging config and Zuul uses its default (info level).  2) have a Zuul crd option to set debug logging option in the app crd. 3) allow the user to specify the full logging config as a configmap.",
      "revId": "61c6f406bfcc374d0f8a7fd926c90b05c7ccf4d7",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}