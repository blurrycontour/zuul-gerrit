{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f1f27047_693d7d94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-16T17:08:21Z",
      "side": 1,
      "message": "Adding a -1 because i think the inline comment about the subject scheme should be decided now in order to future proof.",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87e5992a_2ad5ecfc",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 7186
      },
      "writtenOn": "2024-09-12T13:03:37Z",
      "side": 1,
      "message": "The .well-known and jwks URIs would need to be shared across whitelabeled setups, or these claims should always be set with a root URL that must be reachable by the third party service validating the JWT.",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 53
      },
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1afd8f7_8f564f8e",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-16T16:04:15Z",
      "side": 1,
      "message": "Agreed.  We discussed this a bit on PS1 and noted that it should probably behave like the connection webhook URLs.  There\u0027s a small note about that in the \"zuul-web\" section below.",
      "parentUuid": "87e5992a_2ad5ecfc",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 89,
        "endChar": 53
      },
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bdd0e0_712fe2c9",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 7186
      },
      "writtenOn": "2024-09-12T13:03:37Z",
      "side": 1,
      "message": "Deployers may want to choose supported algorithms, ECDSA may have some appeal over RSA",
      "range": {
        "startLine": 102,
        "startChar": 6,
        "endLine": 102,
        "endChar": 13
      },
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b1afbc3_c12abb80",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-16T16:04:15Z",
      "side": 1,
      "message": "This is based on the private key(s) we generate, right?  This spec anticipates having a single RSA key; Jeremy also suggested that folks may want other values but we could add them later.\n\nDo you think we should automatically generate a key for each algorithm we add (so RSA and ECDSA if we add that)?  Or should we allow admins to exclude some?  (It sounds like that\u0027s what you\u0027re suggesting.)  In the second case, we would need to add a zuul.conf section like:\n\n```\n[oidc]\nsupported_algos\u003dECDSA\n```\n\nWhich, if Zuul supported both RSA and ECDSA, would mean that Zuul should only generate ECDSA keys.  The default might be something like:\n\n```\n[oidc]\nsupported_algos\u003dRSA,ECDSA\n```\n\nWhich means Zuul would generate both.\n\nThat sounds fine to me, but I want to make sure that\u0027s what you\u0027re suggesting.",
      "parentUuid": "12bdd0e0_712fe2c9",
      "range": {
        "startLine": 102,
        "startChar": 6,
        "endLine": 102,
        "endChar": 13
      },
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c74e9f0a_74e294bc",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 16068
      },
      "writtenOn": "2024-09-16T16:17:26Z",
      "side": 1,
      "message": "I think if we intend to support both we might want to add an attribute to the secret in order to choose the algorithm for that token. In that case we could also just define the default algorithm in zuul.conf.",
      "parentUuid": "1b1afbc3_c12abb80",
      "range": {
        "startLine": 102,
        "startChar": 6,
        "endLine": 102,
        "endChar": 13
      },
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50cc5cac_02ad50b2",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-16T17:08:21Z",
      "side": 1,
      "message": "Albin has drawn my attention to the fact that Azure (unlike AWS) does not appear to support wildcards in subject matches; nor does it allow matching on anything other than subject.  See this github issue for a bunch of folks lamenting that fact: https://github.com/Azure/azure-workload-identity/issues/373\n\nThat makes some things difficult for Azure.  For example, having a credential that just acts in the scope of the defining project means that you have to over-specify the subject.  Where an admin might want to match a subject of \"\u003czuul-tenant\u003e/\u003ccanonical-project-name\u003e/*\" they would have to specify a secret name even if that wasn\u0027t interesting to them.\n\nWe might want to make this easier in the future by supporting other schemes in the subject.  For example, we might want to support exactly the project-level scheme described above.  Or we might want to encode the triggering project (and possibly branch) as the subject.\n\nI\u0027m not sure we need to decide all the things we might want to do right now, but if we decide that we may want to explore other schemes later, then we should encode the scheme in the subject now so that we are future-proof.\n\nI suggest we update this to specify the subject as:\n\n```\nsub: \"secret:\u003czuul-tenant\u003e/\u003ccanonical-project-name\u003e/\u003csecret name\u003e\"\n```\n\nSo that our first (and so far only) subject scheme is `secret` -- meaning, the subject is the canonical name of the secret itself.  Future subject schemes might be `secret-project` (for the scheme described above) or `triggering-project` (which, as discussed in other comments, could be problematic for deduplicated jobs in circular dependencies, but could nonetheless be useful).  Or `tenant` or `queue`.",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3e3695c_f8b654d6",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 16068
      },
      "writtenOn": "2024-09-17T06:23:20Z",
      "side": 1,
      "message": "I like this suggestion.",
      "parentUuid": "50cc5cac_02ad50b2",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e41d38_734e6064",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 27582
      },
      "writtenOn": "2024-09-17T06:50:13Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "f3e3695c_f8b654d6",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abe6e996_bdabf174",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-17T16:20:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67e41d38_734e6064",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c15dad_84a69034",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 7186
      },
      "writtenOn": "2024-09-12T13:03:37Z",
      "side": 1,
      "message": "How about adding a subcommand to the admin cli in case the keys were compromised?",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef361b27_27f4eaa4",
        "filename": "doc/source/developer/specs/zuul-workload-identity-federation.rst",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-09-16T16:04:15Z",
      "side": 1,
      "message": "Sounds reasonable.",
      "parentUuid": "e7c15dad_84a69034",
      "revId": "20430d6ecdd8e12cea02950357c8755b2186dd2d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}