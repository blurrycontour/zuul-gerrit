{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "42930898_cd173f4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Nit is this meant to be item?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b2b5040_b6bc010c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "42930898_cd173f4c",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4692db0a_73b0cccd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:54:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b2b5040_b6bc010c",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69d8039e_3f428303",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Posting an early draft review as this is large enough it is taking me some time to get through. I have reviewed everything but the circular deps test file, the pipeline manager class files, and model.py.\n\nI\u0027m also curious if we should bump the model api version to indicate that the old job name vs job uuid split has been resolved. I suspect this isn\u0027t technically necessary because we\u0027re restarting all services after an upgrade to 9.x (pretty sure we say this is required in our general upgrade docs). but having the model api and the version numebrs reflect the update might be nice?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b48933_9b1676af",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 872,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Why is A\u0027s status MERGED when it was part of a failed cycle?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "724280e4_122a70ca",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 872,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Because the new reporting order doesn\u0027t match the old enqueue order.  It\u0027s not a substantial behavior change.\n\nOld:\n* change B is enqueued (because we trigger on A, and B is a dependency, so it ends up in the queue first)\n* change A is enqueued\n* change B reports but fails to merge\n* change A reports as merge failure\n\nYou can see that the particular result there is a happenstance of the enqueue order.  If we had put the trigger event on B, then the old behavior would have been:\n\n* change A is enqueued\n* change B is enqueued\n* change A reports and merges\n* change B reports and fails to merge\n\nAnd that is the behavior we get with the new system because we happen to add the changes to the item in A, B order.\n\nThe important part of this test is that the buildset reports merge_failure and we stop merging changes.  This exhibits the known behavior of not having two-phase commit.",
      "parentUuid": "a2b48933_9b1676af",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d86e400_33f0ab83",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 1281,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "The behavior in this test seems to be at odds with what I thought was happening in the previous test above. Maybe the test above should keep the B result checks but remove the patchset created event?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0875509_2b650905",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 1281,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "I think it does do that.  In this test and the one above, we enqueue a cycle and check the results of every change in that cycle.",
      "parentUuid": "7d86e400_33f0ab83",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e52e3a6_e7c19dfc",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 2633,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "How is this test different than test_job_deduplication_child_of_diff_parent_diff_data ?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e77ab466_8d64bd00",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 2633,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "The tests with \"_check_\" are in the check pipeline, the ones without are gate.  We should have called those \"_gate_\" but they came first when there was no check deduplication...",
      "parentUuid": "4e52e3a6_e7c19dfc",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b25ff661_b901fe20",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 4628,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Cycle is always going to have a type of dict due to line 4623. But expected_cycle may be None or a dict. I think the only way this passes is if the block on lines 4624-4625 is dead?",
      "range": {
        "startLine": 4628,
        "startChar": 45,
        "endLine": 4628,
        "endChar": 50
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35417352_7699294f",
        "filename": "tests/unit/test_circular_dependencies.py",
        "patchSetId": 10
      },
      "lineNbr": 4628,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "4623 creates a set.  I hate python went with that syntax because it looks like a dict.  Definitely not dead; there are uses.",
      "parentUuid": "b25ff661_b901fe20",
      "range": {
        "startLine": 4628,
        "startChar": 45,
        "endLine": 4628,
        "endChar": 50
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752f0d11_dd02afad",
        "filename": "tests/unit/test_tracing.py",
        "patchSetId": 10
      },
      "lineNbr": 30,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "I guess this doesn\u0027t need to be a recursive call to handle lists of lists?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48f4e591_61e681fa",
        "filename": "tests/unit/test_tracing.py",
        "patchSetId": 10
      },
      "lineNbr": 30,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "In theory it should, but this is sufficient to cover the data we currently send it.  If it were complete, it would be a rather more complex function I think.",
      "parentUuid": "752f0d11_dd02afad",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "039b1100_41f3182d",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 10
      },
      "lineNbr": 1354,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "This option has been made redundant by the inclusion of ALL_REVISIONS below. Might be worth cleaning up to avoid confusion.\n\nThough looking at the diff in the next file we continue to refer to the current revision so maybe this isn\u0027t redundant and we need both to simplify our parsing of the data?",
      "range": {
        "startLine": 1354,
        "startChar": 48,
        "endLine": 1354,
        "endChar": 67
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41e07e85_592760c4",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 10
      },
      "lineNbr": 1354,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "I believe they cause different attributes to be returned and current is not inclusive in all.",
      "parentUuid": "039b1100_41f3182d",
      "range": {
        "startLine": 1354,
        "startChar": 48,
        "endLine": 1354,
        "endChar": 67
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08c818fb_38a0853b",
        "filename": "zuul/driver/gerrit/gerritconnection.py",
        "patchSetId": 10
      },
      "lineNbr": 1354,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Yup on further reading of the gerrit api this appears to be correct.",
      "parentUuid": "41e07e85_592760c4",
      "range": {
        "startLine": 1354,
        "startChar": 48,
        "endLine": 1354,
        "endChar": 67
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22599ee3_6ce738cb",
        "filename": "zuul/driver/gerrit/gerritreporter.py",
        "patchSetId": 10
      },
      "lineNbr": 84,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "`item.changes` will include all changes including the current change right? Maybe we should rename this value from `other_change` to simply `a_change`? Or check if `other_change` is `change` and continue if so?\n\nThat a_change variable name is horrible but I don\u0027t want it colliding with `change`",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae2ab6e7_4cca0e7f",
        "filename": "zuul/driver/gerrit/gerritreporter.py",
        "patchSetId": 10
      },
      "lineNbr": 84,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "I have used the \"other_X\" pattern somewhat consistently to mean \"there is a variable named X in this method but we\u0027re looping over another set of X\u0027s so the other X is other_X\".  I\u0027m open to other suggestions but I agree that a_change is not less confusing so I don\u0027t think we should use that; and I don\u0027t think we should make that change in this change since it would then be inconsistent with a lot of other instances.",
      "parentUuid": "22599ee3_6ce738cb",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8c23c77_a1d47094",
        "filename": "zuul/driver/gerrit/gerritreporter.py",
        "patchSetId": 10
      },
      "lineNbr": 84,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ae2ab6e7_4cca0e7f",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d2b80ce_03bcb405",
        "filename": "zuul/executor/client.py",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "One downside to changes like this is we won\u0027t be able to easily grep for change numbers in the logs anymore. I\u0027m not sure I have a better solution as listing all changes in an item seems just as bad for logging.\n\nI guess we just need to clearly log where a change is added to an item so that we can then grep on the item ids (or event id).",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "abb746fd_d7aa6d96",
        "filename": "zuul/executor/client.py",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "The item repr/str includes the list of changes.  There should be no loss of grep functionality.",
      "parentUuid": "1d2b80ce_03bcb405",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c0d5302_da195f0e",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 218,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "I guess this might introduce some less deterministic behavior (at least as users are likely to view it) as you might end up using relative queue priority for a project you don\u0027t expect (some project in the cycle that is different than your \"current\" (for some value of current) projects queue). In situations like that I suppose the proper thing to do is to merge queues in config.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5baece2_750b7c04",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 218,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Yeah, it seems to me it\u0027s either that or otherwise we introduce a loophole that escapes relative priority.  I think this is the best compromise and will behave in the as-fair-as-possible way we intend that to work.",
      "parentUuid": "1c0d5302_da195f0e",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bccf523_5e2e46bc",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 480,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Why would we get a merge failure here? Is it possible when we report and some changes in the cycle are mergeable but not all of them (including the abandoned change?).",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c726368_ce69fbdd",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 480,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "I think it would be a pathological case.  Like someone configured a dequeue reporter to submit in gerrit.  It shouldn\u0027t really happen, but it\u0027s better to keep the pattern we use elsewhere and handle the exception since it could be configured to do so.  In other words, it\u0027s insane, but not an error.",
      "parentUuid": "3bccf523_5e2e46bc",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0984e3f_ec910953",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 789,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "This would occur if the needed change has already merged so isn\u0027t part of the cycle?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e6240dc_d15b3335",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 789,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "I think that case would be if we have a cycle B\u003c-\u003eC but B has a git dependency on A.  In that case, B.git_needs_changes\u003d[A], but A is not in the cycle.  We don\u0027t want to include it because it will be ahead in the queue.\n\nBut if A\u003c-\u003eB\u003c-\u003eC\u003c-\u003eA were a cycle, and A was still a git dependency of B, then B.git_needs_changes\u003d[A] but A is in the cycle.  In that case we want to make sure that A comes first since it won\u0027t be ahead in the queue.",
      "parentUuid": "e0984e3f_ec910953",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e7369eb_3a0312f3",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 944,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "We\u0027ll send a supercede event for each change in the item\u0027s change list. I guess we can\u0027t safely avoid sending a bunch of redundant supercede lists without a lot of extra work? In particular superceding often operates on changes to a specific project branch. I\u0027m wondering what happens if we have a circular dep between a bunch of changes for a single project branch. Will they all do a bunch of work to supercede each other which results in reenqueing themselves due to the loop?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00d0ded5_4bfd0785",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 944,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "This is for pipeline supercedes.  So imagine you have A,B,C in a cycle in check.  Then you enqueue A into gate (which also enqueues B,C, so you now have item A,B,C in gate).  That sends 3 supercedes events as you note.  The first one will dequeue the item, the next two will noop.\n\nWith supercedes it\u0027s hard to imagine that the cycle would be different in a different pipeline, but I still think this is the most provably correct behavior and I don\u0027t think the extra work is going to kill us.  I don\u0027t think we end up in a loop because we\u0027re superceding a different pipeline.  If you supercede the same pipeline, you could probably cause a loop today.",
      "parentUuid": "8e7369eb_3a0312f3",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ece898bf_cf0581b2",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1538,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "What happens if we end up with half the chagnes in the tenant and half outside the tenant? Do we need to be defensive of that here since we are loading configs?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b10fad7f_b3840ad6",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1538,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "It\u0027s not going to hurt to issue a cat job on projects that aren\u0027t in the tenant; they should get ignored by the configloader.",
      "parentUuid": "ece898bf_cf0581b2",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b8fc454_56ce432a",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1676,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Should we preserve quiet_dequeue here? Otherwise we\u0027ll be noisy about dequeuing something that is reenqueued?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12df54ce_5326f213",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1676,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "This is the correct behavior now: we do report the dequeue event for this item even in the case where we re-enqueue.  We need to do that in order for things like the github checks api (and gerrit too, RIP) to close out their internal state for the old queue item.  This was an error before, but masked by a bug in testing.  The bug is fixed and so is this now.\n\n(We probably could have fixed that in a separate change, but the issue didn\u0027t appear to me until well into development of this change, and was difficult to untangle.)",
      "parentUuid": "4b8fc454_56ce432a",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ede655_26782232",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1938,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "We\u0027ll be at model api 25 when this change lands and we\u0027re asserting we aren\u0027t compatible with older apis. Can we drop the check?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcdfc86b_76b238d0",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 1938,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Yes.  And logically we should do that in this change.  But I already have the removal of this staged in a followup, so maybe we could wave this one through?",
      "parentUuid": "b7ede655_26782232",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e789252_0175f05e",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 2132,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "This block may be dead code now. We start off with phase2 being True then when we flip it to false we immediately flip it back to true again before reaching this point.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ab02dcd_289a1bb1",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 2132,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "If changes_merge \u003d is_cycle \u003d succeeded \u003d already_reported \u003d True\n\nThen we hit this code.  I\u0027m not sure if it\u0027s realistically possible, but it\u0027s theoretically possible.",
      "parentUuid": "1e789252_0175f05e",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b6801a_b11ca76a",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 2213,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Does project_in_pipeline need to check something like:\n\n```\nall(bool(layout.getProjectPipelineConfig(item, change)) for change in item.changes)\n```\n\nSince changes for different projects may be in the same item? I\u0027m a bit confused about how we\u0027re going to resolve that here where we seem to be focused on a single project but reporting for an entire item.\n\nWe might also be able to simply invert the check. Break if any are not in the pipeline but keep going until the end otherwise.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f8c33a6_b9874e27",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 10
      },
      "lineNbr": 2213,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "It\u0027s enough that any project is in the pipeline.  This is mostly to avoid doing things like reporting merge failures on changes in projects that don\u0027t use Zuul (are just in the config for required-projects).  It\u0027s hard to imagine how changes in those projects could unintentionally end up in a circular dependency.",
      "parentUuid": "a2b6801a_b11ca76a",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15f44e4a_0295f913",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 223,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Elsewhere I mentioned concern around projects not sharing queues and how that might affect priority. Looking at this block for dependent pipelines at least this is an error? That addresses my concern I think other than maybe we should enforce that error on independent pipelines in order to catch it early? Though queues matter less there.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6fd8602_6a14dfd1",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 223,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "That might be a good change.  I think we could make it standalone; it\u0027s at least not a regression.",
      "parentUuid": "15f44e4a_0295f913",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bca1ec21_b3c2acfa",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 242,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "One thing I\u0027ve realized is that its a bit difficult to keep track of where the lines differ between parent changes and cycled changes. I think we\u0027re using needed_changes for parents and cycle keeps track of the peer changes? In a way they are all needed changes its just a matter of whether or not we process them in the same item as a cycle.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45ab3234_acecb182",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 242,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Yep.  The needed changes are strictly that; a flat set of changes that are required before we know whether it\u0027s a cycle (or what other changes those changes may need).",
      "parentUuid": "bca1ec21_b3c2acfa",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8cb4ee3_f9967de0",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 260,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Should we store the return value of \n\n```\nchange.getNeedsChanges(self.useDependenciesByTopic(change.project))\n```\n\nSo that we don\u0027t have to immediately recall the function and pass it to resolveChangeReferences below?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4af00f4b_a139290f",
        "filename": "zuul/manager/dependent.py",
        "patchSetId": 10
      },
      "lineNbr": 260,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8cb4ee3_f9967de0",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76f01ecb_b4c0b8ba",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 150,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "What happens if branch is not set? If it is always set maybe we drop the None default here? Otherwise I\u0027m not sure what the expected before should be when merging tosha None.\n\nThough I notice the old code also defaulted tosha to None so it must be doing something?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9ee6133_fbc741b8",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 150,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "I expect it crashes, but in a different place.  :)\n\nAs you note, this is not a change from this change so I\u0027d rather keep it simple and just copy it over as-is.",
      "parentUuid": "76f01ecb_b4c0b8ba",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ed7ba7_71c83565",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 150,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e9ee6133_fbc741b8",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce2148ab_f9063540",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 168,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Maybe we should align the terminology between the server and client? We use raw here but on the server side call it old format.",
      "range": {
        "startLine": 168,
        "startChar": 23,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a730c9ea_49c2dc4b",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 168,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "Most of the time the only user of the merger is the pipeline processor.  But the drivers can call getFilesChanges and they supply data in a format that is even less like what the pipeline processor uses at this point.  So this method is designed to serve only them.\n\n(And really, I think it\u0027s just the git driver that does it.)",
      "parentUuid": "ce2148ab_f9063540",
      "range": {
        "startLine": 168,
        "startChar": 23,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1880494_31add4f9",
        "filename": "zuul/merger/client.py",
        "patchSetId": 10
      },
      "lineNbr": 168,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a730c9ea_49c2dc4b",
      "range": {
        "startLine": 168,
        "startChar": 23,
        "endLine": 168,
        "endChar": 26
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07cc64c6_c7841ecf",
        "filename": "zuul/merger/server.py",
        "patchSetId": 10
      },
      "lineNbr": 337,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Is corvus a model api version now :) Not sure if `JEB` is the intended long term version here or just a stand in for later replacement.",
      "range": {
        "startLine": 337,
        "startChar": 22,
        "endLine": 337,
        "endChar": 25
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88f1a82a_e99b7cd3",
        "filename": "zuul/merger/server.py",
        "patchSetId": 10
      },
      "lineNbr": 337,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "Usually I grep for these but missed this.  This was a stand-in for the current model in this change.  Will fix.",
      "parentUuid": "07cc64c6_c7841ecf",
      "range": {
        "startLine": 337,
        "startChar": 22,
        "endLine": 337,
        "endChar": 25
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea2fecdc_246d885e",
        "filename": "zuul/merger/server.py",
        "patchSetId": 10
      },
      "lineNbr": 337,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:54:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88f1a82a_e99b7cd3",
      "range": {
        "startLine": 337,
        "startChar": 22,
        "endLine": 337,
        "endChar": 25
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ffa61e7_df8a3bb1",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2333,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Small nit: I wonder if this method should be codified in the parent zkobject class. Make it more of an interface for zkobjects rather than just frozen jobs.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1db72893_d15eb4f0",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2333,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Yeah, I think we\u0027re doing this with two classes now.  But let\u0027s not in this change.",
      "parentUuid": "8ffa61e7_df8a3bb1",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dceb4552_f43b1667",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2423,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "We don\u0027t need to explicitly deserialize this data because the super().deserialize below will json.loads() them properly?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac2b9f83_1cdef882",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2423,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Correct.",
      "parentUuid": "dceb4552_f43b1667",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a7b1a56_1f613340",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2603,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Does this mean artifacts are always parented to the first change in the item? I wonder if that is worth calling out in the release notes or docs. Potentially a change of behavior that people will notice if already using cycles?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a799e38e_97dfd89b",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 2603,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "If they\u0027re using cycles with deduplication, they are already probably dealing with the fact that the artifact is associated with one arbitrary change of the cycle.\n\nHowever, I think there is an error here.  Instead of using the first change of the item, we should use the actual triggering change for that particular build.\n\nI\u0027ll make that change, and then I think the resulting behavior will be sufficiently similar to the current state (whether using dedup or not) not to warrant a release note.",
      "parentUuid": "7a7b1a56_1f613340",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44dff39a_facc1249",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 3769,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Removed only seems to be used here. Can we drop it?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05de4254_4743f9f7",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 3769,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44dff39a_facc1249",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7f97255_dcb841d8",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 4703,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Elsewhere I commented about the confusion/blurring between cycle dependencies and pipeline queue dependencies. I think data structures like this may be contributing to that since we seem to flatten the lot here.\n\nI\u0027m not sure I have any good ideas on how to make that better but want to call it out in case others have better ideas than I do.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b9bf372_7ffa641f",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 4703,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "e7f97255_dcb841d8",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ae633cb_3c5279df",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 5284,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "This function seems to be a subset of the one above. Is the only reason to include it the short circuit when finding any updates? If so maybe it should be called includesAnyConfigUpdate() to make that distinction wtih the function above more claer? This is a nit.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd5de823_6b552a6d",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 5284,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "I think it\u0027s mostly about the different output format.  I\u0027m definitely not attached to the names.",
      "parentUuid": "4ae633cb_3c5279df",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e71990d4_db46b8f4",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 5391,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Previously there was an equality check between item.change and self.change. Is any overlap acceptable (in that case the intersection is fine). If not do we need to check that one side is a subset of the other? I guess the idea is if a change is in a cycle in an item it can only be in that one item so any overlap is sufficient?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9934faa2_39dd494f",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 5391,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "I think overlap is fine but we could switch to equality here to be more conservative.",
      "parentUuid": "e71990d4_db46b8f4",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f020c03_da023950",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8223,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "This was renamed because the job doesn\u0027t become frozen until the very end of this function?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecaf467e_47cb94c4",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8223,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Yep.  It got a lot more confusing to me for some reason.  :)",
      "parentUuid": "2f020c03_da023950",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e16df44_e5340f41",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8347,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Nit: changes.",
      "range": {
        "startLine": 8347,
        "startChar": 63,
        "endLine": 8347,
        "endChar": 69
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65ee171b_64a24248",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8347,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e16df44_e5340f41",
      "range": {
        "startLine": 8347,
        "startChar": 63,
        "endLine": 8347,
        "endChar": 69
      },
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baa42c05_9202bcd9",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8372,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Nit could set this above when we first check ppc.debug. Unless extendJobGraph can side effect this value. (I don\u0027t see it doing that though).",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b2be2a0_677ca109",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8372,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa42c05_9202bcd9",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb730d31_c48672a7",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8387,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "We aren\u0027t doing a true copy and instead simply refering to it by reference. I don\u0027t think this will create issues with memory leaks, but since the comment above says copy it makes me wonder if we need a true copy to avoid modification races or conflicts?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5074977_c1ee42f6",
        "filename": "zuul/model.py",
        "patchSetId": 10
      },
      "lineNbr": 8387,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-09T00:11:08Z",
      "side": 1,
      "message": "Storing the reference is sufficient.  The layout may get __del__\u0027d but we\u0027ll keep this dict around.  It\u0027s a dict of scalars so shouldn\u0027t cause leaks.\n\n(Also, this isn\u0027t a change, just a code move).",
      "parentUuid": "bb730d31_c48672a7",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2def6058_75669d75",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1655,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Should we be short circuiting here or should we return a list that can be appended to the list of new project below where `_reenqueueGetProject()` is called?\n\nI think this code is trying to ensure that all of the projects involved in a reenqueue are still valid and by short circuiting here we\u0027re potentially not checking for invalid projects that would require different processing below.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d56aae5_66c5ce51",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1655,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "All this method needs to do is find one project object associated with the change (keep in mind that an item\u0027s specific change is passed to this method, so we\u0027re not trying to work on all the changes in the item here).  Any single project object for that change will do.  The caller handles iterating over the changes within the items it\u0027s trying to re-enqueue.  This iteration is over items ahead in the case of a foreign project.  Anyway, long story short, I think the thing you\u0027re concerned about happens in the calling method.\n\nAlso, I\u0027m about 80% sure this code is impossible to reach at this point.",
      "parentUuid": "2def6058_75669d75",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a243d53_3ea4c468",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1655,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "I see. I had missed this was for a singular input change. But I agree this should be fine since it is.",
      "parentUuid": "2d56aae5_66c5ce51",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f804f81_1ce47a16",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1699,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "Note this loop and array index may be affected by any changes made to address my comment above.",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3058d581_59ded5a5",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1699,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f804f81_1ce47a16",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3aea758b_5a9e765d",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1990,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T18:58:15Z",
      "side": 1,
      "message": "This function call feels a bit odd to me. Pipelines operate on items. Items now have multiple changes. Instead of iterating and adding changes one by one for an item why not add them all at once to better reflect the relationship to a specific item?",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56edb7ca_df5236f2",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1990,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-02-08T19:46:30Z",
      "side": 1,
      "message": "The addChange method still works one at a time, and it\u0027s probably not useful to change it since almost all of our events are for a single change.  What happens both in the case of a user uploading some changes to gerrit, as well as this case, which is a user promoting a change in a queue, is that we process the first one, it pulls in all the others as necessary, and then any subsequent changes in the cycle are just no-ops.\n\nThat is absolutely unavoidable in the typical gerrit case, so I don\u0027t think it would be that useful to do something different here in the promote case.\n\n(Now, on the other hand, we might want to start changing our tooling to operate on promoting/dequeing/etc items instead of changes, but it\u0027s not necessary now, so this change doesn\u0027t do it.)",
      "parentUuid": "3aea758b_5a9e765d",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d056886a_188cfe60",
        "filename": "zuul/scheduler.py",
        "patchSetId": 10
      },
      "lineNbr": 1990,
      "author": {
        "id": 4146
      },
      "writtenOn": "2024-02-08T22:49:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "56edb7ca_df5236f2",
      "revId": "19834ff287cf108792b2be41c4fea736d1bff95d",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}