{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f67d6ef3_4f79a9bc",
        "filename": "tests/unit/test_gerrit.py",
        "patchSetId": 32
      },
      "lineNbr": 479,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-11-24T23:11:10Z",
      "side": 1,
      "message": "I\u0027ve analyzed this locally and I\u0027m convinced it\u0027s okay and we can skip this test in the multi-scheduler case.\n\nI thought that we only ran a single fake gerrit webserver, but we actually start the fake webserver in the fake connection, and you\u0027re right that each scheduler gets a new fake connection.  Since the second fake connection/web server doesn\u0027t have the checker added (see line 481), it can\u0027t find the uuid to report.\n\nIf I add the checker to the second fake server, it works as expected, but then fails because it\u0027s actually reporting to a different webserver.  Because of this, I don\u0027t think it\u0027s worth turning my local work into a real patch.\n\nI think the real solution to this is to have a dedicated fake gerrit class with a webserver, and have the base test class set that up for each unique gerrit it sees in the configuration.  All of the fake server-side stuff should move to that class.  That would make our fake gerrit connection subclass much smaller, which will be nice.",
      "revId": "c294827ffc577a19a4614866dfd364ec3fbeb354",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "625cc6d6_928ba5d3",
        "filename": "tests/unit/test_gerrit.py",
        "patchSetId": 32
      },
      "lineNbr": 479,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-11-25T08:12:43Z",
      "side": 1,
      "message": "Thanks for investigating. So if I understand this correctly it\u0027s only a testing problem and it\u0027s OK to skip this test. I will update the change accordingly.",
      "parentUuid": "f67d6ef3_4f79a9bc",
      "revId": "c294827ffc577a19a4614866dfd364ec3fbeb354",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ef7b053_97674672",
        "filename": "tests/unit/test_gerrit.py",
        "patchSetId": 32
      },
      "lineNbr": 479,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-11-25T08:16:59Z",
      "side": 1,
      "message": "This makes me still thinking why this is working with a single scheduler. I think that the test case (self.fake_gerrit) gets a dedicated fake connection which is different from the one the first scheduler gets, but that would mean that we could still have the problem that the connection that handles the event is not aware of the check. Unless there is something that prevents the fake connection of the first scheduler to handle the event and thus ensures that the test case itself handles it.",
      "parentUuid": "625cc6d6_928ba5d3",
      "revId": "c294827ffc577a19a4614866dfd364ec3fbeb354",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e6cfae0_8907f530",
        "filename": "tests/unit/test_gitlab_driver.py",
        "patchSetId": 32
      },
      "lineNbr": 277,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-11-24T23:11:10Z",
      "side": 1,
      "message": "I think the gitlab webserver is patterned on the gerrit one, so will have a similar problem.  I think the solution should be the same for both.",
      "revId": "c294827ffc577a19a4614866dfd364ec3fbeb354",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fadb64a9_6ad7d3ab",
        "filename": "tests/unit/test_gitlab_driver.py",
        "patchSetId": 32
      },
      "lineNbr": 277,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-11-25T08:12:43Z",
      "side": 1,
      "message": "OK.",
      "parentUuid": "2e6cfae0_8907f530",
      "revId": "c294827ffc577a19a4614866dfd364ec3fbeb354",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}