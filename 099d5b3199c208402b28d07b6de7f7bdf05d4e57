{
  "comments": [
    {
      "key": {
        "uuid": "da86d52c_bf35c1dc",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 18
      },
      "lineNbr": 818,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "If we were to sync this with jhesketh\u0027s change, we might name it \"all-files-match-any\".",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_64e635b6",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 18
      },
      "lineNbr": 818,
      "author": {
        "id": 2035
      },
      "writtenOn": "2015-02-03T20:25:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da86d52c_bf35c1dc",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_9f3abdcb",
        "filename": "tests/test_change_matcher.py",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "Just so you know I\u0027m not completely a downer on unit tests, this file is really useful (exhaustively test all different ways it can be constructed).",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_df3435e0",
        "filename": "tests/test_model.py",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "This is the kind of test coverage that generally I\u0027d prefer to get through functional testing.  That is to say that the functional test ought to test that change matcher both matches something and doesn\u0027t match something else.",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_5facc5a0",
        "filename": "tests/test_model.py",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 2035
      },
      "writtenOn": "2015-02-03T20:25:23Z",
      "side": 1,
      "message": "Understood.  \n\nBefore jhesketh\u0027s initial review and recommendation of scenario testing, these tests were the only validation that skip-if was properly integrated into the Job class.  In response to your comment I updated the configuration of the scenario testing to verify that a skip-if from a metajob would be correctly applied to a job, and it wasn\u0027t!  The assignment of the job matcher in Scheduler._parseConfig was being done blindly and overriding the skip-if from the metajob.\n\nAnyway, the scenario testing obviates any need for this module and I\u0027ve removed it.",
      "parentUuid": "da86d52c_df3435e0",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_9ab3eb09",
        "filename": "tests/test_model.py",
        "patchSetId": 18
      },
      "lineNbr": 21,
      "author": {
        "id": 7069
      },
      "writtenOn": "2015-02-07T04:50:50Z",
      "side": 1,
      "message": "I disagree that the scenario testing obviates the need. At least not in full. I don\u0027t think we can ever be too careful, so if you wanted to add this back in I\u0027d support that. Scenario testing often misses things that detailed testing like these can find.",
      "parentUuid": "da86d52c_5facc5a0",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_5f21259e",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 1780,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "Is there a reason we can\u0027t do normal scenario testing?  I think that would address the concurrency problem that you solved with multiple projects.",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_5a4caa70",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 1780,
      "author": {
        "id": 2035
      },
      "writtenOn": "2015-02-03T20:25:23Z",
      "side": 1,
      "message": "I\u0027m not entirely sure what you mean by \u0027normal\u0027, but hopefully the new patchset addresses your concerns by limiting the scope of the testing to skip/no-skip and do so in separate tests.",
      "parentUuid": "da86d52c_5f21259e",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_207a0024",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 1780,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-05T22:40:13Z",
      "side": 1,
      "message": "Oh, sorry, for the record I was thinking of using the testscenarios module (sorry for being lazy with words).  But it seems that\u0027s moot in the new version of the patch.",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_7f2429af",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 1839,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "You could also solve the intra-test concurrency problem by using waitUntilSettled() within the loop.\n\nOne of the reasons zuul is functional-test heavy is because it\u0027s quite difficult to run interactively and test changes, so interactive development is generally running one of the tests.  Even though this solution may now work for this test, I think that if you ran this test in the foreground to watch the log output, it would be difficult to work with because of the internal races.  So it might be worth adding moving the wait regardless.  (If I had to debug this test, the first thing I would do is move both the wait and assert into the loop (and make the assert print the failed test info)).",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_ff2f3986",
        "filename": "zuul/change_matcher.py",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 1
      },
      "writtenOn": "2015-02-03T00:24:46Z",
      "side": 1,
      "message": "(-1) Docs say: \"Using this decorator requires that the classâ€™s metaclass is ABCMeta or is derived from it.\"\n\nIs it really worth it to use abc?  I\u0027m happy with NIE.",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_7a5ece13",
        "filename": "zuul/change_matcher.py",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 2035
      },
      "writtenOn": "2015-02-03T20:25:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da86d52c_ff2f3986",
      "revId": "099d5b3199c208402b28d07b6de7f7bdf05d4e57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}