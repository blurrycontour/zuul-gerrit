{
  "comments": [
    {
      "key": {
        "uuid": "37047a81_57c8c094",
        "filename": "zuul/model.py",
        "patchSetId": 35
      },
      "lineNbr": 2059,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "The docs for this decorator indicate that if performance of the BuildRequest comparisons matters we should implement all of the comparison methods ourselves. However, I don\u0027t expect this is the case in this code as the total number of build requests is counted in the thousands for most zuul users and comparing thousands of entities shouldn\u0027t be too slow either way.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a25539ae_1f3ccaf9",
        "filename": "zuul/zk/__init__.py",
        "patchSetId": 35
      },
      "lineNbr": 201,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "Small nit you might consider catching a json decoding error and printing the serialized string if it fails to decode. If this is a debugging aid then it may be used in cases of broken serialization.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76625ec8_cdf47eb3",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 43,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "Do we need a docs update indicating that \"default-zone\" is an invalid zone name (eg users shouldn\u0027t use this name?) and/or validate this when reading configs?",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae64889c_062aeb4d",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 43,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "This is updated in the next change, and that restriction is removed.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34ed8667_8708edf1",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 86,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "If anyone else is wondering ChildrenWatch() calls the supplied function on all children when it is first registered. According to the kazoo docs anyway.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2551f72b_fda0e80d",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 86,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "Yes, same for datawatch, and we rely on that more in a later change.\n\nIn the case of a datawatch, it avoids race conditions.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf2cba2_bced115f",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 296,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "Is there any chance a recursive delete can raise this without fully deleting all of the nodes under it? For example if two deletions race each other and one cleans up a sub tree before the other?",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8db41f21_0f62ff25",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 296,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "The kazoo recursive delete method appears robust against that: https://github.com/python-zk/kazoo/blob/master/kazoo/client.py#L1451",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b16276eb_082fd9aa",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 304,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "Is there any concern that calling the callback on a cancel event then a resume event in that order will be a problem for us? If so we should probably not iterate through this list but instead check for cancel in action then handle it else check for resume in action and handle that exclusively.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d21731ab_f562a9e4",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 304,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "The list of \"actions\" is really the list of children, so for that to be a problem, we would have had to set both the canceled and resumed flag at the same time.  That\u0027s possible.\n\nIt\u0027s not going to have an adverse effect on the executor (the cancel call will actually resume the build, and then the resume event will be a noop).  But it will cause the executor to update the status of the build request.  I don\u0027t really like that race condition, so I think we should implement your suggestion and try to avoid it.  I don\u0027t think it\u0027s a critical flaw though, so I\u0027ll tack it onto the end of the stack.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2333c667_6782044c",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 333,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "We should consider logging the entire lock path rather than just the uuid to aid operators in debugging no node found errors here.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7583a338_5589e545",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 333,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "Operators should never need to know a zookeeper path, so I\u0027d like to avoid suggesting they do by putting ZK node paths in logs.  Developers yes, but it\u0027s a predictable path.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a34b3ca_e0bb9974",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 368,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "Is it possible for the build request to exist but the lock to not exist? In that case you could hit this path and log an error when that doesn\u0027t necessarily indicate an error (instead it would just indicate that the lock has never been held).",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74682dcb_066e1112",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 368,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-29T21:37:18Z",
      "side": 1,
      "message": "I think this is a misleading message.  In fact, I do not know what would cause this error to hit; probably something pretty egregious that we can\u0027t actually handle.  I think we should remove the exception handler.\n\nRegardless, it is okay and expected for a build to exist without a lock existing, but no error is produced in that case (the kazoo Lock() will create the lock node for the uuid; it will even create the lock root).",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cdbc143_b78dab25",
        "filename": "zuul/zk/executor.py",
        "patchSetId": 35
      },
      "lineNbr": 373,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-06-29T20:52:21Z",
      "side": 1,
      "message": "See above comment.",
      "revId": "8315109d22a6068b91e46dd0b9ba334889a9e570",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    }
  ]
}