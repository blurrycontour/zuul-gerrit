{
  "comments": [
    {
      "key": {
        "uuid": "7a3c09a3_63e46bab",
        "filename": "tests/base.py",
        "patchSetId": 4
      },
      "lineNbr": 877,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-01-18T17:16:48Z",
      "side": 1,
      "message": "Crazy thought: If the test suite accidentally gets pointed at a real ZK, it could cause havoc. Perhaps FakeNodepool should be at /fakenodepool ?",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_9e28d087",
        "filename": "tests/base.py",
        "patchSetId": 4
      },
      "lineNbr": 877,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-18T17:21:20Z",
      "side": 1,
      "message": "The tests run under a fixture that sets a per-test chroot in the kazoo zookeeper driver, so there shouldn\u0027t be any leakage or interaction with production systems or even other tests.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_fd64c522",
        "filename": "tests/base.py",
        "patchSetId": 4
      },
      "lineNbr": 920,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-05T21:29:13Z",
      "side": 1,
      "message": "Should define a variable for each state rather than use strings.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_9d5d7949",
        "filename": "zuul/model.py",
        "patchSetId": 4
      },
      "lineNbr": 398,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-05T21:29:13Z",
      "side": 1,
      "message": "Need some state variables.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_63eb41b1",
        "filename": "zuul/nodepool.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-03T16:17:38Z",
      "side": 1,
      "message": "Should we add a duplicate check on request.state here to prevent an unnecessary ZK call when the callback is triggered?",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_e0a56004",
        "filename": "zuul/nodepool.py",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-03T18:48:46Z",
      "side": 1,
      "message": "Oh, nope. Nevermind my statement. The node isn\u0027t returned to the callback.",
      "parentUuid": "ba5201f7_63eb41b1",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_9d2499c5",
        "filename": "zuul/nodepool.py",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-05T21:29:13Z",
      "side": 1,
      "message": "Ditto state var.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_bdfa3d41",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-05T21:29:13Z",
      "side": 1,
      "message": "This can be done in a later review, but these states do not apply to node requests.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_0ed18e57",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 2
      },
      "writtenOn": "2017-01-16T18:00:25Z",
      "side": 1,
      "message": "fwiw, I would find the consuming code easier to read if this was _dictToJson - since it\u0027s clear at the calling site what string format that\u0027s going to turn the dict in to.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_49cb90a5",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 191,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-16T18:09:00Z",
      "side": 1,
      "message": "This is copied/synced with zk.py in nodepool (in case we end up making a third-party library, or maybe making this an external facing interface in nodepool that we import into zuul), so I\u0027d like to keep it in sync for now.  I do agree with the substance of your comment and that we could probably change it (later, in both places).",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_6ece92b5",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 2
      },
      "writtenOn": "2017-01-16T18:00:25Z",
      "side": 1,
      "message": "Same as above",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_8e7d7e1e",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 2
      },
      "writtenOn": "2017-01-16T18:00:25Z",
      "side": 1,
      "message": "This patch removes id from the NodeRequest, but then it\u0027s set here. Should this be setting node_request.uid ? Or should NodeRequest get another attribute that\u0027s for the returned request_id?",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_69ce8cb5",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-16T18:09:00Z",
      "side": 1,
      "message": "The previous model was more of a placeholder.  Now that I realize we need to keep track of the \u0027zookeeper id\u0027 of the node request, I\u0027m calling that the .id attribute to sync with what we do in nodepool.  The \"zuul unique id\" becomes .uid.  In a later change, I realize that we really should initialize .id to None, so that gets added into the model class.\n\nSo, short answer, mostly your last thing:  NodeRequest.id is the attribute for the returned request_id, and uid is now for internal zuul tracking.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_cef3069d",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 2
      },
      "writtenOn": "2017-01-16T18:00:25Z",
      "side": 1,
      "message": "Same note as above on .id",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_b291f59b",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-03T15:06:00Z",
      "side": 1,
      "message": "Do you _really_ want to re-register them on disconnect? These are ephemeral nodes, so they won\u0027t be there to watch anymore if a disconnect does happen.\n\nBut as an FYI, having already experimented with this API, you want to use the DataWatch API (which handles re-registering watches automatically). You should NOT use the \u0027watch\u0027 parameter in the get() call above. Rather, do this after the get():\n\n    dw \u003d DataWatch(client\u003dself.client, path\u003dpath, func\u003dwatcher)",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5201f7_2ff593ca",
        "filename": "zuul/zk.py",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-03T21:34:20Z",
      "side": 1,
      "message": "Good point, we don\u0027t want to re-register the watches, we want to re-submit the requests.  I\u0027m working on a change for that now.  I\u0027ll look into the DataWatch API after that (I think it will be helpful to have the use case around this a little more fleshed out.  In the change I\u0027m writing to handle disconnects, I will alter the TODO to reflect that.",
      "revId": "dce6ceac8e500cefce218b44530f2f0a0f586300",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}