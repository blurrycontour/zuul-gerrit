{
  "comments": [
    {
      "key": {
        "uuid": "9f560f44_2d18001c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 6889
      },
      "writtenOn": "2020-09-11T15:32:37Z",
      "side": 1,
      "message": "Ok, I\u0027ve did all my testing with gitlab.com via a free account. So I cannot say for enterprise version.\n\nI cannot remember why I decided to use \u0027approvals_lefts\u0027 instead of \u0027approved\u0027 field, but my test today showed me that a PR that does not require any approval then \u0027approved\u0027 is to true, and this seems good to me. If at least one approval is needed then \u0027approved\u0027 is set to false and then to true if all approval rules are satisfied.\n\nSo what about just using \u0027approved\u0027 instead of \u0027approval_left\u0027 ?",
      "revId": "17f07b1eca88c5b1ba7374926567ba5ea6b154e2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f560f44_08952a40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 25403
      },
      "writtenOn": "2020-09-11T16:11:34Z",
      "side": 1,
      "message": "\u003e Ok, I\u0027ve did all my testing with gitlab.com via a free account. So\n \u003e I cannot say for enterprise version.\n\nI have tested this patch with a \"self hosted\" GitLab (https://forge.tedomum.net/, gitlab version: 13.3.1).\n\n \u003e my test today showed me that a PR that does\n \u003e not require any approval then \u0027approved\u0027 is to true, and this seems\n \u003e good to me. If at least one approval is needed then \u0027approved\u0027 is\n \u003e set to false and then to true if all approval rules are satisfied.\n \u003e \n \u003e So what about just using \u0027approved\u0027 instead of \u0027approval_left\u0027 ?\n\n\u0027approved\u0027 being true when nobody approved a merge-request seems to me to be an unexpected/surprising behavior, even if this merge-request does not require any approval. Using \u0027approved\u0027 would require an update of the documentation related to the Zuul gitlab driver. What do you think ?",
      "parentUuid": "9f560f44_2d18001c",
      "revId": "17f07b1eca88c5b1ba7374926567ba5ea6b154e2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f560f44_e1f411f4",
        "filename": "tests/base.py",
        "patchSetId": 1
      },
      "lineNbr": 1679,
      "author": {
        "id": 6889
      },
      "writtenOn": "2020-09-16T07:58:41Z",
      "side": 1,
      "message": "I would have preferred to use a different switch mechanism. Indeed in a real use case this label is not set.\nThen I think it should be done in an other way. You could add a community_edition: Bool in FakeGitlabConnection and pass it to FakeGitlabAPIClient. Then react on it to send or not \u0027approved\u0027 instead of \u0027approvals_left\u0027. The test will set the self.fake_gitlab.community_edition \u003d True instead of the label.",
      "range": {
        "startLine": 1679,
        "startChar": 16,
        "endLine": 1679,
        "endChar": 34
      },
      "revId": "17f07b1eca88c5b1ba7374926567ba5ea6b154e2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}