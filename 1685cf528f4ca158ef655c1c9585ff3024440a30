{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bc5dc3fc_cbc2a4d6",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T16:48:40Z",
      "side": 1,
      "message": "Is it possible for Zuul to install an ansible core + limited batteries included to more closely match 2.9? Would that simplify things enough to be a possibility?",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "225a5d85_431d528d",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T17:22:18Z",
      "side": 1,
      "message": "Yes.  But then we are curating our own Ansible distribution, and we have to do the work to qualify the collections that we install.  We would have to install several to obtain the basic level of functionality we expect.\n\nEven if we don\u0027t accept this proposal, I think we should use Ansible community so that we continue to approximate what \"install ansible\" means to people.\n\nHowever, if we don\u0027t accept this proposal, we may want to consider going the other direction and say since we\u0027re not going to have a fully-functional Ansible anyway, let\u0027s reduce the functionality further and maybe install fewer collections so that we don\u0027t support everything we have now in 2.9.  That might be a win for maintainability.\n\nAnother approach to consider (especially regarding your concerns below) would be to lift the file/network access permissions from our restricted ansible and try to only focus on limiting untrusted execution.  That might further reduce the scope of work (we would still need to figure out how to override the new collections loading mechanism, but at least then we would have far fewer plugins to try to override).",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d788a13_c0c771e0",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T17:41:09Z",
      "side": 1,
      "message": "That is the good point about diverging from what people expect from Ansible.",
      "parentUuid": "225a5d85_431d528d",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abf4f1cb_f3ac212a",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 9061
      },
      "writtenOn": "2022-03-17T18:13:43Z",
      "side": 1,
      "message": "I will not speak for Zuul\u0027s ability to do that or not but it is an intended use case to be able to install just ansible-core and then cherry-pick the collections that users are interested in.\n\nThere\u0027s a galaxy requirements file that is available and kept up to date based on the collections that are included in the latest release of the ``ansible`` package from which you can remove the things you don\u0027t have a use for: https://github.com/ansible-community/ansible-build-data/blob/main/5/galaxy-requirements.yaml",
      "parentUuid": "bc5dc3fc_cbc2a4d6",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf3b2a6a_85cf19d1",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T16:48:40Z",
      "side": 1,
      "message": "It may be worth noting that the linux kernel has had several such bugs in the last ~month. I think operators would have to consider immediately shutting down Zuul to patch things like the kernel when these local privilege escalation bugs are disclosed.\n\nWe have always tried to patch quickly anyway, but the added layer of protection gives us some breathing room which has been nice.\n\nAdditionally rotating credentials is a very expensive endeavor now that executors can talk to zookeeper.\n\nThese two things combined make me wary of this change. Executors have more access than ever and linux is seeing major exploits right now.\n\nMy initial thought on this is that if the change were made OpenDev should consider not driving CD through Zuul any more. To decouple the risk of executors from the rest of the system more fully. Maybe run a secondary small zuul just for this instead with restricted access? Haven\u0027t fully thought this through.",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62c8fa41_96bcce3b",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T17:22:18Z",
      "side": 1,
      "message": "This change has two benefits: 1) it reduces the amount of holes we have to try to find and plug every time there is a new Ansible; and 2) it makes CD directly from Zuul more viable.\n\nIf we don\u0027t think that improves the CD story, then that removes that benefit and makes this much less compelling.\n\nPersonally (as I noted at the bottom) I think the current protection is so weak as to be nearly nonexistent, but I do agree it is something, and it may take someone a little longer to figure out how to run something on the executor.\n\nA determined attacker of course would find and sit on a Zuul restriction bypass until they obtained the local root exploit so they could use them simultaneously.",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea0ef24_233bdb72",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T17:41:09Z",
      "side": 1,
      "message": "Where the CD story becomes problematic for me is the exposure level in using Zuul for CD. With layers of security in theory our exposure is more limited. If we remove one layer of protection we become more exposed potentially.\n\nI think it may be worth expanding on the impact of CD on changes like this and how we can do better in general. Perhaps we can couple the ansible changes with stronger improvements in other areas to make CD more viable.",
      "parentUuid": "62c8fa41_96bcce3b",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283228f6_f46ce1e4",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-03-17T17:48:10Z",
      "side": 1,
      "message": "I agree this is a major concern, would a successful exploit get access to all the secrets known to Zuul?",
      "parentUuid": "cf3b2a6a_85cf19d1",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5eb42a84_080441eb",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T18:01:43Z",
      "side": 1,
      "message": "The original idea of Zuul v3 was simple: use your production Ansible playbooks in testing and run both directly from Zuul.  That\u0027s why Nodesets are Ansible inventory, etc.  You just swap one for the other.\n\nThe restricted Ansible environment prevents us from achieving that because an untrusted playbook can\u0027t use enough of Ansible to actually directly execute a real production playbook.  Generally this is solved by nesting Ansible.  At this point, it hardly matters what Zuul itself is running.  It\u0027s just a multi-node execution coordinator that happens to implement a subset of Ansible.\n\nSo the motivation to do this to improve the CD story is to get back to that original idea: just have Zuul run Ansible.\n\nAn OpenDev-like system could just \"run: playbooks/eavesdrop.yaml\" using the built-in ssh keys, etc, and not have to worry about anything else.  Now, OpenDev itself may still not end up doing that because of logs and a desire to run things from bridge.  But the potential is there, and anyone without OpenDev\u0027s concerns about logs might be more comfortable with it.\n\nOpenDev could certainly directly execute simple playbooks like tenant reconfiguration loading, or publishing meeting calendars, or other similar event-driven CD things where the unique requirements aren\u0027t present.\n\nIf we\u0027re inclined to accept the risk and accept this proposal, then I think that\u0027s the story.  If we are not inclined, then I think the CD story becomes \"Zuul runs a tiny subset of mostly-compatible-Ansible that you use to bootstrap whatever it is you want to use to CD, but you\u0027ll need an external node.  More or less what we have today, but you\u0027ve got me thinking that if we can\u0027t fully use Ansible then maybe we should minimize it even more and start really pushing the angle that Zuul\u0027s Ansible is only there to bootstrap stuff.",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5eec9b1_0ceaa702",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T16:48:40Z",
      "side": 1,
      "message": "I think it was GKE that basically gives you full cluster root if you have access to this by default. Might be worth explicitly calling out known cases where this is a problem?",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f961b26f_3df9ad03",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T17:22:18Z",
      "side": 1,
      "message": "Yeah, wouldn\u0027t hurt to list specific examples.",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cc5e343_fcd806cc",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T16:48:40Z",
      "side": 1,
      "message": "Thinking about this from a defense in depth perspective are we able to leverage bwrap to restrict activity a bit more? For example could we restrict network connectivity to ssh/winrm/etc ports in untrusted contexts? Maybe limit system capabilites if we have room there as well?\n\nMostly thinking out loud here as I don\u0027t think we ever wanted to rely on any single defense mechanism and instead layer them to ensure as much safety as possible.\n\nMaybe Selinux or apparmor or similar would be useful here too?",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a3b2eb3_22b27607",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T17:22:18Z",
      "side": 1,
      "message": "I think there are more things we can do (and maybe that operators could do independent of us), but I think that most of the network and filesystem risks are actively manageable right now.  Even in most corporate environments, I don\u0027t think being able to winrm from the zuul executor is a big concern.  It seems like the local root exploit is the most concerning to you, so if we want to keep the \"no-untrusted-exec\" requirement, I don\u0027t think this is feasible.\n\n(Also, FWIW, I think we were happy to rely on only the restricted Ansible when we started v3 development; bwrap was a nice extra benefit, and then we realized it\u0027s actually doing most of the work.)",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef846761_f165a784",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-03-17T17:41:09Z",
      "side": 1,
      "message": "Yes, I think the major concerns I\u0027ve got are a privilege escalation on the executor and possibly a container escape given executor\u0027s zk access.\n\nThinking about zk access a bit I wonder if we can/should run the bwrap processes as a secondary user. And possibly something like selinux/apparmor can restrict file access further.\n\nI agree that existing deployments could probably do more alongside Zuul, but not needing to do that lifting separately in every deployment and instead share it via common zuul expectations and deployment tooling would go a long way I think.",
      "parentUuid": "0a3b2eb3_22b27607",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0088b50_b48487e9",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-03-17T17:48:10Z",
      "side": 1,
      "message": "It is likely impossible for a container to change it\u0027s context after it started, so that may not be useful for executor already running a container. Also this may be difficult to setup as it depends a lot on the host system configuration.",
      "parentUuid": "4cc5e343_fcd806cc",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "993190fb_8e857288",
        "filename": "doc/source/developer/specs/unrestricted-ansible.rst",
        "patchSetId": 2
      },
      "lineNbr": 199,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-03-17T18:01:43Z",
      "side": 1,
      "message": "I worry that assuming selinux/apparmor in Zuul assumes too much about deploymont.  We could run bwrap as a secondary user, as long as it doesn\u0027t entail giving the executor more privileges.",
      "revId": "1685cf528f4ca158ef655c1c9585ff3024440a30",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}