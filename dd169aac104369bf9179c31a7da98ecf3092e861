{
  "comments": [
    {
      "key": {
        "uuid": "5a3905b3_497c29b5",
        "filename": "tests/base.py",
        "patchSetId": 4
      },
      "lineNbr": 1754,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-01-23T18:19:24Z",
      "side": 1,
      "message": "Looks like you\u0027re trying to pre-make the directory, and maybe accepting an error where the directory already exists? The OSError seems to catch a lot of things though, should it be narrowed down, or just allowed to fail elsewhere if say permissions are not right?",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_124325b3",
        "filename": "tests/base.py",
        "patchSetId": 4
      },
      "lineNbr": 1754,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-23T20:54:42Z",
      "side": 1,
      "message": "Agreed.  I would have done something better if this weren\u0027t just for tests (where a real error is likely to make something blow up anyway).",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_182fd1a1",
        "filename": "tests/fixtures/config/ansible/git/org_project/.zuul.yaml",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 4162
      },
      "writtenOn": "2017-01-23T17:09:17Z",
      "side": 1,
      "message": "red blob",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_c300ec36",
        "filename": "tests/fixtures/config/ansible/git/org_project/.zuul.yaml",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-23T23:05:10Z",
      "side": 1,
      "message": "Fixed in next change.",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_d1dc8475",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 2
      },
      "writtenOn": "2017-01-21T10:34:06Z",
      "side": 1,
      "message": "And should likely support .yaml and .yml since ansible community folks seem to like .yml and we tend to prefer .yaml in Infra land.",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_86a39bff",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-21T15:42:53Z",
      "side": 1,
      "message": "Agreed -- I think what we probably want to do to satisfy both of these todos is to look for jobname.yaml or jobname.yml or raise an error, does that sound right?",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_64774ca0",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-01-23T18:19:24Z",
      "side": 1,
      "message": "Yeah that sounds right. A find first with an eventual error.",
      "parentUuid": "5a3905b3_86a39bff",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_c47e4069",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-01-23T18:19:24Z",
      "side": 1,
      "message": "Why plural here? There are multiple plays in a playbook. More than one playbook would be more than one file, or are you anticipating that the base playbook will import other playbooks?",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_323e6128",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-23T20:54:42Z",
      "side": 1,
      "message": "I\u0027m anticipating that a given repo may have multiple playbooks.  In particular, our config repos (eg \"project-config\") may have tens or hundreds of playbooks each for various jobs.  A given project repo (eg \"shade\") may even have a handful of playbooks for some custom jobs.\n\nSo this accounts for:\n  openstack-infra/project-config/playbooks/python27.yaml\n  openstack-infra/project-config/playbooks/python35.yaml\n  openstack-infra/project-config/playbooks/flake8.yaml\netc.",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_48817a8e",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-01-23T21:57:01Z",
      "side": 1,
      "message": "OH! I missed that this was a /directory/ name, and not a filename. It\u0027s using the directory + the job name to find a playbook within. Interesting.\n\nThis then requires the pipeline to have defined job names at least, and leaves it up to the project to define the meaning of the job. Is there going to be a model where the repo itself defines the jobs themselves?",
      "parentUuid": "5a3905b3_323e6128",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_e3fb2845",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-23T23:05:10Z",
      "side": 1,
      "message": "Ah yep.  Currently the model is that any time a job is defined, zuul expects to find a playbook in the playbooks/ directory of the same repo in which it is defined.\n\nSo yes, you definitely can define a job and its playbook in a project repo, but no, you can\u0027t define a job and have the playbook for it in a different repo.  *Roles* however, can be in other repos (a later change will implement that).",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_4566b72a",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-01-24T05:43:32Z",
      "side": 1,
      "message": "That\u0027s... not quite what I was asking.\n\nWhat it looks like is that in order for Zuul to do \"something\" with a repo, a job has to be defined within the zuul configuration. If a job is defined, then zuul will look within the repo for a playbook that matches. I\u0027m assuming that means that a repo owner has to tell the zuul maintainer \"Hey, I want to run jobs X, Y, and Z.\" Zuul maintainer configures zuul to run those jobs for check or gate or whatever.\n\nWhat I\u0027m curious about, is if there is a way to bypass that zuul configuration step, so that the repo owner can define the jobs they want ran (and thus the playbooks looked for) within their own repo. End user decides they want to add job Q, they do it directly in their own repo (as a change request even!) along with the playbook to match. No interaction with Zuul admins, work just gets done.",
      "parentUuid": "5a3905b3_e3fb2845",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_951a6d7b",
        "filename": "zuul/configloader.py",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-24T17:18:46Z",
      "side": 1,
      "message": "Oh, absolutely.  That\u0027s described in paragraph 3 of this section: http://specs.openstack.org/openstack-infra/infra-specs/specs/zuulv3.html#tenants (and referenced a few more times in the spec as well).  Here are two tests that show both in-repo config as well as adding a new job in a change (and having it self-test): http://git.openstack.org/cgit/openstack-infra/zuul/tree/tests/test_v3.py?h\u003dfeature/zuulv3#n70\n\nSo, back to this change -- that shows how the definition of a job can be in almost any repo, and so this code expects to find the playbook for that job in the same repo in which it is defined (whether it\u0027s a config repo or a project repo).",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_280a578a",
        "filename": "zuul/merger/merger.py",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-01-24T10:03:19Z",
      "side": 1,
      "message": "Shouldn\u0027t this return False or something if the branch failed to check out?",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 12
      },
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_7529819a",
        "filename": "zuul/merger/merger.py",
        "patchSetId": 4
      },
      "lineNbr": 269,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-24T17:18:46Z",
      "side": 1,
      "message": "Oh, you\u0027re right.  I was thinking this needed to follow the \"checkout branch if exists otherwise master\" pattern, but we\u0027re passing the branch where we expect the playbook to be (and any decisions about that should probably have been made ahead of time by the scheduler rather than leaving the launcher to figure it out).  So this probably should just check out the branch or raise an exception.",
      "revId": "dd169aac104369bf9179c31a7da98ecf3092e861",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}