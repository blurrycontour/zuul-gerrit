{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_d70ee531",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "Ideally a warning should be logged when require-approval is used.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_4f9dbd65",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 421,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "I completely agree. Any objection to adding it in a follow-on change?",
      "parentUuid": "9ad9bd40_d70ee531",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cb6806bd",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 441,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-02T23:41:36Z",
      "side": 1,
      "message": "establishes",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_5703b50c",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 447,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "So I understand this is what gerrit calls it, but would it make more sense for this section to be named \"comment\" or something clearer?",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_af8f2929",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 447,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "Maybe, though this is also consistent with the terminology zuul has been using up to now. And really, I\u0027m not sure \"comment\" is any less confusing of a name for it anyway.",
      "parentUuid": "9ad9bd40_5703b50c",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_d73505dc",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "It\u0027s not clear here that approval is a list.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cf80edf9",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "Agreed, this should mention it\u0027s a list type, for clarity.",
      "parentUuid": "9ad9bd40_d73505dc",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_770a7922",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 473,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "(nit) I\u0027m not a big fan of \"any other field\" type validation. Perhaps given the new format of comments in gerrit we could have something like: \"category: verfieid+1\"",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cf81cdc4",
        "filename": "doc/source/zuul.rst",
        "patchSetId": 2
      },
      "lineNbr": 473,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "I agree it makes it easier for configuration errors to go unnoticed, and also for named parameter conflicts to arise later between existing configuration and new features, however this is the construct used previously under the former name so keeping it similar makes porting existing configuration files easier.\n\nPerhaps a separate patch to deprecate unrecognized names here in favor of a separate category key would be in order?",
      "parentUuid": "9ad9bd40_770a7922",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_17304de7",
        "filename": "tests/fixtures/layout-pipeline-requirements.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "Won\u0027t this make it impossible to ever run a check since this won\u0027t be satisfied until a check has been run?",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cfb46d84",
        "filename": "tests/fixtures/layout-pipeline-requirements.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "I took the examples in this file to be somewhat contrived and not necessarily representative of a real-world configuration. Perhaps they can be improved, but I think they at least exercise the parameters we want tested for now.",
      "parentUuid": "9ad9bd40_17304de7",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_870161b1",
        "filename": "tests/fixtures/layout-pipeline-requirements.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-05T23:14:33Z",
      "side": 1,
      "message": "Actually I\u0027m kind of concerned here. I think the fact that the tests pass with this file shows that the purpose isn\u0027t being exercised correctly. Unless I\u0027m misreading the file it looks like it is impossible for a check job to launch. I think that we need to have every comment added as a gerritEvent rather than just the comments we /expect/ to trigger anything.",
      "parentUuid": "9ad9bd40_cfb46d84",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_7721999e",
        "filename": "tests/fixtures/layout-pipeline-requirements.yaml",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "I think you need a \"- approved: 1\" requirement here (see below)",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_572ad57e",
        "filename": "tests/fixtures/layout-pipeline-requirements.yaml",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "I think this will trigger the gate as soon as the check leaves a +1 even if no approved+1\u0027s exist.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_f71da967",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 2
      },
      "lineNbr": 1840,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "It\u0027d be good to also test the case where, for some reason, you want jobs triggered on closed changes.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_0fb2d593",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 2
      },
      "lineNbr": 1840,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "Agreed, though that could also be added in a follow-on patch.",
      "parentUuid": "9ad9bd40_f71da967",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_0725515b",
        "filename": "tests/test_scheduler.py",
        "patchSetId": 2
      },
      "lineNbr": 2822,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-05T23:14:33Z",
      "side": 1,
      "message": "All of these changes should be added as events to fake_gerrit\n\neg self.fake_gerrit.addEvent(A.addApproval(\u0027CRVW\u0027, 2))",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_970d3d3a",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-03T09:37:25Z",
      "side": 1,
      "message": "should we make this not camelCase in line with the above method?",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cf246d62",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T15:26:51Z",
      "side": 1,
      "message": "Looking through other files in this project, a random assortment of camelCase and under_score names are used. This looks consistently inconsistent to me, so I\u0027m not sure there\u0027s much benefit to changing it.",
      "parentUuid": "9ad9bd40_970d3d3a",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_8718811f",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 7069
      },
      "writtenOn": "2014-05-05T23:14:33Z",
      "side": 1,
      "message": "It appears camelCase is used in classes, but outside here could be lowercase.",
      "parentUuid": "9ad9bd40_cf246d62",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_d83fd185",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 1167,
      "author": {
        "id": 4146
      },
      "writtenOn": "2014-05-05T16:52:55Z",
      "side": 1,
      "message": "Should the conditions here be a stronger equality check rather than a substring check?\n\nThis applies to the 2 checks below as well.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_e3b22a05",
        "filename": "zuul/model.py",
        "patchSetId": 2
      },
      "lineNbr": 1167,
      "author": {
        "id": 4146
      },
      "writtenOn": "2014-05-05T17:28:53Z",
      "side": 1,
      "message": "Ignore this comment. This is actually checking list membership not substr in str.",
      "parentUuid": "9ad9bd40_d83fd185",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_78a88577",
        "filename": "zuul/scheduler.py",
        "patchSetId": 2
      },
      "lineNbr": 1111,
      "author": {
        "id": 4146
      },
      "writtenOn": "2014-05-05T16:52:55Z",
      "side": 1,
      "message": "isChangeAlreadyInQueue is checked twice. Is that because enqueue changes ahead may enqueue this change? Perhpas we should do some reordering here to make this less repetitive. But this isn\u0027t related to the change under review.",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_e3e5cadc",
        "filename": "zuul/scheduler.py",
        "patchSetId": 2
      },
      "lineNbr": 1111,
      "author": {
        "id": 5263
      },
      "writtenOn": "2014-05-05T17:35:41Z",
      "side": 1,
      "message": "I agree this looks redundant (maybe cut/paste cruft from an earlier refactor?). I don\u0027t see anything in isChangeReadyToBeEnqueued() which would modify the result of isChangeAlreadyInQueue() between the first and second time it\u0027s called, so one of the invocations can probably be removed.",
      "parentUuid": "9ad9bd40_78a88577",
      "revId": "11041d2130aad985dabe4773ca171a1f8a62dd32",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}