{
  "comments": [
    {
      "key": {
        "uuid": "1f493fa4_9881fb92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 9311
      },
      "writtenOn": "2020-04-25T12:05:15Z",
      "side": 1,
      "message": "I guess the builds are performed whenever the previous run failed, but should this be configurable? For example:\n\n * Change A updates zookeeper image for TLS support\n * Change B updates zuul deployment to setup TLS\n\nRunning B deployment without a successful A deployment might results in an unstable result.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 29
      },
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_8eafc228",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1
      },
      "writtenOn": "2020-04-28T14:39:48Z",
      "side": 1,
      "message": "That would be unfortunate, but I don\u0027t think it\u0027s something we can address in this manager (I don\u0027t think we\u0027re going to want to un-merge a change).  I could see a deployer setting a flag though to stop further processing.  That could be done on an external system, or we could expose that in Zuul to allow the pipeline to be disabled.  But let\u0027s leave that for a further enhancement.",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_871fa559",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 9311
      },
      "writtenOn": "2020-04-28T15:36:36Z",
      "side": 1,
      "message": "With regards to adding a flag to customize how `serial` behave in case of failure, then perhaps we could add a flag to customize how `supercedent` behave when there are running build and make it behave like the proposed `serial` manager. I don\u0027t mind either way though.",
      "parentUuid": "1f493fa4_8eafc228",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_b8667728",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 9311
      },
      "writtenOn": "2020-04-25T12:05:15Z",
      "side": 1,
      "message": "How is the sequence enforced? Could this be affected by out-of-order event from the review system? And if so, shouldn\u0027t the manager ensure that the build order match the change git reference order?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 47
      },
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_eea80621",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1
      },
      "writtenOn": "2020-04-28T14:39:48Z",
      "side": 1,
      "message": "It\u0027s the order of events.  They won\u0027t be out of order with an event-triggered system like gerrit stream-events or github, but could happen with polling (like gerrit checks).  Given that we want this to be a change-based pipeline, I\u0027m not sure the pipeline is well-placed to determine the order in the git repo.  It might be best for us to try to make sure the drivers report events in the correct order.",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_25740999",
        "filename": "doc/source/reference/pipeline_def.rst",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 9311
      },
      "writtenOn": "2020-04-24T19:14:53Z",
      "side": 1,
      "message": "Would it be correct to say that `serial` is identical to `supercedent` without the auto prunning of already enqueued items?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 115,
        "endChar": 14
      },
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_afcab369",
        "filename": "doc/source/reference/pipeline_def.rst",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1
      },
      "writtenOn": "2020-04-24T23:00:33Z",
      "side": 1,
      "message": "Yes, I wasn\u0027t sure which approach would be better.  But if me say that, we may want to reorder this to appear below.",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_ca81f291",
        "filename": "zuul/manager/supercedent.py",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 22348
      },
      "writtenOn": "2020-04-24T19:04:45Z",
      "side": 1,
      "message": "linters: F401 \u0027zuul.model\u0027 imported but unused",
      "tag": "autogenerated:zuul:check",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_aa7c66b5",
        "filename": "zuul/manager/supercedent.py",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 22348
      },
      "writtenOn": "2020-04-24T19:04:45Z",
      "side": 1,
      "message": "linters: F401 \u0027zuul.lib.logutil.get_annotated_logger\u0027 imported but unused",
      "tag": "autogenerated:zuul:check",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_ea4f8e8f",
        "filename": "zuul/manager/supercedent.py",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 22348
      },
      "writtenOn": "2020-04-24T19:04:45Z",
      "side": 1,
      "message": "linters: F401 \u0027zuul.manager.DynamicChangeQueueContextManager\u0027 imported but unused",
      "tag": "autogenerated:zuul:check",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f493fa4_0a4d9a99",
        "filename": "zuul/manager/supercedent.py",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 22348
      },
      "writtenOn": "2020-04-24T19:04:45Z",
      "side": 1,
      "message": "linters: F401 \u0027zuul.manager.PipelineManager\u0027 imported but unused",
      "tag": "autogenerated:zuul:check",
      "revId": "49db97327be78df052127487a061dca6f7cfb58b",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}