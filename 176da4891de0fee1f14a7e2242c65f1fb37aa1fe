{
  "comments": [
    {
      "key": {
        "uuid": "b18f52e1_a38e6b52",
        "filename": "zuul/scheduler.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-09T14:55:17Z",
      "side": 1,
      "message": "Oh I just saw this.  I don\u0027t think we should import \"locked\" as a bare word.  Let\u0027s do:\n\nimport zuul.zk.locks as zuul_locks\n\nthen use with \"zuul_locks.locked\"\n\nAlso, out of curiosity, why not: \"with tenant_write_lock(blocking\u003dFalse)\" and avoid the \"locked\" method?",
      "revId": "176da4891de0fee1f14a7e2242c65f1fb37aa1fe",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8394f4c6_0b002605",
        "filename": "zuul/scheduler.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-07-12T06:57:11Z",
      "side": 1,
      "message": "Similar to threading.Lock the locks will just return True/False indicating whether they\u0027ve been successfully acquired or not. The locked() ctx manager will throw an exception in case the lock can\u0027t be acquired. This way we don\u0027t have to check the return value every time.\n\nOr did you mean making e.g. tenant_write_lock a context manager that\u0027s performing the checks internally?",
      "parentUuid": "b18f52e1_a38e6b52",
      "revId": "176da4891de0fee1f14a7e2242c65f1fb37aa1fe",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af704ede_19f3e561",
        "filename": "zuul/scheduler.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-13T17:50:41Z",
      "side": 1,
      "message": "Yep, the second thing -- making it a context manager.  Is there any purpose to instantiating a tenant_write_lock without locking it?  I think the answer is no, and all the uses in this patch at least would be simpler with that construction.",
      "revId": "176da4891de0fee1f14a7e2242c65f1fb37aa1fe",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "294e1ce3_529d4cfd",
        "filename": "zuul/scheduler.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-13T21:07:16Z",
      "side": 1,
      "message": "Also, since I was just looking at this in the other change, we alredy have this in the scheduler:\n\n  with self.unparsed_config_cache.writeLock(project_name):\n\nThat reads very well, and I think it makes sense to continue that pattern.",
      "revId": "176da4891de0fee1f14a7e2242c65f1fb37aa1fe",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b7043bd_ea218113",
        "filename": "zuul/scheduler.py",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-07-14T06:27:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "294e1ce3_529d4cfd",
      "revId": "176da4891de0fee1f14a7e2242c65f1fb37aa1fe",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}