{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a82d096f_a6f83c3f",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Nit: \"analysis\"",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82681fb4_87532264",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T20:56:44Z",
      "side": 1,
      "message": "I should really turn on flyspell.",
      "parentUuid": "a82d096f_a6f83c3f",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd4ef1c6_84224376",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-08-02T13:28:19Z",
      "side": 1,
      "message": "Could the existing logging infrastructure be replaced by a console exporter? That is how the tracing library works in Rust, and it\u0027s quite useful because the same message are used for both console output and for opentelemetry service like jaeger.\n\nOtherwise, isn\u0027t this spec going to duplicate the existing work done on logging?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ff22820_9db506e9",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T14:59:58Z",
      "side": 1,
      "message": "This spec says that we will only use OpenTelemetry for emitting spans, not logs; we\u0027ll continue to use the existing python logging framework for that.  I definitely don\u0027t want to duplicate log infrastructure.\n\n(It\u0027s perfectly fine to only emit spans with Open Telemetry, and ignore the logs (and metrics) it supports.)",
      "parentUuid": "bd4ef1c6_84224376",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e93b10e_565644c5",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-08-02T23:31:59Z",
      "side": 1,
      "message": "What would be missing from the span that only appears in logs? I understand we don\u0027t want to trace low level debug messages, but shouldn\u0027t most of the important logs be part of the trace?",
      "parentUuid": "0ff22820_9db506e9",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "788f0bf1_bbcc07a8",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-03T00:49:07Z",
      "side": 1,
      "message": "OpenTelemetry describes a system for exporting three types of data: traces, metrics, logs.  This spec only proposes that we use the OpenTelemetry protocol to export spans, not log messages or metrics (since we already have infrastructure for the others).\n\nOpenTelemetry spans can also have event information (which can look a little bit like a log entry from a data structure point of view, but might be rendered visually as a span with no duration).  We can associate some events with spans but we shouldn\u0027t over-use that (See the \"Events and Exceptions\" section in this spec).\n\nI do think a lot of the interesting information in logs will appear in spans (request ids, etc), but it will be in a different form, so I don\u0027t think there needs to be overlap with logs.  If we say that, for example, the beginning and ending of a merge request span is redundant with the existing log entries, we\u0027re probably talking about 10-20 log invocations that would be redundant with spans out of the 1400 log invocations Zuul currently has.\n\nIt is possible that we could decide that using OpenTelemetry to export log entries instead of the python logging library, however, there are many different ways people are configuring logging right now (console, file, elasticsearch, splunk, etc) all of which we would need to continue to support, preferably without requiring any additional tooling.  I think it would be best to get some experience with OpenTelemetry for tracing before we decide to ask it to do more.",
      "parentUuid": "7e93b10e_565644c5",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c987b5b9_83961289",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-08-03T12:16:45Z",
      "side": 1,
      "message": "Thank you for the details, that makes sense to me. I hope we\u0027ll be able to consolidate telemetry and logging in the future, and starting with span sounds great.",
      "parentUuid": "788f0bf1_bbcc07a8",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2e819a6_0b1ee47a",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Nit: \"metadata\"",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "203b029e_a64bbd63",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Nit: elswhere you capitalize as \"IDs\"",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f33e20ec_d697fb4c",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Was this meant to be underlined?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88344272_d82f1e70",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T20:56:44Z",
      "side": 1,
      "message": "This is the next level of topic under Spans.  So the Tree is:\n\nTracing\n+ Proposed Solution\n+ + Spans\n+ + + Event Ingestion\n+ + + Tenant Event Processing\n...",
      "parentUuid": "f33e20ec_d697fb4c",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80f60c04_d0d5dcd8",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "And this?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8724b949_923e11f0",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Is the plan for node requests to be represented here as well (at least the scheduler-side of issuing the request and then eventually receiving an assignment or not, and any reissuing)? At a minimum, being able to suss out which launcher(s) handled a request without needing to dig in the scheduler log would be nice, though if the traces also cover nodepool itself this could be even more useful.",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3886e3cc_2cb7c062",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T20:56:44Z",
      "side": 1,
      "message": "Yes for the scheduler view of a node request as you describe.  I believe we should be able to associate the launcher that fulfilled the request (also, if we want, all the launchers that declined it) with the span.\n\nWe could also forward the span information to Nodepool so that it can open up its own spans, but I\u0027m not anticipating that right now in this spec.  At least partly because I have another spec I\u0027m working on that would fold Nodepool into Zuul.\n\nIf we retain Nodepool as a separate app, I expect us to extend tracing support to it eventually.  If we fold it into Zuul, we\u0027ll probably do the same.\n\nBut to keep things simple for now, let\u0027s just say this covers the \"scheduler view\" of a node request.",
      "parentUuid": "8724b949_923e11f0",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a2fe777_9fdc452a",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-08-05T17:02:29Z",
      "side": 1,
      "message": "Does this mean any incomplete spans (system crash or extremely slow processing) won\u0027t be visible?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a51ad8d3_cb744634",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-05T17:10:32Z",
      "side": 1,
      "message": "Yes, basically the protocol just sends everything at the end of a span.  So if we crash before the end of a span, it won\u0027t make it to the storage system.\n\nHowever, for us, that\u0027s only true for a span that starts and ends on the same system (imagine a merge job).  Since some of our spans start and end on different systems (imagine a queue item), those would be crash-resilient since we\u0027re storing data in ZK for them.\n\nChild spans with no parent (parent crashes but child doesn\u0027t) will be visible (they show up with warning messages in jaeger).",
      "parentUuid": "6a2fe777_9fdc452a",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa0249a1_4213bcf3",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 27582
      },
      "writtenOn": "2022-07-26T14:03:42Z",
      "side": 1,
      "message": "Is this also true for the trace ID? Usually the trace ID is what connects all the spans and you can definitely propagate the trace context (which has the trace ID) and create a new span from that.\n\nI think a missing piece is that you can (de-)serialize a span, which we probably need.",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "388389fb_3f3f7607",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-07-26T14:25:20Z",
      "side": 1,
      "message": "Given a root span for a trace, you can serialize/deserialize its trace context so that other systems can make child traces from it.  But the deserialization doesn\u0027t give you the root span, it gives you the trace context for the root span, which is only useful for creating child spans, not for emitting the root span itself.  The issue is that our root spans start on one host and end on another, and there isn\u0027t a way to serialize the span itself.  Here\u0027s what we want to do:\n\n1) Start root span on scheduler A\n2) Send trace context to merger\n3) Merger emits child span\n4) End root span on scheduler B and emit root span\n\nThat would work if we only had one scheduler, because the root span could be kept in memory.  But with multiple schedulers, and no way to serialize/deserialize the root span, we can\u0027t transfer the root span from step 1 to step 4.  So we need to augment the SDK somehow.\n\nWe could implement span serialization ourselves, but we don\u0027t actually need to do that, all we really need is the trace id, root span id, and timestamp of when the root span started.  I guess it is a form of serialization, but it\u0027s verify lightweight (we will only store that info, and not everything else like the list of errors, logs, events, etc).",
      "parentUuid": "aa0249a1_4213bcf3",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fba1cc24_d5b5cf4f",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 27582
      },
      "writtenOn": "2022-07-26T14:07:59Z",
      "side": 1,
      "message": "Maybe something else worth exploring is how we want to configure this. When I wrote the initial prototype there was quite some config necessary depending on which exporter was used. But maybe that\u0027s a non-issue if we only support the OLTP exporter.",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "862d45be_a63b89d4",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 201,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-07-26T14:25:20Z",
      "side": 1,
      "message": "Yeah, with only the OLTP exporter, it\u0027s a pretty small set of config options (just what you\u0027d expect: host, port, maybe protocol).  I don\u0027t see us needing more than an ini section with a few options.",
      "parentUuid": "fba1cc24_d5b5cf4f",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d813751_932c8d0f",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 5263
      },
      "writtenOn": "2022-08-02T16:02:38Z",
      "side": 1,
      "message": "Would this be segmented by tenant, in order to accommodate tenant-specific access controls and avoid leaking information about one to users who have access to another?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce9c893e_f03e737e",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T20:56:44Z",
      "side": 1,
      "message": "We can include the metadata about the tenant so that anyone with tooling capable of acting on that has the information, but I\u0027m unaware of the ability of any systems that present tracing data to limit it like that (maybe Kibana could?).  That\u0027s probably a good caveat to include if we add any deployment suggestions.",
      "parentUuid": "2d813751_932c8d0f",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ae8f83_1bd257d0",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 4146
      },
      "writtenOn": "2022-08-05T17:02:29Z",
      "side": 1,
      "message": "Does this also affect how we package zuul? I\u0027m not sure PBR is used with any C compilation steps currently, but I think that would be necessary to build our protobuf definitions? Or are the sufficiently abstract that the existing libs define and build them and we just shove data into them?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "534bcb5f_33fd488b",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 295,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-05T17:10:32Z",
      "side": 1,
      "message": "That should be included in the packages we depend on (ie, we won\u0027t need any custom protobuf stuff for zuul, only what\u0027s in the opentelemetry package).  So if that\u0027s already in a wheel, then we shouldn\u0027t notice it.  But absent a wheel, we might be performing a build step for opentelementry?  I\u0027m not sure about this, I didn\u0027t look too closely.",
      "parentUuid": "00ae8f83_1bd257d0",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39d8a092_7e0a44de",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 9311
      },
      "writtenOn": "2022-08-02T13:28:19Z",
      "side": 1,
      "message": "It seems like opentelemetry-python metrics are compatible with prometheus client, and perhaps it would be preferable to migrate the existing gauge to use the same object for both use-case?",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3efdf30_6180a9f5",
        "filename": "doc/source/developer/specs/tracing.rst",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1
      },
      "writtenOn": "2022-08-02T20:56:44Z",
      "side": 1,
      "message": "I agree there may be an opportunity for future consolidation.  But I don\u0027t want to encode that in this spec so that we keep all the functions separate for the moment.",
      "parentUuid": "39d8a092_7e0a44de",
      "revId": "30c046842459891d03654d6ceeaa46fa3f27bd57",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}