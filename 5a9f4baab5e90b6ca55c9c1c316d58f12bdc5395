{
  "comments": [
    {
      "key": {
        "uuid": "69df490b_588e6202",
        "filename": "zuul/lib/yamlutil.py",
        "patchSetId": 11
      },
      "lineNbr": 160,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-12T22:12:48Z",
      "side": 1,
      "message": "ignore_aliases will pull from the positional args list, not the keyword args list, so this is not equivalent to my suggestion.  \n\nYou could put it between *args and **kwargs.  I\u0027m not a fan of that, and we haven\u0027t done that anywhere else -- mostly because the whole \"args, kwargs\" pattern is so well set.\n\nOr you could use kwargs.pop, which I think is pretty clear.",
      "revId": "5a9f4baab5e90b6ca55c9c1c316d58f12bdc5395",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88123915_3577b97a",
        "filename": "zuul/lib/yamlutil.py",
        "patchSetId": 11
      },
      "lineNbr": 160,
      "author": {
        "id": 33134
      },
      "writtenOn": "2021-08-13T06:42:06Z",
      "side": 1,
      "message": "I think the main point of your suggestion is to define explicitly the class AnsibleUnsafeDumperWithoutAliases instead of dynamically adding the ignore_aliases.\n\nWhy shouldn\u0027t we put ignore_aliases parameter (with default value) in positional list?",
      "parentUuid": "69df490b_588e6202",
      "revId": "5a9f4baab5e90b6ca55c9c1c316d58f12bdc5395",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a46f194_b47f75ef",
        "filename": "zuul/lib/yamlutil.py",
        "patchSetId": 11
      },
      "lineNbr": 160,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-16T23:05:10Z",
      "side": 1,
      "message": "As written, the calling convention for this method is very unclear.  ignore_aliases is a required argument if any further positional arguments without default values are going to be supplied (and since we accept them, we should assume they may be).\n\nansible_unsafe_dump(inventory, ignore_aliases\u003dTrue) is valid\nansible_unsafe_dump(inventory, foo, ignore_aliases\u003dTrue) is invalid\n\nThat\u0027s very confusing.  Let\u0027s do something more straightforward.  Here are the choices I think would be okay (with the most preferable first):\n\n1) kwargs.pop() -- it is simple and doesn\u0027t rely on any special understanding of the function signature\n2) (data, *args, ignore_aliases\u003dFalse, **kwargs) -- behaves the same way, but maintainers may blink a few times at seeing *args and *kwargs separated like that.\n3) (data, ignore_aliases, *args, **kwargs) -- the positional equivalent of #2.  This breaks compatibility with the similar safe_dump methods, but is at least explicit.",
      "revId": "5a9f4baab5e90b6ca55c9c1c316d58f12bdc5395",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}