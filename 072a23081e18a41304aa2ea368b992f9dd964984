{
  "comments": [
    {
      "key": {
        "uuid": "487d3b5e_6984cd6d",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "nit: I\u0027d prefer if we could keep some kind of import order (like you usually do in python as well) and keep the classes/constants/names per import sorted alphabetically. In my changes I did something like (the comments are just here for explanation:\n\n# base imports\nimport React from \u0027react\u0027\nimport PropTypes from \u0027prop-types\u0027\nimport { connect } from \u0027react-redux\u0027\n\n# patternfly imports (first core, then everything else like icons, table, ...)\n...\n\n# other third party imports (like moment.js)\n...\n\n# local imports (everything that is referenced by a (relative) path)\n\nMaybe it would be also worth to write a small style guide for this. I know that the zuul project doesn\u0027t want to be too restrictive, but I find that this is extremely helpful - especially in JavaScript, where you usually need some time to get used to the code ðŸ˜„ .",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41e216b0_8eac6347",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 15,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "487d3b5e_6984cd6d",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9388c19_a815f62f",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 43,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "Just as a general note: I\u0027d prefer to use functional components over class based components as they come with much less boilerplate code and IMHO most of their parts are easier to read and understand (especially the usage of states and props). I don\u0027t think we should update all the components in this patch as this is now open for quite some time, but if somebody wants to create new components in the future I\u0027d be glad if those are functional components ðŸ˜Š",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b7e38a_21b00f50",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 43,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-08-02T13:17:27Z",
      "side": 1,
      "message": "The rest of the web ui uses classes.  We should maintain consistency.  It\u0027s much harder for part-time JS programmers to deal with both at the same time.  If we want to change, we should discuss changing everything.\nPlease do not change this patch or stack to switch.\n\nFWIW, I personally find the opposite is true.",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15b63ebe_6b7160d2",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 43,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-08-02T13:39:32Z",
      "side": 1,
      "message": "Like I said, I don\u0027t think we should change this stack in that regard. I\u0027m also only an \"occasional JS developer\". When I started with React, they already changed a lot to previous versions (like including the functional components) and there were quite some parts which were marked as deprecated (like the super() call in the class components constructor and AFAIK some of the lifecycle methods changed their name or were also marked as deprecated, e.g. componentWillMount).\n\nAnd from all I\u0027ve seen so far, there is clearly a trend in React to move to functional components.\n\nThe drawback with all this frontend development is clearly that it changes so fast that you can\u0027t really follow-up if you are not working full time on that. But I also think that you should not always stick to one approach because you always did it like that and that from time to time you should try to follow-up on the newer approaches and try to incorporate them. Especially for new features this is something you could do without much of a problem. I did the same when I started with the new UI and I think it was definitely not drawback to do so.",
      "parentUuid": "32b7e38a_21b00f50",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e33b1e3_90e11fec",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 43,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "I tried but I hit an error with setting states in two different components. It wasn\u0027t very clear ... I\u0027d rather rework this later if needed and keep it that way for now since it works as is.",
      "parentUuid": "c9388c19_a815f62f",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe78d2da_c66cce5c",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 43,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Definitely a discussion worth having, as new React programmers will most definitely have learned to code using functional components. We don\u0027t want to make it difficult for newcomers to contribute. But I think we all agree that this is something to be decided later.",
      "parentUuid": "15b63ebe_6b7160d2",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdb3ab8a_c6ae18a0",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 53,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "AFAIK the super() call is deprecated",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e1248e1_def4e4ba",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 53,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "I think an error is thrown if you try to use \"this\" in the constructor without calling super(props) first. This is going to be irrelevant once this is turned into a function anyway.",
      "parentUuid": "bdb3ab8a_c6ae18a0",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "134e4c7a_8fad6d4e",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 95,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "nit: I would place the icon in front of the text, so it\u0027s similar to most of the icons we use. But maybe that\u0027s only me and the typical \"sign out\" button has the icon placed behind the text ðŸ˜„",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4cbf276_cf39a4f8",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 95,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "It\u0027s a valid UX discussion. I\u0027ve checked a few interfaces (github, gerrit, gmail, ...) and it turns out \"sign out\" buttons usually don\u0027t have icons (and are hidden so that people tend to forget logging out, making it easier for these apps to track you, but it\u0027s a whole other subject). So I am fine with actually removing it.",
      "parentUuid": "134e4c7a_8fad6d4e",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b4e16e4_cc23216d",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 106,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "Although this renders nicely in (I\u0027d assume all) modern browsers, it gives some nasty exceptions in the console log because a \u003cdl\u003e or \u003cdiv\u003e cannot be part of a \u003cp\u003e.\n\nOne solution to this would be to use \u003cdiv\u003e tags instead of \u003cp\u003e and take care of the padding/margin via styling/CSS. Another solution could be something like the \"About modal\" example (which is using a grid) https://www.patternfly.org/v4/components/about-modal",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5344c23d_f031543d",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-29T06:10:57Z",
      "side": 1,
      "message": "I wanted to suggest that we use a \"copy to clipboard\" functionality here, but I just discovered that this is already there ðŸ˜Š\nHowever, this wasn\u0027t obvious to me in the first place as a click on the button also expands the accordion.\nThat raised the question for me if we even need to show the token or simply change the \"Show Token\" entry to something like \"Copy zuul-client command\" that only copies the command on click (we might want to change the onClick handler to work on the whole paragraph and not just the icon).\n\nI think this depends on what the main purpose of this field should be. Do we want to show the user the token or is the copy-to-clipboard functionality more beneficially. Although I like the design with the accordion, I find that showing the token doesn\u0027t provide too much benefit, if I could simply copy it via a single click instead.\n\nIf we can\u0027t decide on that, we might also provide two actions here. One to copy the token and one to copy the zuul-client command.\n\nThis would also avoid the issue with the console errors I\u0027ve mentioned above since there would be no \u003cdiv\u003e and \u003cdl\u003e elements nested into \u003cp\u003e.",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d41fee6_d00dcae5",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Showing the token was mostly for debugging purposes, so that I could ensure similar behaviors between the GUI and the CLI.\n\nThis should instead be reworked into a way to download a pre-written client.conf file for the tenant. Since many tokens should be expected to be short-lived, the user should be able to choose whether or not to include the current token into the config file.",
      "parentUuid": "5344c23d_f031543d",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d486bcad_56204f19",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-08-03T06:34:59Z",
      "side": 1,
      "message": "Then it might be a good idea to start with only the \"copy zuul-client command to clipboard\" (without showing the token). This would avoid the warnings in the console and we can simply add more functionality (like downloading/copying) a whole client.conf file.\n\nRegarding the life time of the tokens: Is that something we want to address later on? This feels a little like the \"copy login command\" functionality from OpenShift (which I use quite often), but there the token is valid for ~1 day. Providing such a functionality for short-lived tokens (~10 mins if I\u0027m not mistaken), would result in a lot of copy-and-paste which feels a little inconvenient.",
      "parentUuid": "4d41fee6_d00dcae5",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6387a98e_6e884bd3",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-09T11:24:11Z",
      "side": 1,
      "message": "\u003e Then it might be a good idea to start with only the \"copy zuul-client command to clipboard\" (without showing the token). This would avoid the warnings in the console and we can simply add more functionality (like downloading/copying) a whole client.conf file.\n\u003e \n\nThe client configuration is between pre tags now. It doesn\u0027t seem to raise warnings in the console anymore.\n\n\u003e Regarding the life time of the tokens: Is that something we want to address later on? This feels a little like the \"copy login command\" functionality from OpenShift (which I use quite often), but there the token is valid for ~1 day. Providing such a functionality for short-lived tokens (~10 mins if I\u0027m not mistaken), would result in a lot of copy-and-paste which feels a little inconvenient.\n\nThe lifetime of tokens is set at the identity provider level. If you\u0027re using the test compose, keycloak sets tokens to be valid 15 minutes by default only. It is up to the admin of the identity provider to decide how long-lived the tokens will be, and to provide a way to hand out more permanent tokens if necessary.\n(this can be also handled by a zuul operator with `zuul create-auth-token` if a local authenticator is configured)",
      "parentUuid": "d486bcad_56204f19",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdc741ba_27e3c103",
        "filename": "web/src/containers/auth/Auth.jsx",
        "patchSetId": 26
      },
      "lineNbr": 113,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-08-10T06:12:59Z",
      "side": 1,
      "message": "Ok, that\u0027s fine with me. Just one thing: Could we add a `cursor: pointer` style to the PasteIcon? Otherwise it\u0027s not clear that you can click it. Or we wrap it into a button that doesn\u0027t provide any additional styling.",
      "parentUuid": "6387a98e_6e884bd3",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea26874f_badd2d6d",
        "filename": "web/src/reducers/auth.js",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "You could put the default state into the initialState.js file. This allows us to keep all initial states in a single file and simply use them for testing as well. This file could then be changed like this:\n\nimport initialState from \u0027./initialState\u0027\n\nexport default (state \u003d initialState.build, action) \u003d\u003e {",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "869cf824_74aeabce",
        "filename": "web/src/reducers/auth.js",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea26874f_badd2d6d",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c37a623_d0356674",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "I find it much easier to use the JavaScript spread operator (...) here instead of the immutability-helper. This could be simplified to:\n\nreturn { ...state, isFetching: true }\n\nThis basically says: Copy the old state dictionary and overwrite isFetching with true.\n\nYou can check out the reducers/build.js file for more complex examples (like nested dicts) if necessary.",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60eb4e2d_65c12209",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 63,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c37a623_d0356674",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c376ccf_39c7be70",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 65,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "Could be simplified to\n\nreturn { ...state, isFetching: false, scope: [], asAdmin: false }",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "942df830_69597209",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 65,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c376ccf_39c7be70",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3a27331_144bcdcc",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "Could be simplified to\n\nreturn { ...state, isFetching: false, scope: action.scope, isAdmin: action.isAdmin }",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a779a4e9_4c524383",
        "filename": "web/src/reducers/user.js",
        "patchSetId": 26
      },
      "lineNbr": 69,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3a27331_144bcdcc",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebd9ac94_4f545859",
        "filename": "web/src/store.dev.js",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 27952
      },
      "writtenOn": "2021-07-28T14:41:04Z",
      "side": 1,
      "message": "Is there a specific reason why we have to exclude those values here? This typically means that we do not handle the state correctly in those cases. Do we mutate their state or does this come from a third-party library?",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff05f8b8_59b3bb22",
        "filename": "web/src/store.dev.js",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-02T13:55:17Z",
      "side": 1,
      "message": "it comes from the redux-oidc library.",
      "parentUuid": "ebd9ac94_4f545859",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7bff6b_892e3473",
        "filename": "web/src/store.dev.js",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 9311
      },
      "writtenOn": "2021-08-09T13:08:37Z",
      "side": 1,
      "message": "That seems suspicious. Is it conflicting with the other state added to the store?\n\nPerhaps this need a comment to explain the motivation of ignoring the redux state invariant.",
      "parentUuid": "ff05f8b8_59b3bb22",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54cf0d78_81f99d7b",
        "filename": "web/src/store.dev.js",
        "patchSetId": 26
      },
      "lineNbr": 35,
      "author": {
        "id": 7186
      },
      "writtenOn": "2021-08-09T20:41:45Z",
      "side": 1,
      "message": "So what happens is that without adding these, the dev deployment seems to be stuck in a loop. Nothing appears in the console. If someone has an idea how to figure out what is going on exactly, I\u0027ll gladly take the suggestion.",
      "parentUuid": "fa7bff6b_892e3473",
      "revId": "072a23081e18a41304aa2ea368b992f9dd964984",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    }
  ]
}