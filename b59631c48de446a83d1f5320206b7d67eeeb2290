{
  "comments": [
    {
      "key": {
        "uuid": "0808d2db_fc58d6fd",
        "filename": "tests/base.py",
        "patchSetId": 3
      },
      "lineNbr": 4078,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-06-22T13:53:48Z",
      "side": 1,
      "message": "Changing the order here in PS4 seems to have \"fixed\" two more test cases. Maybe there is also another race condition leading to the remaining failures.",
      "revId": "b59631c48de446a83d1f5320206b7d67eeeb2290",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704a0cb7_a55ee2b5",
        "filename": "tests/base.py",
        "patchSetId": 3
      },
      "lineNbr": 4078,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-06-22T13:54:13Z",
      "side": 1,
      "message": "s/PS4/PS3/",
      "parentUuid": "0808d2db_fc58d6fd",
      "revId": "b59631c48de446a83d1f5320206b7d67eeeb2290",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "077be6a4_e03d6505",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-06-22T21:32:45Z",
      "side": 1,
      "message": "This is a common trap with lambdas: Python doesn\u0027t fix the value of tenant_name in the closure here, it fixes the name and scope, so we end up with an unexpected value of tenant_name in the lambda based on the state of loop iteration at the time.\n\nIf I had to distill this into what to look for to avoid, I\u0027d say: don\u0027t use lambdas to make a closure in a loop.  I think the current/old code suffered from this too, but unlikely to hit a race condition.  I\u0027ve gone through the rest of this file and double checked the other lambdas look okay.\n\nThere are ways to do this with lamdbas (default arguments, or lambdas within lambdas), but I think they are harder to understand than just adding a factory function to return a closure.  That\u0027s what I did in the executor api, so that\u0027s what I\u0027ll do here in the next ptachset to resolve the race conditions.  It\u0027s going to look like:\n\n    def _makePipelineWatcher(self, tenant_name):\n        def watch(children, event\u003dNone):\n            return self._pipelineWatch(tenant_name, children)\n        return watch\n\nBut could be simplified as:\n\n    def _makePipelineWatcher(self, tenant_name):\n        return lambda children: self._pipelineWatch(tenant_name, children)\n\nThat seems equally readable/maintainable to me -- the main thing is getting the closure its own scope by calling into a method.",
      "revId": "b59631c48de446a83d1f5320206b7d67eeeb2290",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b317ea04_556da5ed",
        "filename": "zuul/zk/event_queues.py",
        "patchSetId": 3
      },
      "lineNbr": 100,
      "author": {
        "id": 27582
      },
      "writtenOn": "2021-06-23T06:08:12Z",
      "side": 1,
      "message": "Thanks, for fixing this! I knew that late binding behavior would hit me at some point :D\n\nI think `functools.partial()` could also work here:\n\n     self.kazoo_client.ChildrenWatch(\n         pipelines_path,\n         functools.partial(self._pipelineWatch, tenant_name, p)\n     )",
      "parentUuid": "077be6a4_e03d6505",
      "revId": "b59631c48de446a83d1f5320206b7d67eeeb2290",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}