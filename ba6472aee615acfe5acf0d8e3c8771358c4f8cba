{
  "comments": [
    {
      "key": {
        "uuid": "ffe62b97_c7a6dec1",
        "filename": "tests/base.py",
        "patchSetId": 18
      },
      "lineNbr": 1213,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "(nit) this is a little confusing. Does it mean the tests should create the keys, or that the zuul scheduler should. Consider renaming, perhaps to \"pregenerate_project_keys\" (and inverting logic)",
      "range": {
        "startLine": 1213,
        "startChar": 15,
        "endLine": 1213,
        "endChar": 34
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_007a5eb8",
        "filename": "tests/base.py",
        "patchSetId": 18
      },
      "lineNbr": 1213,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "There is no \"pre-generation\".  Zuul\u0027s standard behavior is to create keys for every project if they don\u0027t exist.  Setting this value in this test fixture to false, the default, will cause a static key that is stored in the test fixtures directory to be used for every project.\n\nIn other words: if you want zuul to create \"real\" keys for projects, set this to true.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_47dace77",
        "filename": "tests/base.py",
        "patchSetId": 18
      },
      "lineNbr": 1465,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "I think I\u0027m missing something here, but isn\u0027t the state root different for each unit test thus not actually saving time pre-generating the keys?",
      "range": {
        "startLine": 1465,
        "startChar": 37,
        "endLine": 1465,
        "endChar": 47
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_e04e5a95",
        "filename": "tests/base.py",
        "patchSetId": 18
      },
      "lineNbr": 1465,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Yes, which is why we\u0027re not pre-generating (there\u0027s that word again) a key.  We\u0027re copying an existing static key stored in the fixtures directory into each project.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_60624a0c",
        "filename": "tests/fixtures/private.pem",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "This is the key we copy.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_405d0645",
        "filename": "tests/unit/test_v3.py",
        "patchSetId": 18
      },
      "lineNbr": 310,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Most tests copy the static key into place before running.  This flag causes zuul to actually execute the key generation code.  I will add some comments to the effect that this line is, ahem, key to the test.  It is subtle.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_b761e5ab",
        "filename": "tests/unit/test_v3.py",
        "patchSetId": 18
      },
      "lineNbr": 324,
      "author": {
        "id": 6589
      },
      "writtenOn": "2017-03-28T22:04:46Z",
      "side": 1,
      "message": "As a casual observer, it\u0027s not very lear from this test that it actually validates the key generation path.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_92b376e9",
        "filename": "tests/unit/test_v3.py",
        "patchSetId": 18
      },
      "lineNbr": 324,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "I\u0027m also not sure this is necessary. Simply loading the config should be enough to generate the keys. I\u0027m possibly missing some step of validation though.",
      "parentUuid": "ffe62b97_b761e5ab",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_2058c253",
        "filename": "tests/unit/test_v3.py",
        "patchSetId": 18
      },
      "lineNbr": 324,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Exactly -- the fact that the configuration is loaded and this test runs means that zuul did not explode during the key generation stage.  All of this is here just to make sure we actually loaded the configuration (key generation is a side effect of that).  I\u0027ll add comments.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_272d8aa7",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 24,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "(nit) default backend to what? this is ambiguous without context so perhaps import as?",
      "range": {
        "startLine": 24,
        "startChar": 41,
        "endLine": 24,
        "endChar": 56
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_3a2235ba",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 24,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-29T16:41:37Z",
      "side": 1,
      "message": "I googled \u0027python cryptography default_backend\u0027 and got https://cryptography.io/en/latest/hazmat/backends/ .. seems pretty straight forward as it\u0027s \"the default backend for cryptography.hazmat\".",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_00537e3a",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 24,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "In the later change where all the crypto functions are centralized, they are all annotated with links to their source documentation.  I think perhaps that\u0027s what you\u0027re after here, so I\u0027ll leave this as-is for now with the expectation that later change addresses the comment.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_e7c0c2e3",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 713,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "(nit) bit odd for the parser to be generating keys... consider a new class?\n\nIs it worth capturing exceptions that may occur here? For example the private key path isn\u0027t writable or generation fails for some reason?",
      "range": {
        "startLine": 713,
        "startChar": 8,
        "endLine": 713,
        "endChar": 20
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_e033fa12",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 713,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "The actual crypto work is moved in a later change, but the decision to generate a key on configuration parsing is still here.  I\u0027m not sure where else we would do it.\n\nAs for exceptions, if we are unable to perform this, the current configuration loading exception handler will catch and log the error.  It is correct for the configuration to stop loading in that case.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_1271a644",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 721,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "(nit) this is confusing where elsewhere key_dir is \"state_dir/keys\", but this is \"state_dir/keys/connection\"",
      "range": {
        "startLine": 721,
        "startChar": 8,
        "endLine": 721,
        "endChar": 15
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_c036b603",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 721,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Are you saying it\u0027s confusing this local variable doesn\u0027t mean the same thing as a local variable in a different function?",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_b2f1f36d",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 725,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-28T22:39:15Z",
      "side": 1,
      "message": "This can get stalled out on entropy problems pretty easily. Perhaps worth an INFO log of \"Generating key\" too?",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_a03972f2",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 725,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "It shouldn\u0027t stall on entropy per se (aiui, openssl seeds its PRNG from /dev/urandom).  However, it may be \"slow\" in that it may need to factor several candidate prime numbers.  I\u0027m a little worried that the double log messages will be too chatty, but we can add it and see.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_92f6ef62",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 739,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-28T22:39:15Z",
      "side": 1,
      "message": "Oops, it was already generated, it\u0027s not being generated.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_b23f9a85",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 755,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "Do we need to capture any malformed key exceptions?",
      "range": {
        "startLine": 755,
        "startChar": 10,
        "endLine": 755,
        "endChar": 14
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_803c2ee1",
        "filename": "zuul/configloader.py",
        "patchSetId": 18
      },
      "lineNbr": 755,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Nope.  Let them make this explode so we stop configuration.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_326caa9a",
        "filename": "zuul/model.py",
        "patchSetId": 18
      },
      "lineNbr": 2088,
      "author": {
        "id": 7069
      },
      "writtenOn": "2017-03-29T12:08:41Z",
      "side": 1,
      "message": "(-1) In configloader you\u0027re storing the public key as self.public_key. Unless I\u0027ve missed something we aren\u0027t writing the file out or storing the filename.",
      "range": {
        "startLine": 2088,
        "startChar": 13,
        "endLine": 2088,
        "endChar": 28
      },
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_80478e77",
        "filename": "zuul/model.py",
        "patchSetId": 18
      },
      "lineNbr": 2088,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Yep, this is no longer used, I\u0027ll remove it.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_f2e1bb9c",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 460,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-28T22:39:15Z",
      "side": 1,
      "message": "I was surprised to see we don\u0027t pass defaults to ConfigParser, but I\u0027m sure there\u0027s a reason. Still this seems really deep and hard to discover. Haven\u0027t looked to see if other defaults are done in the same way, so I\u0027l leave this here just as a pondering.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_c0511638",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 460,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "I don\u0027t recall if there was a reason.  Unless I\u0027m mistaken, the \"connections\" part of the config file won\u0027t be able to use defaults anyway since the section name is dynamic.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_d2deb7d8",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 466,
      "author": {
        "id": 6488
      },
      "writtenOn": "2017-03-28T22:39:15Z",
      "side": 1,
      "message": "I\u0027d like to see 0700 asserted here, both when it is created, and when it exists.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffe62b97_a044d274",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 466,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-03-29T17:20:38Z",
      "side": 1,
      "message": "Good idea.",
      "revId": "ba6472aee615acfe5acf0d8e3c8771358c4f8cba",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}