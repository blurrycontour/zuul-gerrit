{
  "comments": [
    {
      "key": {
        "uuid": "1a6eadb0_56c92e58",
        "filename": "zuul/driver/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-15T12:36:24Z",
      "side": 1,
      "message": "Is this worth doing as an ABC?",
      "range": {
        "startLine": 16,
        "startChar": 13,
        "endLine": 16,
        "endChar": 19
      },
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_f88e922c",
        "filename": "zuul/driver/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-12-15T18:56:01Z",
      "side": 1,
      "message": "Possibly so.  Or, perhaps as a concrete base class that we expect drivers to inherit from.  I\u0027m pretty open to options here.  I like the idea of landing this structural change then tweaking the API before we release it.",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_8eb838e7",
        "filename": "zuul/driver/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 6589
      },
      "writtenOn": "2016-12-14T17:41:55Z",
      "side": 1,
      "message": "Lol",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_4e670025",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 6589
      },
      "writtenOn": "2016-12-14T17:41:55Z",
      "side": 1,
      "message": "Wouldn\u0027t registerScheduler be inherited by the base driver class, with a simple pass action? Won\u0027t it then be safe to just always call registerScheduler()? Either something interesting will happen, or the fall through to pass would happen. Unless I\u0027m misunderstanding things.",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_968bc667",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-15T12:36:24Z",
      "side": 1,
      "message": "I guess you could have a driver that doesn\u0027t inherit from the base class for some odd reason. Nevertheless extra hardening shouldn\u0027t hurt.",
      "parentUuid": "1a6eadb0_4e670025",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_1880aef6",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-12-15T18:56:01Z",
      "side": 1,
      "message": "Yes, this is the sort of thing we should tighten up before release.  Are we duck-typing or inheriting.  I kind of left the door open to both right now.",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_ce7310e6",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 6589
      },
      "writtenOn": "2016-12-14T17:41:55Z",
      "side": 1,
      "message": "Same question here.",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_d072cfe2",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-12-20T23:58:31Z",
      "side": 1,
      "message": "why should we be able to fetch a source/reporter/trigger based on the connection? Shouldn\u0027t this go via driver manager now?",
      "range": {
        "startLine": 121,
        "startChar": 15,
        "endLine": 121,
        "endChar": 25
      },
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_d3773939",
        "filename": "zuul/lib/connections.py",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-21T00:21:20Z",
      "side": 1,
      "message": "I think this is because in the config the trigger/source/reporter etc is referred to by the connection name so that the $reporter has the context.",
      "parentUuid": "1a6eadb0_d072cfe2",
      "range": {
        "startLine": 121,
        "startChar": 15,
        "endLine": 121,
        "endChar": 25
      },
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_5625ae06",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-15T12:36:24Z",
      "side": 1,
      "message": "(-1) I feel like this should be a method on the base Driver that is called for each driver rather than special casing a driver here.",
      "range": {
        "startLine": 333,
        "startChar": 24,
        "endLine": 333,
        "endChar": 40
      },
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_d889d627",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-12-15T18:56:01Z",
      "side": 1,
      "message": "Oh interesting.  I actually don\u0027t think this is a general-case method for drivers.  I think it\u0027s okay to special case the *zuul* driver inside of Zuul -- it\u0027s a pretty special driver in the first place, creating synthetic events based on internal actions.  We could even put this on the scheduler itself, but for code organization, it seems nice to have it in the zuul driver.  I\u0027d like to leave it as an internal API.  Maybe we could make it more clear that\u0027s what it is?",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_b0c0612c",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-19T00:32:28Z",
      "side": 1,
      "message": "So it is a special driver partly because of this, but it doesn\u0027t need to be a special case.\n\nWe could expose this as a driver hook and leave it to a driver to choose to implement. We may find a use outside of the zuul driver in the future.\n\nThat said, if we want to hard-code it as a special case I don\u0027t feel strongly enough to block on it. My preference, however, is not to special case it.",
      "parentUuid": "1a6eadb0_d889d627",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_ef801349",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-12-19T17:13:45Z",
      "side": 1,
      "message": "That makes sense.  Since we\u0027re working on establishing a public API, I\u0027d rather be very conservative in what we say is going to be part of that API and are going to support indefinitely.  I can\u0027t imagine, right now, that any other driver would need this, so I\u0027d like to omit it from that API.  However, if we find ourselves in the position of seeing another driver that could benefit from this, I agree with your proposed course.  This is easily forward-compatible with that, so let\u0027s leave this as-is -- a private API for now and open it up later if needed.",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_50923f4c",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 7191
      },
      "writtenOn": "2016-12-20T23:37:01Z",
      "side": 1,
      "message": "So does it make sense for zuul driver to operate as a driver at all? From what i can see there are a number of things that are unique to the zuul driver which should basically be considered core parts of how zuul works rather than something you can add/remove. \n\nI see that you need a source for the trigger, but maybe this should be more inbuilt that it is currently?",
      "parentUuid": "1a6eadb0_ef801349",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_73266569",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 333,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-21T00:21:20Z",
      "side": 1,
      "message": "Personally I can\u0027t see the harm of having it exposed as part of the API. Drivers currently live in-tree which means we\u0027ll review (or at least see) anything else that may want to use this. We\u0027ll also be able to change the interface across all the drivers at once if we want to make a change.\n\nGranted this gets more complicated if we don\u0027t want our drivers in tree (or want to support additional 3rd party drivers etc).\n\nHowever I still dislike the special casing. I think it is because it doesn\u0027t group the driver neatly up into its own module.\n\nIf we are going to special case it I think Jamie\u0027s suggestion of it not being a driver may make some sense.",
      "parentUuid": "1a6eadb0_50923f4c",
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6eadb0_f6807ac1",
        "filename": "zuul/manager/__init__.py",
        "patchSetId": 4
      },
      "lineNbr": 652,
      "author": {
        "id": 7069
      },
      "writtenOn": "2016-12-15T12:36:24Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 652,
        "startChar": 16,
        "endLine": 652,
        "endChar": 27
      },
      "revId": "a4c9bdffe39086becf2f3bc86467207439f3ccc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}