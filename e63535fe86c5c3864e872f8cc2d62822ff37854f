{
  "comments": [
    {
      "key": {
        "uuid": "bf659307_a78c0d36",
        "filename": "doc/source/admin/components.rst",
        "patchSetId": 18
      },
      "lineNbr": 256,
      "author": {
        "id": 4146
      },
      "writtenOn": "2018-04-03T22:02:22Z",
      "side": 1,
      "message": "Note this isn\u0027t entirely accurate. Please see comment in scheduler.py.",
      "range": {
        "startLine": 255,
        "startChar": 41,
        "endLine": 256,
        "endChar": 62
      },
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_e7c3e536",
        "filename": "doc/source/admin/components.rst",
        "patchSetId": 18
      },
      "lineNbr": 256,
      "author": {
        "id": 4146
      },
      "writtenOn": "2018-04-03T22:06:36Z",
      "side": 1,
      "message": "And on a second read I see there is an exception raised to handle the exclusivity. Sorry for the noise.",
      "parentUuid": "bf659307_a78c0d36",
      "range": {
        "startLine": 255,
        "startChar": 41,
        "endLine": 256,
        "endChar": 62
      },
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_c78fc127",
        "filename": "doc/source/admin/components.rst",
        "patchSetId": 18
      },
      "lineNbr": 262,
      "author": {
        "id": 4146
      },
      "writtenOn": "2018-04-03T22:02:22Z",
      "side": 1,
      "message": "See above.",
      "range": {
        "startLine": 261,
        "startChar": 19,
        "endLine": 262,
        "endChar": 38
      },
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_27623d0b",
        "filename": "releasenotes/notes/tenant-from-script-e28d736001db5365.yaml",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 4162
      },
      "writtenOn": "2018-04-03T22:28:07Z",
      "side": 1,
      "message": "Don\u0027t want to block this, but today was solve this by using puppet / ansible to mange and layout this configure. It also means, main.yaml gets reviews via code review.\n\nBut doing this, zuul users could bypass that. Not that it is a bad thing, but do find it very helpful today with openstack-infra to atleast audit the history of changes via codereview or git.",
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_025da713",
        "filename": "releasenotes/notes/tenant-from-script-e28d736001db5365.yaml",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 1
      },
      "writtenOn": "2018-04-03T22:36:49Z",
      "side": 1,
      "message": "As maintainers of Zuul, I don\u0027t think we should enforce our opinions of how people create their main.yaml files.  We can share suggestions, but there are plenty of legitimate circumstances where code-review of main.yaml is not appropriate.",
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_8242170e",
        "filename": "releasenotes/notes/tenant-from-script-e28d736001db5365.yaml",
        "patchSetId": 18
      },
      "lineNbr": 1,
      "author": {
        "id": 4162
      },
      "writtenOn": "2018-04-03T22:49:22Z",
      "side": 1,
      "message": "Sure, code review was just an example. It was more about managing configuration external, notify zuul to reload said yaml files.\n\nIf users want to store that info in a database, that is okay too. I believe there is external tooling today to handle that case vs having zuul trigger a dynamic build of configs.",
      "parentUuid": "bf659307_025da713",
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_87ac699f",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 552,
      "author": {
        "id": 4146
      },
      "writtenOn": "2018-04-03T22:02:22Z",
      "side": 1,
      "message": "Because this isn\u0027t an elif this the tenant_config option isn\u0027t actually exclusive with the tenant_config_script option. Instead tenant_config_script will always win. At the very least we should update the docs to ensure they are accurate. I think its fine to fall through but the docs should make it clear which one will win.\n\n(Note that making it an elif doesn\u0027t really fix it either because in that case tenant_config will always win if set).",
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf659307_67b035de",
        "filename": "zuul/scheduler.py",
        "patchSetId": 18
      },
      "lineNbr": 552,
      "author": {
        "id": 4146
      },
      "writtenOn": "2018-04-03T22:06:36Z",
      "side": 1,
      "message": "Whoops, of course its not on a reread that I see there is an exception raised here if both happen to be set making them exclusive. /me updates review.",
      "parentUuid": "bf659307_87ac699f",
      "revId": "e63535fe86c5c3864e872f8cc2d62822ff37854f",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}