{
  "comments": [
    {
      "key": {
        "uuid": "53bc8be3_d5ffb0f8",
        "filename": "tests/unit/test_keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "Would it make sense to test from a backup explicitly as well? I think the fixtures are set up such that every test is doing this but not explicitly.",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e98309a7_8815eceb",
        "filename": "tests/unit/test_keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "Oh, this is just a poorly named test method now.  \"backup\" referred to the backup key store, ie, the filesystem based one.  It\u0027s gone.  So the only keystore functionality left to test is without backup.  I can rename this to \"test_keystore\" or something.\n\nAnd yes, now *almost* every test is using the import functionality implicitly.  There are some tests which generate keys.  They were never in this file.",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4044b57b_898cf9c6",
        "filename": "zuul/cmd/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "Are we not adding the new commands to this list so that you can add the path arguments below?",
      "range": {
        "startLine": 47,
        "startChar": 23,
        "endLine": 47,
        "endChar": 46
      },
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f07dcdc_d92c351a",
        "filename": "zuul/cmd/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "Correct; existing commands don\u0027t have path arguments.\n\nA better commit message would have said something like:\n  Converted existing zuul-scheduler command arguments to \u0027subcommands\u0027 for consistency with new import-keys and export-keys commands.",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e90850f_dbd54af9",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "Might want to record that the walk and consequently the export had errors somewhere? That way operators can see the export may have problems that need to be addressed?",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3aad5c6_d2681377",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "Good point; we should get that information into stderr.",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d372b34_0a8c2d11",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "Having a force flag might be a good idea here so that users can avoid restoring from a stale backup?",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c5e0216_0a6aef5b",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "To be clear: are you suggesting that the default mode should be to refuse to overwrite existing keys in ZK, and then only if --force is added, then we would allow that?\n\n(Note that at the moment there is not yet a way to delete all the keys from ZK, but that\u0027s on the to-do list).",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e93d5db8_42744f01",
        "filename": "zuul/lib/keystorage.py",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T22:16:14Z",
      "side": 1,
      "message": "Yes. In my mind there are two ways you hit this exception. The first is the one that is handled fine which is where we overwrite data with identical data because you are restoring what is already there. The other is if a project\u0027s secrets update for whatever reason and then you restore from backup you probably don\u0027t want it to implicitly overwrite what was there.\n\nInstead, you should be given the option to say \"no I really want the old stuff because the new stuff is bad\".",
      "parentUuid": "5c5e0216_0a6aef5b",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bfc0414_a68dd22f",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 2018,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "Writing a separate file for each record isn\u0027t a regression on how it was working before. I wonder if it might be simpler for users to have an aggregated serialization of some sort. Like a list of objects in a single json file ?",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee0c0a53_b708b573",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 2018,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "Yeah, I\u0027ve been toying around with that as well.  I think the only thing this has going for it is the ease with which keys could be added or removed.  But a sufficiently clever operator can perform JSON surgery if necessary.\n\nI\u0027m open to this idea.",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe027aa6_db757d63",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 2018,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T22:16:14Z",
      "side": 1,
      "message": "Another thought that occured to me from this is it might be nice to keep checksums of the individual bits of data and having things split out into files like that might make that easier? Then you know what specific thing is corrupted if that happens rather than the entire dataset and needing to sift through it.",
      "parentUuid": "ee0c0a53_b708b573",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "655d431c_343c5975",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 2035,
      "author": {
        "id": 4146
      },
      "writtenOn": "2021-07-22T21:42:59Z",
      "side": 1,
      "message": "This is an important string update. I wonder if we should explicitly test the case where path is provided without a trailing \u0027/\u0027 and with one?",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f92a506e_11125e51",
        "filename": "zuul/scheduler.py",
        "patchSetId": 3
      },
      "lineNbr": 2035,
      "author": {
        "id": 1
      },
      "writtenOn": "2021-07-22T22:09:33Z",
      "side": 1,
      "message": "++",
      "revId": "0bf6e147206d7399afa8d3a2fc73d1c36979126c",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}